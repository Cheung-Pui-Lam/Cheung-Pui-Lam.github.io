<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git中常见的报错</title>
      <link href="/2022/07/18/git%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8A%A5%E9%94%99/"/>
      <url>/2022/07/18/git%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="Git常见错误1"><a href="#Git常见错误1" class="headerlink" title="Git常见错误1:"></a>Git常见错误1:</h2><ul><li><h3 id="在git-bash中输入指令-git-status查看本地库状态时报错"><a href="#在git-bash中输入指令-git-status查看本地库状态时报错" class="headerlink" title="在git bash中输入指令:git status查看本地库状态时报错:"></a>在git bash中输入指令:git status查看本地库状态时报错:</h3> <img src="/../upload/git/git-wrong/1.png" alt="image"></li><li><h3 id="原因"><a href="#原因" class="headerlink" title="原因 :"></a>原因 :</h3></li><li>这个错误说明了没有 .git这样的一个目录，所以只需要 git init一下，就可以解决了，然后再重新建立远程连接即可.</li></ul><h2 id="Git常见错误2"><a href="#Git常见错误2" class="headerlink" title="Git常见错误2:"></a>Git常见错误2:</h2><ul><li><h3 id="在git-bash中输入指令-git-status查看本地库状态时报错-1"><a href="#在git-bash中输入指令-git-status查看本地库状态时报错-1" class="headerlink" title="在git bash中输入指令:git status查看本地库状态时报错:"></a>在git bash中输入指令:git status查看本地库状态时报错:</h3> <img src="/../upload/git/git-wrong/2.png" alt="image"></li><li><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因 :"></a>原因 :</h3></li><li>原因是在 xxx&#x2F;文件夹下有隐藏文件，删除掉即可(因为这是我博客的文件夹,里面存在.git的吟唱文件,执行git init时添加的,用于初始化本地库的)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
            <tag> git中常用的报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git中常用的linux指令</title>
      <link href="/2022/07/18/git%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84linux%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/07/18/git%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84linux%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git中常用的linux指令有如下几个"><a href="#git中常用的linux指令有如下几个" class="headerlink" title="git中常用的linux指令有如下几个"></a><strong>git中常用的linux指令有如下几个</strong></h1><ul><li><h3 id="1、cd-改变目录-进入指定文件夹-。"><a href="#1、cd-改变目录-进入指定文件夹-。" class="headerlink" title="1、cd : 改变目录(进入指定文件夹)。"></a>1、cd : 改变目录(进入指定文件夹)。</h3> <img src="/../upload/git/git-linux-command/1.png" alt="image"></li><li><h3 id="2、cd-回退到上一个目录，直接cd进入默认目录"><a href="#2、cd-回退到上一个目录，直接cd进入默认目录" class="headerlink" title="2、cd .. : 回退到上一个目录，直接cd进入默认目录"></a>2、cd .. : 回退到上一个目录，直接cd进入默认目录</h3></li><li><h3 id="3、cd-：返回最近访问目录"><a href="#3、cd-：返回最近访问目录" class="headerlink" title="3、cd -  ：返回最近访问目录"></a>3、cd -  ：返回最近访问目录</h3> <img src="/../upload/git/git-linux-command/2.png" alt="image"></li><li><h3 id="4、pwd-显示当前所在的目录路径"><a href="#4、pwd-显示当前所在的目录路径" class="headerlink" title="4、pwd : 显示当前所在的目录路径"></a>4、pwd : 显示当前所在的目录路径</h3> <img src="/../upload/git/git-linux-command/3.png" alt="image"></li><li><h3 id="5、ls-ll-都是列出当前目录中的所有文件，相较于ls，ll列出的内容更为详细（包括权限、所属用户和组、大小、时间、名称等）"><a href="#5、ls-ll-都是列出当前目录中的所有文件，相较于ls，ll列出的内容更为详细（包括权限、所属用户和组、大小、时间、名称等）" class="headerlink" title="5、ls(ll): 都是列出当前目录中的所有文件，相较于ls，ll列出的内容更为详细（包括权限、所属用户和组、大小、时间、名称等）"></a>5、ls(ll): 都是列出当前目录中的所有文件，相较于ls，ll列出的内容更为详细（包括权限、所属用户和组、大小、时间、名称等）</h3> <img src="/../upload/git/git-linux-command/4.png" alt="image"><br> <img src="/../upload/git/git-linux-command/5.png" alt="image"></li><li><h3 id="6、ls-a-显示该文件夹中的隐藏文件"><a href="#6、ls-a-显示该文件夹中的隐藏文件" class="headerlink" title="6、ls -a : 显示该文件夹中的隐藏文件"></a>6、ls -a : 显示该文件夹中的隐藏文件</h3></li><li><h3 id="7、ls-l-列出文件的详细信息。"><a href="#7、ls-l-列出文件的详细信息。" class="headerlink" title="7、ls -l : 列出文件的详细信息。"></a>7、ls -l : 列出文件的详细信息。</h3></li><li><h3 id="8、touch-新建一个文件-如-touch-index-js-就会在当前目录下新建一个index-js文件。"><a href="#8、touch-新建一个文件-如-touch-index-js-就会在当前目录下新建一个index-js文件。" class="headerlink" title="8、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。"></a>8、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</h3> <img src="/../upload/git/git-linux-command/6.png" alt="image"></li><li><h3 id="9、rm-删除一个文件-rm-index-js-就会把index-js文件删除。"><a href="#9、rm-删除一个文件-rm-index-js-就会把index-js文件删除。" class="headerlink" title="9、rm: 删除一个文件, rm index.js 就会把index.js文件删除。"></a>9、rm: 删除一个文件, rm index.js 就会把index.js文件删除。</h3> <img src="/../upload/git/git-linux-command/7.png" alt="image"></li><li><h3 id="10、mkdir-新建一个目录-就是新建一个文件夹"><a href="#10、mkdir-新建一个目录-就是新建一个文件夹" class="headerlink" title="10、mkdir: 新建一个目录,就是新建一个文件夹"></a>10、mkdir: 新建一个目录,就是新建一个文件夹</h3></li><li><h3 id="11、rm-r-删除一个文件夹-rm-r-src-删除src目录rm-rf-x2F-切勿在Linux中尝试！删除电-脑中全部文件！"><a href="#11、rm-r-删除一个文件夹-rm-r-src-删除src目录rm-rf-x2F-切勿在Linux中尝试！删除电-脑中全部文件！" class="headerlink" title="11、rm -r : 删除一个文件夹, rm -r src 删除src目录rm -rf &#x2F; 切勿在Linux中尝试！删除电## 脑中全部文件！"></a>11、rm -r : 删除一个文件夹, rm -r src 删除src目录rm -rf &#x2F; 切勿在Linux中尝试！删除电## 脑中全部文件！</h3></li><li><h3 id="12、mv-移动文件-mv-index-html-src-。index-html-是我们要移动的文件-src-是目标文件夹-当然-这样写-必须保证文件和目标文件夹在同一目录下。"><a href="#12、mv-移动文件-mv-index-html-src-。index-html-是我们要移动的文件-src-是目标文件夹-当然-这样写-必须保证文件和目标文件夹在同一目录下。" class="headerlink" title="12、mv : 移动文件, mv index.html src 。index.html 是我们要移动的文件, src 是目标文件夹## ,当然, 这样写,必须保证文件和目标文件夹在同一目录下。"></a>12、mv : 移动文件, mv index.html src 。index.html 是我们要移动的文件, src 是目标文件夹## ,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</h3></li><li><h3 id="13、reset-重新初始化终端-x2F-清屏。"><a href="#13、reset-重新初始化终端-x2F-清屏。" class="headerlink" title="13、reset : 重新初始化终端&#x2F;清屏。"></a>13、reset : 重新初始化终端&#x2F;清屏。</h3></li><li><h3 id="14、clear-清屏。"><a href="#14、clear-清屏。" class="headerlink" title="14、clear : 清屏。"></a>14、clear : 清屏。</h3></li><li><h3 id="15、history-查看命令历史。"><a href="#15、history-查看命令历史。" class="headerlink" title="15、history : 查看命令历史。"></a>15、history : 查看命令历史。</h3></li><li><h3 id="16、help-帮助。"><a href="#16、help-帮助。" class="headerlink" title="16、help : 帮助。"></a>16、help : 帮助。</h3></li><li><h3 id="17、exit-退出。"><a href="#17、exit-退出。" class="headerlink" title="17、exit : 退出。"></a>17、exit : 退出。</h3></li><li><h3 id="18、-表示注释"><a href="#18、-表示注释" class="headerlink" title="18、# : 表示注释"></a>18、# : 表示注释</h3></li><li><h3 id="19、cat-在控制台中显示文件的全部信息-即打开该文件"><a href="#19、cat-在控制台中显示文件的全部信息-即打开该文件" class="headerlink" title="19、cat : 在控制台中显示文件的全部信息,即打开该文件"></a>19、cat : 在控制台中显示文件的全部信息,即打开该文件</h3></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
            <tag> git中常用的linux指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习笔记(4)-git远程库操作</title>
      <link href="/2022/07/18/git%E8%BF%9C%E7%A8%8B%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/07/18/git%E8%BF%9C%E7%A8%8B%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="git远程库操作指令"><a href="#git远程库操作指令" class="headerlink" title="git远程库操作指令"></a><strong>git</strong>远程库操作指令</h1><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v                      查看当前所有远程地址别名</span><br><span class="line">git remote add 别名 远程地址        起别名</span><br><span class="line">git push 别名 分支                  推送本地分支上的内容到远程仓库</span><br><span class="line">git clone 远程地址                  将远程仓库的内容克隆到本地</span><br><span class="line">git pull 远程库地址别名 远程分支名   将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</span><br></pre></td></tr></table></figure></code></pre><ul><li><h3 id="1-创建远程仓库别名-实操"><a href="#1-创建远程仓库别名-实操" class="headerlink" title="1.创建远程仓库别名(实操)"></a>1.创建远程仓库别名(实操)</h3><ul><li><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v 查看当前所有远程地址别名</span><br><span class="line">git remote add 别名 远程地址</span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例"><a href="#实操案例" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command3/1.png" alt="image"></li><li><strong>这个地址在创建完远程仓库后生成的连接，如图所示红框中</strong><br><img src="/../upload/git/git-command3/2.png" alt="image"></li></ul></li><li><h3 id="2-推送本地分支到远程仓库-实操"><a href="#2-推送本地分支到远程仓库-实操" class="headerlink" title="2.推送本地分支到远程仓库(实操)"></a>2.推送本地分支到远程仓库(实操)</h3><ul><li><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push 别名 分支</span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例-1"><a href="#实操案例-1" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command3/3.png" alt="image"></li><li><strong>此时发现已将我们master 分支上的内容推送到GitHub 创建的远程仓库。</strong><br><img src="/../upload/git/git-command3/4.png" alt="image"></li></ul></li><li><h3 id="3-克隆远程仓库到本地-实操"><a href="#3-克隆远程仓库到本地-实操" class="headerlink" title="3.克隆远程仓库到本地(实操)"></a>3.克隆远程仓库到本地(实操)</h3><ul><li><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone 远程地址</span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例-2"><a href="#实操案例-2" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command3/5.png" alt="image"></li><li><strong>克隆结果：初始化本地仓库</strong><br><img src="/../upload/git/git-command3/6.png" alt="image"><br><img src="/../upload/git/git-command3/7.png" alt="image"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
            <tag> 远程库操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习笔记(3)-git的常用指令(2)</title>
      <link href="/2022/07/18/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A42/"/>
      <url>/2022/07/18/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A42/</url>
      
        <content type="html"><![CDATA[<h1 id="git的分支操作"><a href="#git的分支操作" class="headerlink" title="git的分支操作"></a><strong>git</strong>的分支操作</h1><ul><li><h2 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a><strong>什么是分支</strong></h2><ul><li>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）<br> <img src="/../upload/git/git-command2/1.png" alt="image"></li><li>Hot-fix(热修),表示紧急处理当前的分支,feature表示分支版本的新增功能,后续可以与主分支合并成为新的版本。</li></ul><h2 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a><strong>分支的好处</strong></h2><ul><li>同时并行推进多个功能开发，提高开发效率。</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</li></ul></li><li><h2 id="分支常用指令"><a href="#分支常用指令" class="headerlink" title="分支常用指令"></a><strong>分支常用指令</strong></h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch 分支名           创建分支</span><br><span class="line">git branch -v               查看分支</span><br><span class="line">git checkout 分支名         切换分支</span><br><span class="line">git merge 分支名            把指定的分支合并到当前分支上</span><br></pre></td></tr></table></figure></li><li><h3 id="1-查看分支-实操"><a href="#1-查看分支-实操" class="headerlink" title="1.查看分支(实操)"></a>1.查看分支(实操)</h3><ul><li><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -v </span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例"><a href="#实操案例" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command2/2.png" alt="image"></li></ul></li><li><h3 id="2-创建分支-实操"><a href="#2-创建分支-实操" class="headerlink" title="2.创建分支(实操)"></a>2.创建分支(实操)</h3><ul><li><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch 分支名 </span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例-1"><a href="#实操案例-1" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command2/3.png" alt="image"></li></ul></li><li><h3 id="3-修改分支-实操"><a href="#3-修改分支-实操" class="headerlink" title="3.修改分支(实操)"></a>3.修改分支(实操)</h3><ul><li><h4 id="实操案例-2"><a href="#实操案例-2" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command2/4.png" alt="image"><br><img src="/../upload/git/git-command2/5.png" alt="image"></li></ul></li><li><h3 id="4-切换分支-实操"><a href="#4-切换分支-实操" class="headerlink" title="4.切换分支(实操)"></a>4.切换分支(实操)</h3><ul><li><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例-3"><a href="#实操案例-3" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command2/6.png" alt="image"><br><img src="/../upload/git/git-command2/7.png" alt="image"></li></ul></li><li><h3 id="5-合并分支-实操"><a href="#5-合并分支-实操" class="headerlink" title="5.合并分支(实操)"></a>5.合并分支(实操)</h3><ul><li><h3 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例-4"><a href="#实操案例-4" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command2/8.png" alt="image"></li><li><h2 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a><strong>分支冲突</strong></h2><ul><li><h3 id="冲突产生的表现：后面状态为-MERGING-合并中"><a href="#冲突产生的表现：后面状态为-MERGING-合并中" class="headerlink" title="冲突产生的表现：后面状态为 MERGING(合并中)"></a><strong>冲突产生的表现：后面状态为 MERGING(合并中)</strong></h3>  <img src="/../upload/git/git-command2/9.png" alt="image"><br>  <img src="/../upload/git/git-command2/10.png" alt="image"></li><li><h3 id="冲突产生的原因："><a href="#冲突产生的原因：" class="headerlink" title="冲突产生的原因："></a><strong>冲突产生的原因：</strong></h3><ul><li>合并分支时，两个分支在<strong>同一个文件的同一个位置</strong>有两套完全不同的修改。Git 无法替我们决定使用哪一个。必须<strong>人为决定</strong>新代码内容。</li><li><strong>查看状态（检测到有文件有两处修改）</strong><br>  <img src="/../upload/git/git-command2/11.png" alt="image"></li></ul></li><li><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a><strong>解决冲突</strong></h3><ul><li><h3 id="1）编辑有冲突的文件，删除特殊符号，决定要使用的内容"><a href="#1）编辑有冲突的文件，删除特殊符号，决定要使用的内容" class="headerlink" title="1）编辑有冲突的文件，删除特殊符号，决定要使用的内容"></a>1）编辑有冲突的文件，删除特殊符号，决定要使用的内容</h3>  <strong>特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 当前分支的代码 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;合并过来的代码 &gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</strong><br>  <img src="/../upload/git/git-command2/12.png" alt="image"><br>  <img src="/../upload/git/git-command2/13.png" alt="image"></li><li><h3 id="2）添加到暂存区"><a href="#2）添加到暂存区" class="headerlink" title="2）添加到暂存区"></a>2）添加到暂存区</h3>  <img src="/../upload/git/git-command2/14.png" alt="image"></li><li><h3 id="3）执行提交（注意：此时使用-git-commit-命令时不能带文件名后缀名）"><a href="#3）执行提交（注意：此时使用-git-commit-命令时不能带文件名后缀名）" class="headerlink" title="3）执行提交（注意：此时使用 git commit 命令时不能带文件名后缀名）"></a>3）执行提交（注意：此时使用 git commit 命令时不能带文件名后缀名）</h3>  <img src="/../upload/git/git-command2/15.png" alt="image"></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
            <tag> git的常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习笔记(2)-git的常用指令</title>
      <link href="/2022/07/17/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/07/17/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a><strong>git</strong>常用指令</h1><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name 用户名(自定义)       设置用户签名</span><br><span class="line">git config --global user.email 邮箱(可以是虚拟的)  设置用户签名</span><br><span class="line">git init                                          初始化本地库</span><br><span class="line">git status                                        查看本地库状态</span><br><span class="line">git add 文件名                                     添加到暂存区</span><br><span class="line">git rm --cached 文件名                            将指定文件从暂存区中删除,但保留工作区的文件</span><br><span class="line">git commit -m &quot;日志信息&quot; 文件名                    提交到本地库</span><br><span class="line">git reflog(也可简写为git log)                      查看历史记录</span><br><span class="line">git reset --hard 版本号                            版本穿梭</span><br></pre></td></tr></table></figure></code></pre><h2 id="1-设置用户签名-实操"><a href="#1-设置用户签名-实操" class="headerlink" title="1.设置用户签名(实操)"></a>1.设置用户签名(实操)</h2><ul><li><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br><span class="line">git config --global user.email 邮箱</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例"><a href="#实操案例" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/1.png" alt="image"></li><li><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a><strong>说明</strong></h3> 签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名，否则无法提交代码。<strong>注意:</strong> 这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系。</li></ul><h2 id="2-初始化本地库-实操"><a href="#2-初始化本地库-实操" class="headerlink" title="2.初始化本地库(实操)"></a>2.初始化本地库(实操)</h2><ul><li><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git  init </span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-1"><a href="#实操案例-1" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/2.png" alt="image"></li><li><strong>结果查看</strong><br>  <img src="/../upload/git/git-command/3.png" alt="image"></li></ul><h2 id="3-查看本地库状态"><a href="#3-查看本地库状态" class="headerlink" title="3.查看本地库状态"></a>3.查看本地库状态</h2><ul><li><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status </span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-2"><a href="#实操案例-2" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/4.png" alt="image"></li><li><h3 id="新增文件-hello-txt"><a href="#新增文件-hello-txt" class="headerlink" title="新增文件(hello.txt)"></a><strong>新增文件(hello.txt)</strong></h3>  <img src="/../upload/git/git-command/5.png" alt="image"></li><li><h3 id="再次查看-检测到未追踪的文件即文件为红色表示未添加到暂存区"><a href="#再次查看-检测到未追踪的文件即文件为红色表示未添加到暂存区" class="headerlink" title="再次查看(检测到未追踪的文件即文件为红色表示未添加到暂存区)"></a><strong>再次查看(检测到未追踪的文件即文件为红色表示未添加到暂存区)</strong></h3>  <img src="/../upload/git/git-command/6.png" alt="image"></li></ul><h2 id="4-添加暂存区"><a href="#4-添加暂存区" class="headerlink" title="4.添加暂存区"></a>4.添加暂存区</h2><ul><li><h3 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-3"><a href="#实操案例-3" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/7.png" alt="image"></li><li><h3 id="查看状态（检测到暂存区有新文件-文件变绿）"><a href="#查看状态（检测到暂存区有新文件-文件变绿）" class="headerlink" title="查看状态（检测到暂存区有新文件,文件变绿）"></a><strong>查看状态（检测到暂存区有新文件,文件变绿）</strong></h3> <img src="/../upload/git/git-command/8.png" alt="image"></li></ul><h2 id="5-提交本地库-将暂存区的文件提交到本地库"><a href="#5-提交本地库-将暂存区的文件提交到本地库" class="headerlink" title="5.提交本地库(将暂存区的文件提交到本地库)"></a>5.提交本地库(将暂存区的文件提交到本地库)</h2><ul><li><h3 id="基本语法-4"><a href="#基本语法-4" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;日志信息&quot; 文件名</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-4"><a href="#实操案例-4" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/9.png" alt="image"></li><li><h3 id="查看状态（没有文件需要提交）"><a href="#查看状态（没有文件需要提交）" class="headerlink" title="查看状态（没有文件需要提交）"></a><strong>查看状态（没有文件需要提交）</strong></h3> <img src="/../upload/git/git-command/10.png" alt="image"></li></ul><h2 id="6修改文件（hello-txt）"><a href="#6修改文件（hello-txt）" class="headerlink" title="6修改文件（hello.txt）"></a>6修改文件（hello.txt）</h2><ul><li><h3 id="基本语法-5"><a href="#基本语法-5" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim 文件名</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-5"><a href="#实操案例-5" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/11.png" alt="image"></li><li><h3 id="查看状态（检测到工作区有文件被修改）"><a href="#查看状态（检测到工作区有文件被修改）" class="headerlink" title="查看状态（检测到工作区有文件被修改）"></a><strong>查看状态（检测到工作区有文件被修改）</strong></h3> <img src="/../upload/git/git-command/12.png" alt="image"></li><li><h3 id="将修改的文件再次添加暂存区）"><a href="#将修改的文件再次添加暂存区）" class="headerlink" title="将修改的文件再次添加暂存区）"></a><strong>将修改的文件再次添加暂存区）</strong></h3> <img src="/../upload/git/git-command/13.png" alt="image"></li><li><h3 id="查看状态（工作区的修改添加到了暂存区）"><a href="#查看状态（工作区的修改添加到了暂存区）" class="headerlink" title="查看状态（工作区的修改添加到了暂存区）"></a><strong>查看状态（工作区的修改添加到了暂存区）</strong></h3> <img src="/../upload/git/git-command/14.png" alt="image"></li></ul><h2 id="7-查看历史版本"><a href="#7-查看历史版本" class="headerlink" title="7.查看历史版本"></a>7.查看历史版本</h2><ul><li><h3 id="基本语法-6"><a href="#基本语法-6" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog查看版本信息</span><br><span class="line">git log查看版本详细信息</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-6"><a href="#实操案例-6" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/15.png" alt="image"></li></ul><h2 id="8-版本穿梭"><a href="#8-版本穿梭" class="headerlink" title="8.版本穿梭"></a>8.版本穿梭</h2><ul><li><h3 id="基本语法-7"><a href="#基本语法-7" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-7"><a href="#实操案例-7" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/16.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
            <tag> git的常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的学习笔记(1)</title>
      <link href="/2022/07/17/git%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/17/git%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="git的学习笔记（1）"><a href="#git的学习笔记（1）" class="headerlink" title="git的学习笔记（1）"></a><strong>git</strong>的学习笔记（1）</h1><h2 id="1-什么是git？"><a href="#1-什么是git？" class="headerlink" title="1.什么是git？"></a>1.什么是<strong>git</strong>？</h2><ul><li><strong>Git</strong>是一个免费的、开源的<strong>分布式版本控制系统</strong>，可以快速高效地处理从小型到大型的各种项目。</li><li><strong>Git</strong>易于学习，占地面积小，性能极快。 它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。</li></ul><h2 id="2-什么是版本控制工具-集中式和分布式"><a href="#2-什么是版本控制工具-集中式和分布式" class="headerlink" title="2.什么是版本控制工具(集中式和分布式)"></a>2.什么是版本控制工具(集中式和分布式)</h2><ul><li>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。</li><li>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本， 方便版本切换。</li></ul><h4 id="1-集中式版本控制工具"><a href="#1-集中式版本控制工具" class="headerlink" title="1)集中式版本控制工具"></a>1)集中式版本控制工具</h4><ul><li><strong>集中化的版本控制系统</strong>诸如 CVS、SVN 等，<strong>都有一个单一的集中管理的服务器</strong>，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。</li><li>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。</li><li>事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。<br> <img src="/../upload/git/1.png" alt="image"></li></ul><h4 id="2-分布式版本控制工具"><a href="#2-分布式版本控制工具" class="headerlink" title="2)分布式版本控制工具"></a>2)分布式版本控制工具</h4><ul><li>像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。</li></ul><h5 id="分布式的版本控制系统出现之后-解决了集中式版本控制系统的缺陷"><a href="#分布式的版本控制系统出现之后-解决了集中式版本控制系统的缺陷" class="headerlink" title="分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:"></a><strong>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:</strong></h5><ul><li>(1).服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</li><li>(2).每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）<br> <img src="/../upload/git/2.png" alt="image"></li></ul><h2 id="3-工作机制"><a href="#3-工作机制" class="headerlink" title="3.工作机制"></a>3.工作机制</h2><h4 id="Git的分区包括工作区、暂存区、本地仓库（本地版本库）、远程仓库（远程版本库）。"><a href="#Git的分区包括工作区、暂存区、本地仓库（本地版本库）、远程仓库（远程版本库）。" class="headerlink" title="Git的分区包括工作区、暂存区、本地仓库（本地版本库）、远程仓库（远程版本库）。"></a>Git的分区包括工作区、暂存区、本地仓库（本地版本库）、远程仓库（远程版本库）。</h4><ul><li>1.<strong>工作区:</strong> 所谓工作区就是写代码的地方但并非开发工具（开发平台）代码存放的磁盘的目录的位置</li><li>2.<strong>暂存区:</strong> 工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。工作区写好的代码需要让git追踪到，因此你需要将工作区的代码添加（git add）到暂存区,暂存区的代码是临时存储(没有生成历史版本),即暂存区和工作区的代码均可以被删除</li><li>3.<strong>本地库:</strong> 将暂存区的代码提交(git commit)到本地库就会生成对应的历史版本,即不可能删除掉了,除非你将整个本地库删除</li><li>4.<strong>远程库:</strong> 将本地库的代码推送(push)到远程库(github),可用于远程恢复代码,当我们的电脑磁盘损坏亦或者新版本代码错误过多时可以通过远程库进行版本的回退以及代码的回滚<ul><li><strong>远程库</strong>又称<strong>代码托管中心</strong>，是基于网络服务器的远程代码仓库<ul><li><strong>GitLab</strong>(基于局域网的代码托管中心)</li><li><strong>GitHub</strong>（外网）</li><li><strong>Gitee</strong> 码云（国内网站，相当于国内的github）<br><img src="/../upload/git/4.png" alt="image"></li></ul></li></ul></li></ul><h4 id="具体实现流程"><a href="#具体实现流程" class="headerlink" title="具体实现流程"></a>具体实现流程</h4><ul><li>假如要实现上传代码功能，工作区使用add添加文件到暂存区，暂存区再通过commit提交版本给本地仓库，最后本地仓库使用push将版本推送到远程仓库；</li><li>工作区修改的文件可以通过checkout命令从本地仓库或暂存区恢复；如果要将工作区某分支的代码更新为远程仓库最新版本，可以使用pull命令；</li><li>对远程仓库使用clone可以将远程仓库主分支拷贝到本地仓库，fetch命令与pull类似，只是pull会合并本地代码，而fetch只会把最新版本抓取到本地版本库，不考虑本地仓库是否有新增。</li></ul><blockquote><p>这篇博客主要引用了作者为”<strong>尚硅谷</strong>“的文章，是博主在学习尚硅谷的<strong>git</strong>教程做的一些笔记<br>这篇博客另外引用了作者为”<strong>luffylv</strong>“和”<strong>长期闲置</strong>“的文章<br>原文链接为:<a href="https://www.bilibili.com/video/BV1vy4y1s7k6?p=1&vd_source=eeca4958b140403ede65df6022e4b306">BiliBili</a>、<a href="https://blog.csdn.net/m0_47503416/article/details/110100690">CSDN</a>、<a href="https://www.php.cn/tool/git/490641.html">PHP中文网</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改butterfly2</title>
      <link href="/2022/07/16/%E9%AD%94%E6%94%B9butterfly2/"/>
      <url>/2022/07/16/%E9%AD%94%E6%94%B9butterfly2/</url>
      
        <content type="html"><![CDATA[<h1 id="魔改butterfly主题2-插入自定义样式"><a href="#魔改butterfly主题2-插入自定义样式" class="headerlink" title="魔改butterfly主题2-插入自定义样式"></a>魔改butterfly主题2-插入自定义样式</h1><p><strong>在原来的butterfly主题上插入自己喜欢的样式获证更改原来的样式</strong></p><ul><li>Hexo主题给我们预备了一个自定义接口，路径在主题目录下的_config.yml里面你的Inject中，具体如下：<br><img src="/../upload/mogai2/1.png" alt="image"></li><li>我们只需要在主题目录下先建一个样式文件夹，在里面新建一个样式表（css文件）用于存放我们的自定义样式即可：<br><img src="/../upload/mogai2/2.png" alt="image"></li><li>这的Mycss里面的style.css就是我新建的样式表，随后我们在head里面的link标签中引入对应的路径即可，然后我们通过浏览器，动态捕获对应的标签类名，id名即可对对应的样式进行更改自定义：<br><img src="/../upload/mogai2/3.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改butterfly1</title>
      <link href="/2022/07/16/%E9%AD%94%E6%94%B9butterfly1/"/>
      <url>/2022/07/16/%E9%AD%94%E6%94%B9butterfly1/</url>
      
        <content type="html"><![CDATA[<h1 id="魔改butterfly主题1-gallery图库"><a href="#魔改butterfly主题1-gallery图库" class="headerlink" title="魔改butterfly主题1-gallery图库"></a>魔改butterfly主题1-gallery图库</h1><p><strong>将原来的gallery图库魔改成自己喜欢功能的页面跳转（这里我将gallery图库改成了一个小游戏中心）</strong></p><ul><li><h2 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h2><ul><li><p>1、首先导入gallery图库:在主题目录下的_config.yml中的menu菜单中新建导航栏小游戏<br>  <img src="/../upload/mogai1/1.png" alt="image"></p></li><li><p>2、然后调用hexo指令(hexo new page 页面名字(这里是game))新建一个页面用于存放图库,然后在这个新页面中添加小游戏的&#x2F;game&#x2F;类型用于绑定页面<br>  <img src="/../upload/mogai1/2.png" alt="image"></p></li><li><p>3、随后就是固定搭配,将代码复制进入有也页面的md文件中即可,就像上图一样,代码格式如下:</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 1).name：图框上面的名字 2. description：图库描述  --&gt;</span><br><span class="line">&lt;!-- 3).link：连接到对应相册的地址  --&gt;</span><br><span class="line">&lt;!-- 4).img-url：图库封面的地址 --&gt;</span><br></pre></td></tr></table></figure><p>  <strong>完成后如下图所示:</strong><br>  <img src="/../upload/mogai1/3.png" alt="image"></p></li><li><p><strong>关键步骤:</strong></p><ul><li><p>1)点击跳转的实现:这里需要魔改源代码,Hexo好像内置了插件，默认 不同源才会新的链接打开。如果想以新链接形式打开，需要改下源码，找到 【node_modules\hexo-theme-butterfly\scripts\tag\gallery.js】，代码大概在27行左右，将 &lt; a href&#x3D;’ ‘&gt;&lt;&#x2F; a&gt; 改成 &lt; a href&#x3D;’${url}’ target&#x3D;”_blank”&gt;&lt;&#x2F; a&gt; ,这样点击相册就会跳转到一个新页面。</p></li><li><p>2)解决渲染问题，要想跳转的新页面没有主题嵌入的问题（主题嵌入：跳转新页面成功了，但是还是有原来的样式，就是你博客的原样式存在，并没有我小游戏的样式存在，就相当于点击跳转新页面（回到你新的博客页面），然后游戏嵌在了博客页面里面）图如下：<br>  <img src="/../upload/mogai1/4.png" alt="image"></p></li><li><p>3)解决方法：设置指向的页面跳过渲染即可（这里是游戏页面）<br>  具体实施步骤：<br>  找到根目录下的_config.yml里面的skip_render，像下面一样跳过渲染指定的文件夹即可。<br>  <img src="/../upload/mogai1/5.png" alt="image"><br>  然后再在git bash里面一键三连，记住一定要先执行清除命令：hexo cl</p><p>  <strong>Hexo的原文档如下：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skip_render: &quot;mypage/**/*&quot;</span><br><span class="line"># 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 &#x27;public&#x27; 目录</span><br><span class="line"># 你也可以用这种方法来跳过对指定文章文件的渲染</span><br><span class="line">skip_render: &quot;_posts/test-post.md&quot;</span><br><span class="line"># 这将会忽略对 &#x27;test-post.md&#x27; 的渲染</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用指令</title>
      <link href="/2022/07/13/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/07/13/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo常用指令介绍"><a href="#hexo常用指令介绍" class="headerlink" title="hexo常用指令介绍"></a>hexo常用指令介绍</h1><ul><li><strong>$ hexo clean</strong> (清空)<ul><li>清除缓存文件 db.json 和已生成的静态文件 public 。</li><li>网站显示异常时可以执行这条命令试试。</li></ul></li><li><strong>$ hexo g</strong> (重新生成)<ul><li><p>生成网站静态文件到默认设置的 public 文件夹。</p></li><li><p>便于查看网站生成的静态文件或者手动部署网站；</p></li><li><p>如果使用自动部署，不需要先执行该命令；<br>  hexo g 是 hexo generate 的缩写，命令效果一致</p></li></ul></li><li><strong>$ hexo s</strong> (重新启动)<ul><li>启动本地服务器，用于预览主题。<br>   -hexo s 是 hexo server 的缩写，命令效果一致；</li><li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li><li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果</li></ul></li><li><strong>$ hexo d</strong> (重新部署到仓库)<ul><li>自动生成网站静态文件，并部署到设定的仓库。</li><li>hexo d 是 hexo deploy 的缩写，命令效果一致</li></ul></li><li><strong>$ hexo new “文章标题”</strong>(新建文章)<ul><li>文章标题也可以在对应的md文件中修改</li></ul></li><li><strong>$ hexo new page 网页名</strong><ul><li>例：hexo new page welcome</li><li>新建一个标题名为welcome的页面，默认连接地址：主页地址&#x2F;welcome&#x2F;</li><li>此页面不会出现在首页文章列表和归档中，也不支持设置分类和标签</li></ul></li></ul><h2 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h2><ul><li>一般会打开博客所在文件夹内右键 Git Bash Here，然后再命令行一键三连： <figure class="highlight plaintext"><figcaption><span>Command(代码指令)</span></figcaption><table><tr><td class="code"><pre><span class="line">$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li><li>然后我么就可以打开浏览器输入主机地址:localhost:4000&#x2F;，查看自己更新的博客了！</li><li>不过这只是在本地进行了更新，要想部署到网上（Github上），还要输入如下指令： <figure class="highlight plaintext"><figcaption><span>Command(代码指令)</span></figcaption><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li>这样就能自动生成网站静态文件，并部署到我们设定的github仓库上了,别人访问我们的网站也能看到我们更新的内容了。</li></ul><blockquote><p>这篇博客引用了作者为”<strong>到现在负</strong>“的文章<br>原文链接为:<a href="https://blog.csdn.net/dxxzst/article/details/76135935">CSDN</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello！欢迎来到我的仓库！</title>
      <link href="/2022/07/13/Hello-Blog/"/>
      <url>/2022/07/13/Hello-Blog/</url>
      
        <content type="html"><![CDATA[<p>这是我的第一篇博客，用来记录这个博客网站的诞生！<br>后续我将会在这个博客中记录自己的前端学习历程！</p><ul><li><ul><li><ul><li>该博客诞生于2022年7月13日</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博主个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
