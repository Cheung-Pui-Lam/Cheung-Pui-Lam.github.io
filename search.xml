<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nodejs学习笔记(19)-websocket学习(3)-结合ws模块结合jwt模块和数据库做的一个小demo</title>
      <link href="/2022/11/08/nodejs%E5%AD%A6%E4%B9%A0%E5%81%9A%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8Fdemo/"/>
      <url>/2022/11/08/nodejs%E5%AD%A6%E4%B9%A0%E5%81%9A%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8Fdemo/</url>
      
        <content type="html"><![CDATA[<h1 id="多人在线聊天系统"><a href="#多人在线聊天系统" class="headerlink" title="多人在线聊天系统"></a>多人在线聊天系统</h1><h2 id="实现需求"><a href="#实现需求" class="headerlink" title="实现需求:"></a>实现需求:</h2><h3 id="登录鉴权-jwt模块"><a href="#登录鉴权-jwt模块" class="headerlink" title="登录鉴权(jwt模块)"></a><strong>登录鉴权(<code>jwt模块</code>)</strong></h3><ul><li><strong>实现登陆界面的跳转到聊天页面的同时保存通过<code>jwt模块</code>生成的<code>token</code>保存到本地浏览器中(<code>localStorage</code>),当我们通过更改浏览器的<code>url</code>再次访问聊天界面的时候能够顺利进入</strong></li><li><strong>当我们删除浏览器本地存储(<code>localStorage</code>)的<code>token</code>时,此时在次通过修改浏览器<code>url</code>的方式进入是失败的,需要重新登陆生成新的<code>token</code></strong></li></ul><h3 id="数据库操作用户-mysql2模块"><a href="#数据库操作用户-mysql2模块" class="headerlink" title="数据库操作用户(mysql2模块)"></a>数据库操作用户(<code>mysql2模块</code>)</h3><ul><li><strong>通过数据库中存储的数据来进行用户身份的第一层识别以及<code>token</code>的生成</strong></li></ul><h3 id="群聊模式-ws模块"><a href="#群聊模式-ws模块" class="headerlink" title="群聊模式(ws模块)"></a>群聊模式(<code>ws模块</code>)</h3><ul><li><strong>在聊天页面上能够实现群聊与私聊的区分,群聊即所有在线的用户都能看到,私聊则只有接收方才能看到,其他人是看不到的</strong></li></ul><h3 id="私聊模式-ws模块"><a href="#私聊模式-ws模块" class="headerlink" title="私聊模式(ws模块)"></a>私聊模式(<code>ws</code>模块)</h3><ul><li><strong>在聊天页面上能够实现群聊与私聊的区分,群聊即所有在线的用户都能看到,私聊则只有接收方才能看到,其他人是看不到的</strong></li></ul><h2 id="用到的技术栈"><a href="#用到的技术栈" class="headerlink" title="用到的技术栈"></a>用到的技术栈</h2><ul><li><strong><code>node.js</code></strong></li><li><strong><code>express框架</code>(快速搭建服务器)</strong></li><li><strong><code>axios</code>(使用到里面的请求拦截器和响应拦截器以及<code>ajax</code>请求发送)</strong><ul><li><strong><code>请求拦截器</code>:用于登录鉴权,当我们进入聊天界面的时候,首先会通过请求拦截器来将本地的<code>token</code>与登录<code>post</code>请求中请求头(<code>Authorization</code>)中的<code>token</code>进行比对,如果是一致就能进入页面</strong></li><li><strong><code>响应拦截器</code>: 一方面用于首次登录后在想赢回来之前将服务器生成的<code>token</code>存储到本地浏览器中(<code>localStorage</code>)中,另一方面则用于登录鉴权,当我们本地的<code>token</code>失效时,服务器会返回状态码500(<code>error.response.status === 500</code>),此时<code>响应拦截器</code>就会进行判断,如果<code>token</code>过期,就会清除掉本地的<code>token</code>并将页面能转回登录页</strong></li></ul></li><li><strong><code>mysql2</code>模块: 操作数据库</strong></li><li><strong><code>ws</code>模块: 实现消息的实时收发</strong></li></ul><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h3><ul><li><strong>登录模块的设计: 前端页面使用<code>axios</code>向服务端发送<code>post</code>请求,将用户名和密码放在请求体中,这样相较于使用<code>get</code>请求更为安全,并且在前端页面设置<code>相响应拦截器</code>使得后端生成的<code>token</code>能够在响应页面跳转之前,将<code>token</code>存储到浏览器的本地中(<code>localStorage</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前端页面***********************************************************************</span></span><br><span class="line"><span class="comment">//响应拦截器(做token的保存),(请求成功后,数据回来之前调用的方法)</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 存储token</span></span><br><span class="line">    <span class="keyword">const</span> &#123;authorization&#125; = response.<span class="property">headers</span><span class="comment">//将token结构出来</span></span><br><span class="line">    <span class="keyword">if</span>(authorization)&#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>,authorization)<span class="comment">//将token存储到浏览器本地存储中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登陆事件(点击发送post请求)</span></span><br><span class="line">login.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">value</span>,password.<span class="property">value</span>)</span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>,&#123;<span class="comment">//设置响应体内容</span></span><br><span class="line">            <span class="attr">username</span>:username.<span class="property">value</span>,</span><br><span class="line">            <span class="attr">password</span>:password.<span class="property">value</span>,</span><br><span class="line">            <span class="title class_">Authorization</span>:<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)<span class="comment">//将token发送过去</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">            <span class="comment">// 判断返回的状态码status</span></span><br><span class="line">            <span class="keyword">if</span>(!res.<span class="property">data</span>.<span class="property">status</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;登陆失败!账号或者密码错误!!&#x27;</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;登陆成功!&#x27;</span>)</span><br><span class="line">                location.<span class="property">href</span> = <span class="string">&#x27;./chat.html&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//****************************************************************************</span></span><br></pre></td></tr></table></figure><ul><li><strong>后端的登录接口接受到前端的<code>ajax</code>请求随后通过<code>mysql21</code>模块来向数据库查询是否存在该数据,查询存在则将数据库中的该条数据里面的用户名(<code>username</code>)加密成<code>token</code>通过<code>res.header</code>添加到响应头中的<code>Authorization</code>字段(默认规矩)返回给前端页面,等待<code>响应拦截器</code>拦截后保存在浏览器的<code>localStroage</code>中。</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端接口*******************************************************************</span></span><br><span class="line"><span class="comment">// 登录接口(获取登陆信息)</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> (req , res)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 查看数据库内的信息是否存在该用户</span></span><br><span class="line">    <span class="keyword">var</span> admin = <span class="keyword">await</span> promisePool.<span class="title function_">query</span>(</span><br><span class="line">        <span class="string">&#x27;select * from admin where username=? and password=?&#x27;</span>,</span><br><span class="line">        [req.<span class="property">body</span>.<span class="property">username</span>,req.<span class="property">body</span>.<span class="property">password</span>])</span><br><span class="line">    <span class="comment">// 判断数据库中是否存在该用户(数据库返回的数据的长度)</span></span><br><span class="line">    <span class="keyword">if</span>(!admin[<span class="number">0</span>].<span class="property">length</span>)&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>:<span class="number">0</span>,<span class="comment">//登陆状态</span></span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;该用户不存在,请重新输入账号密码&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(admin[<span class="number">0</span>][<span class="number">0</span>].<span class="property">username</span>);</span><br><span class="line">        <span class="comment">// 登陆成功生成token</span></span><br><span class="line">        <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(</span><br><span class="line">            &#123;<span class="attr">data</span>:admin[<span class="number">0</span>][<span class="number">0</span>].<span class="property">username</span>&#125;,<span class="comment">//将用户名加密成token</span></span><br><span class="line">            <span class="string">&#x27;lam&#x27;</span>,<span class="comment">// 加密密钥为 lam</span></span><br><span class="line">            &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;30h&#x27;</span>&#125; <span class="comment">// token生效时间为30小时</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将生成好的token保存到res.header中返回给前端浏览器</span></span><br><span class="line">        <span class="comment">//固定写为Authorization(后面校验也是用这个请求头)</span></span><br><span class="line">        res.<span class="title function_">header</span>(<span class="string">&#x27;Authorization&#x27;</span> , token)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送登陆状态</span></span><br><span class="line">        res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>:<span class="number">1</span>,<span class="comment">//登陆状态为1</span></span><br><span class="line">            <span class="attr">data</span>: admin[<span class="number">0</span>],<span class="comment">//用户数据</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//**************************************************************************</span></span><br></pre></td></tr></table></figure><ul><li><strong>用户登陆成功过后会跳转到聊天室界面,这时在这个界面设置<code>请求拦截器</code>和<code>响应拦截器</code>,<code>请求拦截器</code>的作用是用于登录鉴权的,为了加强这一方面的知识以及应用,我在这个聊天页面一挂载的时候,就开始向服务端的<code>/userinfo</code>接口请求数据(当前登录[本地<code>token</code>存储]的用户名),这时会在<code>请求拦截器</code>中做鉴权操作,发请求时将本地的<code>token</code>通过请求头(<code>Authorization</code>)字段携带过去,在对应的接口当中做鉴权,后端接收到这个<code>token</code>进行解密,如果能够解密出来,就证明这个<code>token</code>没有失效,随后返回这个用户的信息即可(<code>其实返回的就是用户名</code>),验证失败的话就返回状态码为<code>500</code>即可,随后前端页面通过接收到的数据进行判断</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端接口******************************************************************</span></span><br><span class="line"><span class="comment">// 获取用户信息接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/userinfo&#x27;</span> , <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;111&#x27;+req.headers.authorization);</span></span><br><span class="line">    <span class="comment">// 验证token</span></span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">headers</span>.<span class="property">authorization</span></span><br><span class="line">    <span class="keyword">const</span> payload = jwt.<span class="title function_">verify</span>(token,<span class="string">&#x27;lam&#x27;</span>)<span class="comment">//解密token</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(payload.<span class="property">data</span>);</span><br><span class="line">    <span class="keyword">if</span>(payload)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;确认token&#x27;</span>);</span><br><span class="line">        <span class="comment">// 确认token后返回用户名(我的token中加密的就是用户名)</span></span><br><span class="line">        res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">username</span>: payload.<span class="property">data</span>,<span class="comment">//用户名</span></span><br><span class="line">            <span class="attr">status</span>: <span class="number">1</span><span class="comment">//登录状态码设置为1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 验证失败的话返回页面状态码500</span></span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//***************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前端页面的拦截器*************************************************************</span></span><br><span class="line"><span class="comment">// 使用axios拦截器来实现token验证</span></span><br><span class="line"><span class="comment">// 请求拦截器(请求发出前执行的方法)</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 发送请求之前先验证本地的token是否过期或者合法</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)<span class="comment">//取出token</span></span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span><span class="comment">//将token通过请求拦截器发送回服务器进行验证</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器(请求成功后,数据回来之前调用的方法)</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错了!&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">500</span>)&#123;<span class="comment">//token过期返回500状态码</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;登录过期! 请重新登录...&#x27;</span>)</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>)<span class="comment">//清除token</span></span><br><span class="line">        location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span><span class="comment">//返回登录页面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//***************************************************************************</span></span><br></pre></td></tr></table></figure><h3 id="聊天模块"><a href="#聊天模块" class="headerlink" title="聊天模块"></a>聊天模块</h3><ul><li><strong>我们知道,<code>ws</code>模块提供一个<code>wss.on(&#39;connection&#39;,function)</code>的<code>API</code>实现聊天模块的所有功能基本都是基于这个<code>API</code>来实现的。</strong></li><li><strong>首先是获取当前来接这台<code>wss</code>服务器的客户端有多少,也就是要知道当前有<code>多少个用户在线</code>, <code>wss.on(&#39;connection&#39;,function)</code>这个<code>api</code>表示只要当前有新的<code>客户端</code>练到这台<code>wss服务器</code>上就会走里面的回调函数,并且<code>ws</code>模块的强大之处不仅如此,它还提供了<code>.clients</code>这个接口,里面存放着当前连接这台<code>wss服务器</code>的所有客户端的信息(也就是用户信息),因此我们可以通过遍历来将当前所有在线的人的信息发送给验证<code>token</code>成功登录到聊天室页面的用户,一旦有用户断开连接(<code>token失效或者关闭服务器</code>),再次发送当前所有在线用户信息(使用<code>ws.on(&#39;close&#39;,function)</code>来监听断开连接的用户)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端************************************************************************</span></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> <span class="title function_">connection</span>(<span class="params">ws,req</span>) &#123;<span class="comment">//监听连接事件</span></span><br><span class="line">    <span class="comment">// 通过new url对象来获取这个url身上所携带的参数</span></span><br><span class="line">    <span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span> , <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myURL.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>));<span class="comment">//输出token</span></span><br><span class="line">    <span class="comment">// 校验token</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 解密成功(token生效)</span></span><br><span class="line">        <span class="keyword">const</span> payload = jwt.<span class="title function_">verify</span>(myURL.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>),<span class="string">&#x27;lam&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(payload)&#123;</span><br><span class="line">            ws.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(</span><br><span class="line">                <span class="title class_">WebSocketType</span>.<span class="property">GroupChat</span>,</span><br><span class="line">                <span class="string">&#x27;广播&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;欢迎来到聊天室!&#x27;</span></span><br><span class="line">            ))</span><br><span class="line">            <span class="comment">//将解密后的信息存放到ws模块当中后续方便前端页面获取用户列表和群聊私聊功能的实现</span></span><br><span class="line">            ws.<span class="property">user</span> = payload</span><br><span class="line">            <span class="comment">// 并且我们希望在每一个用户连接成功后得到提醒当前的在线人数(包括自己)</span></span><br><span class="line">            <span class="comment">// 封装一个群发函数</span></span><br><span class="line">            <span class="title function_">sendAll</span>()<span class="comment">//用户一旦token验证成功立刻返回当前在线用户的数据</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span>(err) &#123;<span class="comment">//解密失败verify方法报错</span></span><br><span class="line">        <span class="comment">// 捕获错误信息防止程序崩溃</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`错误信息<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一但有客户端断联服务器(退出浏览器,token失效)就回走这个回调</span></span><br><span class="line">    ws.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ws.<span class="property">user</span>);</span><br><span class="line">        <span class="comment">// 直接删除set里面对应的用户即可(clients是set类型数据存放的当前在线的用户信息)</span></span><br><span class="line">        wss.<span class="property">clients</span>.<span class="title function_">delete</span>(ws.<span class="property">user</span>)</span><br><span class="line">        <span class="comment">// 随后重新给每一个客户端发送一次在新用户列表即可</span></span><br><span class="line">        <span class="title function_">sendAll</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取在线用户人数函数(一旦有新用户上线,就向所有的用户重新发送在线人数列表)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendAll</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 表示一旦有客户端连接到服务器,就会向所有的客户端发送当前的在线人数(用户列表)</span></span><br><span class="line">    wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">each</span>(<span class="params">client</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断当前所有的客户端是否成功链接</span></span><br><span class="line">        <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">            client.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(</span><br><span class="line">                <span class="number">1</span>,<span class="literal">null</span>,<span class="comment">//1为获取在线用户列表</span></span><br><span class="line">                <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(wss.<span class="property">clients</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">user</span>))</span><br><span class="line">            ))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//***************************************************************************</span></span><br></pre></td></tr></table></figure><ul><li><strong>群聊功能的实现: 通过<code>ws模块</code>中的<code> ws.on(&#39;message&#39;, function(data))</code>来实现,前端页面一旦使用<code>ws.send()</code>向服务器发送信息的时候,这个<code>API</code>就会走里面的回调函数,我们将里面的<code>data</code>通过<code>JSON.parse</code>解析出来过后再通过<code>.clients</code>的遍历,再由<code>wss</code>服务器向<code>clients</code>里面存的每一个在线用户转发数据</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前端页面js******************************************************************</span></span><br><span class="line"><span class="comment">// 注册发送事件</span></span><br><span class="line">submit.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!message.<span class="property">value</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;消息不能为空!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断群发和私聊</span></span><br><span class="line">    <span class="keyword">if</span>(onlineUser.<span class="property">value</span>===<span class="string">&#x27;all&#x27;</span>)&#123;<span class="comment">//群发</span></span><br><span class="line">        <span class="comment">// 群发,消息内容为我们输入的内容(type为2,群发)</span></span><br><span class="line">        ws.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(<span class="number">2</span>,<span class="literal">null</span>,<span class="string">`[群聊]<span class="subst">$&#123;message.value&#125;</span>`</span>))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 私聊,消息内容为我们输入的内容(type为3,私聊),将选择框里面的在线用户名传过去</span></span><br><span class="line">        ws.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(<span class="number">3</span>,<span class="literal">null</span>,<span class="string">`[私聊]<span class="subst">$&#123;message.value&#125;</span>`</span>,onlineUser.<span class="property">value</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    message.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span><span class="comment">//最后清空输入框</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建消息的发送函数(什么形式(群,私聊),谁发送的,发了什么,给谁发送)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMessage</span>(<span class="params">type,user,data,to</span>)&#123;</span><br><span class="line">    <span class="comment">// 因为ws.send方法只能发送字符串形式的值,因此要用stringify来转字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        type,<span class="comment">//什么形式,群聊还是私聊</span></span><br><span class="line">        user,<span class="comment">//谁发的</span></span><br><span class="line">        data,<span class="comment">//发的内容是什么</span></span><br><span class="line">        to<span class="comment">//给谁发(私聊专属)</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后端服务器********************************************************************</span></span><br><span class="line"><span class="comment">// 简易的群聊功能(clients里面存放着当前所有链接这台websocket服务器的客户端)</span></span><br><span class="line"><span class="comment">// 对所有链接这台websocket服务器的客户端进行一个遍历</span></span><br><span class="line">wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">each</span>(<span class="params">client</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断当前所有的客户端是否成功链接</span></span><br><span class="line">    <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            将每一个客户端发过来的信息进行二进制的转换并重新转发回给每一个客户端</span></span><br><span class="line"><span class="comment">            也就是说: 每一个客户端发的消息所有的客户端都能看见(群聊功能)</span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line">        client.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(</span><br><span class="line">            <span class="number">2</span>,<span class="comment">//群发</span></span><br><span class="line">            ws.<span class="property">user</span>.<span class="property">data</span>,<span class="comment">//谁发的(用户名在连接服务器的时候存在了ws.user中)</span></span><br><span class="line">            msgObj.<span class="property">data</span><span class="comment">//前端接收过来的信息</span></span><br><span class="line">        ), &#123; <span class="attr">binary</span>: <span class="literal">false</span> &#125;);<span class="comment">//第二个参数为判断是否为二进制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//****************************************************************************</span></span><br></pre></td></tr></table></figure><ul><li><strong>私聊与群聊基本上是非常的相似不过私聊在发送信息的同时,将想要发送的对象一并传了过去,随后在服务端中与<code>.clients</code>里面存的在向用户进行对比,对比成立则证明该用户是在线的,即可进行私聊</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前端页面js******************************************************************</span></span><br><span class="line"><span class="comment">// 注册发送事件</span></span><br><span class="line">submit.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!message.<span class="property">value</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;消息不能为空!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断群发和私聊</span></span><br><span class="line">    <span class="keyword">if</span>(onlineUser.<span class="property">value</span>===<span class="string">&#x27;all&#x27;</span>)&#123;<span class="comment">//群发</span></span><br><span class="line">        <span class="comment">// 群发,消息内容为我们输入的内容(type为2,群发)</span></span><br><span class="line">        ws.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(<span class="number">2</span>,<span class="literal">null</span>,<span class="string">`[群聊]<span class="subst">$&#123;message.value&#125;</span>`</span>))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 私聊,消息内容为我们输入的内容(type为3,私聊),将选择框里面的在线用户名传过去</span></span><br><span class="line">        ws.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(<span class="number">3</span>,<span class="literal">null</span>,<span class="string">`[私聊]<span class="subst">$&#123;message.value&#125;</span>`</span>,onlineUser.<span class="property">value</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    message.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span><span class="comment">//最后清空输入框</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建消息的发送函数(什么形式(群,私聊),谁发送的,发了什么,给谁发送)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMessage</span>(<span class="params">type,user,data,to</span>)&#123;</span><br><span class="line">    <span class="comment">// 因为ws.send方法只能发送字符串形式的值,因此要用stringify来转字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        type,<span class="comment">//什么形式,群聊还是私聊</span></span><br><span class="line">        user,<span class="comment">//谁发的</span></span><br><span class="line">        data,<span class="comment">//发的内容是什么</span></span><br><span class="line">        to<span class="comment">//给谁发(私聊专属)</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后端服务器*******************************************************************</span></span><br><span class="line"><span class="comment">// 简易的私聊功能(clients里面存放着当前所有链接这台websocket服务器的客户端)</span></span><br><span class="line"><span class="comment">// 对所有链接这台websocket服务器的客户端进行一个遍历</span></span><br><span class="line">wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">each</span>(<span class="params">client</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断前端传过来的私聊对象是否在线且存在</span></span><br><span class="line">    <span class="keyword">if</span> (client.<span class="property">user</span>.<span class="property">data</span> === msgObj.<span class="property">to</span> &amp;&amp; </span><br><span class="line">        client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            将每一个客户端发过来的信息进行二进制的转换并重新转发回给每一个客户端</span></span><br><span class="line"><span class="comment">            也就是说: 每一个客户端发的消息所有的客户端都能看见(群聊功能)</span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line">        client.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(<span class="comment">//向目标客户端发送消息</span></span><br><span class="line">            <span class="number">3</span>,<span class="comment">//私聊</span></span><br><span class="line">            ws.<span class="property">user</span>.<span class="property">data</span>,<span class="comment">//谁发的(用户名在连接服务器的时候存在了ws.user中)</span></span><br><span class="line">            msgObj.<span class="property">data</span><span class="comment">//前端接收过来的信息</span></span><br><span class="line">        ), &#123; <span class="attr">binary</span>: <span class="literal">false</span> &#125;);<span class="comment">//第二个参数为判断是否为二进制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//****************************************************************************</span></span><br></pre></td></tr></table></figure><h2 id="完整的代码展示"><a href="#完整的代码展示" class="headerlink" title="完整的代码展示"></a>完整的代码展示</h2><ul><li><strong>前端登录页面(<code>login.html</code>)</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入axios --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 响应拦截器(请求成功后,数据回来之前调用的方法)</span></span></span><br><span class="line"><span class="language-javascript">    axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 存储token</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123;authorization&#125; = response.<span class="property">headers</span><span class="comment">//将token解构出来</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(authorization)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>,authorization)<span class="comment">//将token存储到浏览器本地存储中</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> response;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取输出的参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#username&#x27;</span>)<span class="comment">//获取输入账号dom</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> password = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#password&#x27;</span>)<span class="comment">//获取输入密码dom</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> login = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#login&#x27;</span>)<span class="comment">//获取登录按钮dom</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 登陆事件(点击发送post请求)</span></span></span><br><span class="line"><span class="language-javascript">        login.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>,&#123;<span class="comment">//设置响应体内容</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>:username.<span class="property">value</span>,<span class="comment">//输入的用户名</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">password</span>:password.<span class="property">value</span>,<span class="comment">//输入的密码</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title class_">Authorization</span>:<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)<span class="comment">//将token发送过去</span></span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 判断返回的状态码status</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(!res.<span class="property">data</span>.<span class="property">status</span>)&#123;<span class="comment">//返回为0的话</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&#x27;登陆失败!账号或者密码错误!!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&#x27;登陆成功!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                        location.<span class="property">href</span> = <span class="string">&#x27;./chat.html&#x27;</span><span class="comment">//跳转到聊天室</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>前端聊天室页面(<code>chat.html</code>)</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>聊天室(客户端)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入axios --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用axios拦截器来实现token验证</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 请求拦截器(请求发出前执行的方法)</span></span></span><br><span class="line"><span class="language-javascript">        axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送请求之前先验证本地的token是否过期或者合法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)<span class="comment">//取出token</span></span></span><br><span class="line"><span class="language-javascript">            config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span><span class="comment">//将token通过请求拦截器发送回服务器进行验证</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> config;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 响应拦截器(请求成功后,数据回来之前调用的方法)</span></span></span><br><span class="line"><span class="language-javascript">        axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> response;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错了!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">500</span>)&#123;<span class="comment">//token过期返回500状态码</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;登录过期! 请重新登录...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>)<span class="comment">//清除token</span></span></span><br><span class="line"><span class="language-javascript">                location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span><span class="comment">//返回登录页面</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.chatArea</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>聊天室(客户端)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chatArea&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;chatArea&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 发送按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 信息输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在线用户列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 退出登录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;logout&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: right;&quot;</span>&gt;</span>退出聊天室<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建授权类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="title class_">WebSocketType</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Error</span>:<span class="number">0</span>,<span class="comment">//出错了,没授权</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">GroupList</span>:<span class="number">1</span>,<span class="comment">//获取在线用户列表</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">GroupChat</span>:<span class="number">2</span>,<span class="comment">//群聊</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">SingleChat</span>:<span class="number">3</span><span class="comment">//私聊</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">User</span> = <span class="string">&#x27;&#x27;</span><span class="comment">//创建一个用户名,用于接收后端的用户名</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页面一挂载就获取用户信息(查看token)</span></span></span><br><span class="line"><span class="language-javascript">        axios.<span class="title function_">get</span>(<span class="string">&#x27;/userinfo&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!res.<span class="property">data</span>.<span class="property">status</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(res.<span class="property">data</span>.<span class="property">msg</span>)</span></span><br><span class="line"><span class="language-javascript">                location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span><span class="comment">//跳转回登录页</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">`欢迎! &quot;<span class="subst">$&#123;res.data.username&#125;</span>&quot; 进入聊天室`</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">User</span> = <span class="string">`<span class="subst">$&#123;res.data.username&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建websocket连接器并指定链接端口(固定形式)并将本地的token带过去给服务器验证</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">`ws://localhost:8080?token=<span class="subst">$&#123;<span class="variable language_">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>)&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ws模块提供的4个回调函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. onclose(服务器宕机)</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="property">onclose</span> = <span class="function">() =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器宕机了!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. onerror(客户端与服务器连接失败)</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="property">onerror</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接失败!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. onmessage(每一次服务器返回消息)</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">msgObj</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            msgObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(msgObj.<span class="property">data</span>)<span class="comment">//将发过来的消息字符串转化为消息对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 做状态判断</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">switch</span>(msgObj.<span class="property">type</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="title class_">WebSocketType</span>.<span class="property">Error</span>:<span class="comment">//token失效了(0)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>)<span class="comment">//移除本地token</span></span></span><br><span class="line"><span class="language-javascript">                    location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span><span class="comment">//跳转回login页面</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="title class_">WebSocketType</span>.<span class="property">GroupList</span>:<span class="comment">//获取当前在线用户列表(1)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 对获取到的在线用户列表进行json解析(因为服务端发过来的是json.stringfy加工的)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(msgObj.<span class="property">data</span>));</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> onlineList = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(msgObj.<span class="property">data</span>)<span class="comment">//获取当前在线的用户列表</span></span></span><br><span class="line"><span class="language-javascript">                    onlineUser.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span><span class="comment">//每次获取先清空列表,防止重复压入</span></span></span><br><span class="line"><span class="language-javascript">                    onlineUser.<span class="property">innerHTML</span> = <span class="string">`&lt;option value=&#x27;all&#x27;&gt;全部群聊&lt;/option&gt;`</span>+onlineList.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span><span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;option value=&#x27;<span class="subst">$&#123;item.data&#125;</span>&#x27;&gt;<span class="subst">$&#123;item.data&#125;</span>&lt;/option&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    `</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//将获取到的在新用户名填入到选择框中(因为我的token加密只是将用户名加密,因此这里的data就是用户名)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="title class_">WebSocketType</span>.<span class="property">GroupChat</span>:<span class="comment">//群聊功能(2)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 每一次服务器返回消息就做li标签的添加</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// console.log(`$&#123;msgObj.user&#125;说: $&#123;msgObj.data&#125;`);</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> <span class="title class_">Othernew</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)<span class="comment">//创建dom节点</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title class_">Othernew</span>.<span class="property">innerText</span> = <span class="string">`[群聊]<span class="subst">$&#123;msgObj.user&#125;</span>说: <span class="subst">$&#123;msgObj.data&#125;</span>`</span><span class="comment">//将获取回来的消息赋值给li标签</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#chatArea&#x27;</span>).<span class="title function_">appendChild</span>(<span class="title class_">Othernew</span>)<span class="comment">//将li标签添加到聊天区域中</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="title class_">WebSocketType</span>.<span class="property">SingleChat</span>:<span class="comment">//私聊功能(3)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// console.log(`$&#123;msgObj.user&#125;说: $&#123;msgObj.data&#125;`);</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 每一次服务器返回消息就做li标签的添加</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> <span class="title class_">Othernew</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)<span class="comment">//创建dom节点</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title class_">Othernew</span>.<span class="property">innerText</span> = <span class="string">`[私聊]<span class="subst">$&#123;msgObj.user&#125;</span>说: <span class="subst">$&#123;msgObj.data&#125;</span>`</span><span class="comment">//将获取回来的消息赋值给li标签</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#chatArea&#x27;</span>).<span class="title function_">appendChild</span>(<span class="title class_">Othernew</span>)<span class="comment">//将li标签添加到聊天区域中</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. onopen(客户端与服务器连接成功)</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="property">onopen</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取dom元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> message = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#message&#x27;</span>)<span class="comment">//消息的输入</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> submit = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#submit&#x27;</span>)<span class="comment">//提交按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> logout = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#logout&#x27;</span>)<span class="comment">//退出登录</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> onlineUser = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#select&#x27;</span>)<span class="comment">//用户列表</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注册发送事件</span></span></span><br><span class="line"><span class="language-javascript">        submit.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!message.<span class="property">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;消息不能为空!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 判断群发和私聊</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(onlineUser.<span class="property">value</span>===<span class="string">&#x27;all&#x27;</span>)&#123;<span class="comment">//群发</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 群发,消息内容为我们输入的内容(type为2,群发)</span></span></span><br><span class="line"><span class="language-javascript">                ws.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(<span class="number">2</span>,<span class="literal">null</span>,<span class="string">`<span class="subst">$&#123;message.value&#125;</span>`</span>))</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 私聊,消息内容为我们输入的内容(type为3,私聊),将选择框里面的在线用户名传过去</span></span></span><br><span class="line"><span class="language-javascript">                ws.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(<span class="number">3</span>,<span class="literal">null</span>,<span class="string">`<span class="subst">$&#123;message.value&#125;</span>`</span>,onlineUser.<span class="property">value</span>))</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            message.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span><span class="comment">//最后清空输入框</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 点击发送退出登录请求</span></span></span><br><span class="line"><span class="language-javascript">        logout.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 清除本地的token</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span><span class="comment">//退回登录面</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建消息的发送函数(什么形式(群,私聊),谁发送的,发了什么,给谁发送)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">createMessage</span>(<span class="params">type,user,data,to</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 因为ws.send方法只能发送字符串形式的值,因此要用stringify来转字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                type,<span class="comment">//什么形式,群聊还是私聊</span></span></span><br><span class="line"><span class="language-javascript">                user,<span class="comment">//谁发的</span></span></span><br><span class="line"><span class="language-javascript">                data,<span class="comment">//发的内容是什么</span></span></span><br><span class="line"><span class="language-javascript">                to<span class="comment">//给谁发(私聊专属)</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>后端服务器(<code>app.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 聊天室(带登录验证:jwt,数据库)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    用到的模块: express jwt ws(websocket)</span></span><br><span class="line"><span class="comment">    实现功能:用户连接数据库 使用 jwt 来实现token的登录鉴权</span></span><br><span class="line"><span class="comment">             ws(websocket)用来实现实时聊天</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="comment">// 首先引入所需的模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)<span class="comment">//express框架</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>)<span class="comment">//mysql数据库操作模块</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)<span class="comment">//jwt(token加密模块)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);<span class="comment">// 引入ws模块中的 WebSocket</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析post参数的两个内置中间件</span></span><br><span class="line"><span class="comment">// 通过express.json()这个中间件，解析表单中的JSON格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())<span class="comment">//解析post的请求题参数(json格式)</span></span><br><span class="line"><span class="comment">// 通过express.urlencoded()这个中间件，来解析表单中的url-encoded格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))<span class="comment">//解析post的请求题参数(encoded格式)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用express.static()中间件来托管静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建连接池,进行操作</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="title function_">getConfig</span>()<span class="comment">//2.创建数据库连接对象</span></span><br><span class="line"><span class="comment">// 3.创建数据库连接池(promise形式调数据)</span></span><br><span class="line"><span class="keyword">const</span> promisePool = mysql.<span class="title function_">createPool</span>(config).<span class="title function_">promise</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录接口(获取登陆信息)</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> (req , res)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 查看数据库内的信息是否存在该用户</span></span><br><span class="line">    <span class="keyword">var</span> admin = <span class="keyword">await</span> promisePool.<span class="title function_">query</span>(</span><br><span class="line">        <span class="string">&#x27;select * from admin where username=? and password=?&#x27;</span>,</span><br><span class="line">        [req.<span class="property">body</span>.<span class="property">username</span>,req.<span class="property">body</span>.<span class="property">password</span>])</span><br><span class="line">    <span class="comment">// 判断数据库中是否存在该用户(数据库返回的数据的长度)</span></span><br><span class="line">    <span class="keyword">if</span>(!admin[<span class="number">0</span>].<span class="property">length</span>)&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>:<span class="number">0</span>,<span class="comment">//登陆状态</span></span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;该用户不存在,请重新输入账号密码&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 登陆成功生成token</span></span><br><span class="line">        <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(</span><br><span class="line">            &#123;<span class="attr">data</span>:admin[<span class="number">0</span>][<span class="number">0</span>].<span class="property">username</span>&#125;,<span class="comment">//将用户名加密成token</span></span><br><span class="line">            <span class="string">&#x27;lam&#x27;</span>,<span class="comment">// 加密密钥为 lam</span></span><br><span class="line">            &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;30h&#x27;</span>&#125; <span class="comment">// token生效时间为30小时</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将生成好的token保存到res.header中返回给前端浏览器</span></span><br><span class="line">        res.<span class="title function_">header</span>(<span class="string">&#x27;Authorization&#x27;</span> , token)<span class="comment">//固定写为Authorization(后面校验也是用这个请求头)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送登陆状态</span></span><br><span class="line">        res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>:<span class="number">1</span>,<span class="comment">//登陆状态为1</span></span><br><span class="line">            <span class="attr">data</span>: admin[<span class="number">0</span>],<span class="comment">//用户数据</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户信息接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/userinfo&#x27;</span> , <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;111&#x27;+req.headers.authorization);</span></span><br><span class="line">    <span class="comment">// 验证token</span></span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">headers</span>.<span class="property">authorization</span></span><br><span class="line">    <span class="keyword">const</span> payload = jwt.<span class="title function_">verify</span>(token,<span class="string">&#x27;lam&#x27;</span>)<span class="comment">//解密token</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(payload.<span class="property">data</span>);</span><br><span class="line">    <span class="keyword">if</span>(payload)&#123;<span class="comment">//确认token</span></span><br><span class="line">        <span class="comment">// 确认token后返回用户名(我的token中加密的就是用户名)</span></span><br><span class="line">        res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">username</span>: payload.<span class="property">data</span>,<span class="comment">//用户名</span></span><br><span class="line">            <span class="attr">status</span>: <span class="number">1</span><span class="comment">//登录状态码设置为1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 验证失败的话返回页面状态码500</span></span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动,3000端口正在监听....&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链接数据库函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getConfig</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//域名</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">3306</span>,<span class="comment">//端口号(mysql默认是3306)</span></span><br><span class="line">        <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,<span class="comment">//数据库的用户名</span></span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;Zpl13189417387&#x27;</span>,<span class="comment">//数据库的密码</span></span><br><span class="line">        <span class="attr">database</span>:<span class="string">&#x27;jwt&#x27;</span>,<span class="comment">//要连接的数据库名称</span></span><br><span class="line">        <span class="attr">connectionLimit</span>:<span class="number">1</span><span class="comment">//创建连接池的数量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建WebSocket的服务器(也就是WebSocketServer)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocketServer</span> = <span class="title class_">WebSocket</span>.<span class="property">WebSocketServer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 WebSocketServer (websocket服务器)</span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置websocket服务器监听</span></span><br><span class="line"><span class="comment">//(wss表示websocket服务器 , ws表示当前每一个链接这台服务器的客户端,req连着这台服务器的客户端的请求对象)</span></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> <span class="title function_">connection</span>(<span class="params">ws,req</span>) &#123;<span class="comment">//监听连接事件</span></span><br><span class="line">    <span class="comment">// 通过new url对象来获取这个url身上所携带的参数</span></span><br><span class="line">    <span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span> , <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myURL.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>));<span class="comment">//输出token</span></span><br><span class="line">    <span class="comment">// 校验token</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 解密成功(token生效)</span></span><br><span class="line">        <span class="keyword">const</span> payload = jwt.<span class="title function_">verify</span>(myURL.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>),<span class="string">&#x27;lam&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(payload)&#123;</span><br><span class="line">            ws.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(</span><br><span class="line">                <span class="title class_">WebSocketType</span>.<span class="property">GroupChat</span>,</span><br><span class="line">                <span class="string">&#x27;广播&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;欢迎来到聊天室!&#x27;</span></span><br><span class="line">            ))</span><br><span class="line">            <span class="comment">//将解密后的信息存放到ws模块当中后续方便前端页面获取用户列表和群聊私聊功能的实现</span></span><br><span class="line">            ws.<span class="property">user</span> = payload</span><br><span class="line">            <span class="comment">// 并且我们希望在每一个用户连接成功后得到提醒当前的在线人数(包括自己)</span></span><br><span class="line">            <span class="comment">// 封装一个群发函数</span></span><br><span class="line">            <span class="title function_">sendAll</span>()<span class="comment">//用户一旦token验证成功立刻返回当前在线用户的数据</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span>(err) &#123;<span class="comment">//解密失败verify方法报错</span></span><br><span class="line">        <span class="comment">// 捕获错误信息防止程序崩溃</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`错误信息<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> <span class="title function_">message</span>(<span class="params">data</span>) &#123;<span class="comment">//客户端监听信息事件</span></span><br><span class="line">    <span class="comment">// console.log(&#x27;收到了来自客户端的消息:&#x27;, data.toString());//将接受过来的消息转化为字符串信息</span></span><br><span class="line">    <span class="comment">// 对获取到的前端页面传过来的信息进行对json对象的解密</span></span><br><span class="line">    <span class="keyword">const</span> msgObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)</span><br><span class="line">    <span class="keyword">switch</span> (msgObj.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//获取在线用户列表</span></span><br><span class="line">            <span class="comment">// 将接收到的用户列表发送回给前端</span></span><br><span class="line">            ws.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(</span><br><span class="line">                <span class="number">1</span>,<span class="literal">null</span>,<span class="comment">//发送1表示获取当前所有在线的用户信息,null当前没人发送,服务器自动发送</span></span><br><span class="line">                <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(wss.<span class="property">clients</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">user</span>))</span><br><span class="line">            ))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//群聊</span></span><br><span class="line">            <span class="comment">// 简易的群聊功能(clients里面存放着当前所有链接这台websocket服务器的客户端)</span></span><br><span class="line">            <span class="comment">// 对所有链接这台websocket服务器的客户端进行一个遍历</span></span><br><span class="line">            wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">each</span>(<span class="params">client</span>) &#123;</span><br><span class="line">                <span class="comment">// 判断当前所有的客户端是否成功链接</span></span><br><span class="line">                <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        将每一个客户端发过来的信息进行二进制的转换并重新转发回给每一个客户端</span></span><br><span class="line"><span class="comment">                        也就是说: 每一个客户端发的消息所有的客户端都能看见(群聊功能)</span></span><br><span class="line"><span class="comment">                    */</span> </span><br><span class="line">                    client.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(</span><br><span class="line">                        <span class="number">2</span>,<span class="comment">//群发</span></span><br><span class="line">                        ws.<span class="property">user</span>.<span class="property">data</span>,<span class="comment">//谁发的(用户名在连接服务器的时候存在了ws.user中)</span></span><br><span class="line">                        msgObj.<span class="property">data</span><span class="comment">//前端接收过来的信息</span></span><br><span class="line">                    ), &#123; <span class="attr">binary</span>: <span class="literal">false</span> &#125;);<span class="comment">//第二个参数为判断是否为二进制</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//私聊</span></span><br><span class="line">            <span class="comment">// 简易的私聊功能(clients里面存放着当前所有链接这台websocket服务器的客户端)</span></span><br><span class="line">            <span class="comment">// 对所有链接这台websocket服务器的客户端进行一个遍历</span></span><br><span class="line">            wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">each</span>(<span class="params">client</span>) &#123;</span><br><span class="line">                <span class="comment">// 判断前端传过来的私聊对象是否在线且存在</span></span><br><span class="line">                <span class="keyword">if</span> (client.<span class="property">user</span>.<span class="property">data</span> === msgObj.<span class="property">to</span> &amp;&amp; <span class="comment">//切记是两个条件都成立</span></span><br><span class="line">                    client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        将每一个客户端发过来的信息进行二进制的转换并重新转发回给每一个客户端</span></span><br><span class="line"><span class="comment">                        也就是说: 每一个客户端发的消息所有的客户端都能看见(群聊功能)</span></span><br><span class="line"><span class="comment">                    */</span> </span><br><span class="line">                    client.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(<span class="comment">//向目标客户端发送消息</span></span><br><span class="line">                        <span class="number">3</span>,<span class="comment">//私聊</span></span><br><span class="line">                        ws.<span class="property">user</span>.<span class="property">data</span>,<span class="comment">//谁发的(用户名在连接服务器的时候存在了ws.user中)</span></span><br><span class="line">                        msgObj.<span class="property">data</span><span class="comment">//前端接收过来的信息</span></span><br><span class="line">                    ), &#123; <span class="attr">binary</span>: <span class="literal">false</span> &#125;);<span class="comment">//第二个参数为判断是否为二进制</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一但又客户端断联服务器(退出浏览器,token失效)就回走这个回调</span></span><br><span class="line">    ws.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 直接删除set里面对应的用户即可</span></span><br><span class="line">        wss.<span class="property">clients</span>.<span class="title function_">delete</span>(ws.<span class="property">user</span>)</span><br><span class="line">        <span class="comment">// 随后重新给每一个客户端发送一次在新用户列表即可</span></span><br><span class="line">        <span class="title function_">sendAll</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建授权类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocketType</span> = &#123;</span><br><span class="line">    <span class="title class_">Error</span>:<span class="number">0</span>,<span class="comment">//出错了,没授权</span></span><br><span class="line">    <span class="title class_">GroupList</span>:<span class="number">1</span>,<span class="comment">//获取在线用户列表</span></span><br><span class="line">    <span class="title class_">GroupChat</span>:<span class="number">2</span>,<span class="comment">//群聊</span></span><br><span class="line">    <span class="title class_">SingleChat</span>:<span class="number">3</span><span class="comment">//私聊</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建消息的发送信息(有没有授权,谁发送的,发了什么)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMessage</span>(<span class="params">type,user,data</span>)&#123;</span><br><span class="line">    <span class="comment">// 因为ws.send方法只能发送字符串形式的值,因此要用stringify来转字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        type,<span class="comment">//需求类型(获取在线用户信息,群聊还是私聊)</span></span><br><span class="line">        user,<span class="comment">//谁发的消息</span></span><br><span class="line">        data<span class="comment">//发的什么消息</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 群发函数(一旦有新用户上线,就向所有的用户重新发送在线人数列表)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendAll</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 表示一旦有客户端连接到服务器,就会向所有的客户端发送当前的在线人数(用户列表)</span></span><br><span class="line">    wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">each</span>(<span class="params">client</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断当前所有的客户端是否成功链接</span></span><br><span class="line">        <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">            client.<span class="title function_">send</span>(<span class="title function_">createMessage</span>(</span><br><span class="line">                <span class="number">1</span>,<span class="literal">null</span>,<span class="comment">//1为获取在线用户列表</span></span><br><span class="line">                <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(wss.<span class="property">clients</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">user</span>))</span><br><span class="line">            ))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><ul><li><p><strong>登陆页面的跳转</strong><br><img src="/../upload/nodejs/n8/1.gif" alt="image"></p></li><li><p><strong>清除本地<code>token</code>的登录鉴权验证</strong><br><img src="/../upload/nodejs/n8/2.gif" alt="image"></p></li><li><p><strong>群聊和私聊功能的实现</strong><br><img src="/../upload/nodejs/n8/3.gif" alt="image"></p></li><li><p><strong>数据库表图</strong><br><img src="/../upload/nodejs/n8/1.png" alt="image"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> websocket </tag>
            
            <tag> express框架 </tag>
            
            <tag> ws模块 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(18)-websocket学习(2)-ws模块的基本使用(1)</title>
      <link href="/2022/11/07/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B018/"/>
      <url>/2022/11/07/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B018/</url>
      
        <content type="html"><![CDATA[<h1 id="ws模块"><a href="#ws模块" class="headerlink" title="ws模块"></a><code>ws</code>模块</h1><ul><li><strong><a href="https://www.npmjs.com/package/ws">官方文档</a></strong></li></ul><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><h3 id="客户端-前端"><a href="#客户端-前端" class="headerlink" title="客户端(前端)"></a>客户端(前端)</h3><ul><li><strong>通过<code>new</code>浏览器的内置对象<code>WebSocket</code>来构建一个<code>WebSocket连接器</code>,并指定要连接的端口号</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建websocket连接器并指定链接端口(固定形式)</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>生成的<code>ws</code>实例一般提供6个回调函数:</strong><ul><li><strong><code>onclose</code>: 服务器宕机就走这个回调函数</strong></li><li><strong><code>onerror</code>: 连接失败就走这个回调函数</strong></li><li><strong><code>onmessage</code>: 服务端每一次推送消息过来就走这个回调函数</strong></li><li><strong><code>onopen</code>: 客户端与服务器连接成功就会走这个回调函数</strong></li><li><strong><code>send</code>: 客户端向服务器发送消息</strong></li><li><strong><code>close</code>: 关闭连接</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ws模块提供的5个回调函数</span></span><br><span class="line"><span class="comment">// 1. onclose(服务器宕机)</span></span><br><span class="line">ws.<span class="property">onclose</span> = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器宕机了!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. onerror(客户端与服务器连接失败)</span></span><br><span class="line">ws.<span class="property">onerror</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. onmessage(每一次服务器返回消息)</span></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">msgObj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msgObj);<span class="comment">//返回的消息对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. onopen(客户端与服务器连接成功)</span></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功!&#x27;</span>);</span><br><span class="line">    <span class="comment">// 5. send(客户端向服务端发送信息)</span></span><br><span class="line">ws.<span class="title function_">send</span>(<span class="string">&#x27;你好! 服务端!&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后端-服务器"><a href="#后端-服务器" class="headerlink" title="后端(服务器)"></a>后端(服务器)</h2><ul><li><strong>安装<code>ws</code>模块</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i ws</span><br></pre></td></tr></table></figure><ul><li><strong>引入和创建<code>WebSocket</code>服务器</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入ws模块中的 WebSocket</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"><span class="comment">//创建WebSocket的服务器(也就是WebSocketServer)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocketServer</span> = <span class="title class_">WebSocket</span>.<span class="property">WebSocketServer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 WebSocketServer (websocket服务器)</span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>设置<code>websocket服务器监听</code>(<code>wss</code>表示<code>websocket服务器</code> , <code>ws</code>表示<code>当前每一个链接这台服务器的客户端</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置websocket服务器监听(wss表示websocket服务器 , ws表示当前每一个链接这台服务器的客户端)</span></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> <span class="title function_">connection</span>(<span class="params">ws,req</span>) &#123;<span class="comment">//监听连接事件</span></span><br><span class="line">    <span class="comment">//第一个参数为连接这个服务器的客户端,第二个参数为req,可以让我们将一些参数带过去,如token</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> <span class="title function_">message</span>(<span class="params">data</span>) &#123;<span class="comment">//客户端监听信息事件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到了来自客户端的消息:&#x27;</span>, data.<span class="title function_">toString</span>());<span class="comment">//将接受过来的消息转化为字符串信息</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>群聊功能:<code>wss</code>中有一个属性:<code>clients</code>这个属性里面存放着前所有链接这台websocket服务器的客户端</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简易的群聊功能(clients里面存放着当前所有链接这台websocket服务器的客户端)</span></span><br><span class="line"><span class="comment">// 对所有链接这台websocket服务器的客户端进行一个遍历</span></span><br><span class="line">wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">each</span>(<span class="params">client</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断当前所有的客户端是否成功链接</span></span><br><span class="line">    <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            将每一个客户端发过来的信息进行二进制的转换并重新转发回给每一个客户端</span></span><br><span class="line"><span class="comment">            也就是说: 每一个客户端发的消息所有的客户端都能看见</span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line">        client.<span class="title function_">send</span>(data, &#123; <span class="attr">binary</span>: <span class="literal">false</span> &#125;);<span class="comment">//第二个参数为判断是否为二进制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="我写了一个小demo来实现群聊功能"><a href="#我写了一个小demo来实现群聊功能" class="headerlink" title="我写了一个小demo来实现群聊功能"></a>我写了一个小<code>demo</code>来实现群聊功能</h2><ul><li><strong>前端页面动态的创建<code>li</code>标签根据消息的接收动态的填入到存在的<code>ul</code>标签中</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>聊天室(客户端)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chatArea&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;chatArea&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建websocket连接器并指定链接端口(固定形式)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ws模块提供的4个回调函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. onclose(服务器宕机)</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="property">onclose</span> = <span class="function">() =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器宕机了!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. onerror(客户端与服务器连接失败)</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="property">onerror</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接失败!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. onmessage(每一次服务器返回消息)</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">msgObj</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(msgObj.<span class="property">data</span>);<span class="comment">//返回的消息对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//接收到或者自己发送的消息自动创建li标签填入到ul中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> <span class="title class_">Othernew</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)<span class="comment">//创建dom节点</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Othernew</span>.<span class="property">innerText</span> = msgObj.<span class="property">data</span><span class="comment">//将获取回来的消息赋值给li标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#chatArea&#x27;</span>).<span class="title function_">appendChild</span>(<span class="title class_">Othernew</span>)<span class="comment">//将li标签添加到聊天区域中</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. onopen(客户端与服务器连接成功)</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="property">onopen</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 5. send(客户端向服务端发送信息)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// ws.send(&#x27;你好! 服务端!&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取dom元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> message = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#message&#x27;</span>)<span class="comment">//消息的输入</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> submit = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#submit&#x27;</span>)<span class="comment">//提交按钮</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注册发送事件</span></span></span><br><span class="line"><span class="language-javascript">        submit.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 判断不能发送空消息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!message.<span class="property">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;消息不能为空!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将输入口昂的内容通过ws.send发送到服务器</span></span></span><br><span class="line"><span class="language-javascript">            ws.<span class="title function_">send</span>(message.<span class="property">value</span>)<span class="comment">//发送消息</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>后端页面,这里做消息的转发</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// websocket编程 - ws模块</span></span><br><span class="line"><span class="comment">// 首先引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 使用express.static中间件托管静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// http响应</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">ok</span>:<span class="number">1</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动! 3000端口正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// websocket响应</span></span><br><span class="line"><span class="comment">// 引入ws模块中的 WebSocket</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocketServer</span> = <span class="title class_">WebSocket</span>.<span class="property">WebSocketServer</span><span class="comment">//创建WebSocket的服务器(也就是WebSocketServer)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 WebSocketServer (websocket服务器)</span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置websocket服务器监听(wss表示websocket服务器 , ws表示当前每一个链接这台服务器的客户端)</span></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> <span class="title function_">connection</span>(<span class="params">ws</span>) &#123;<span class="comment">//监听连接事件</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> <span class="title function_">message</span>(<span class="params">data</span>) &#123;<span class="comment">//客户端监听信息事件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到了来自客户端的消息:&#x27;</span>, data.<span class="title function_">toString</span>());<span class="comment">//将接受过来的消息转化为字符串信息</span></span><br><span class="line">    <span class="comment">// 简易的群聊功能(clients里面存放着当前所有链接这台websocket服务器的客户端)</span></span><br><span class="line">    <span class="comment">// 对所有链接这台websocket服务器的客户端进行一个遍历</span></span><br><span class="line">    wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">each</span>(<span class="params">client</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断当前所有的客户端是否成功链接</span></span><br><span class="line">        <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                将每一个客户端发过来的信息进行二进制的转换并重新转发回给每一个客户端</span></span><br><span class="line"><span class="comment">                也就是说: 每一个客户端发的消息所有的客户端都能看见(群聊功能)</span></span><br><span class="line"><span class="comment">            */</span> </span><br><span class="line">            client.<span class="title function_">send</span>(data, &#123; <span class="attr">binary</span>: <span class="literal">false</span> &#125;);<span class="comment">//第二个参数为判断是否为二进制</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&#x27;欢迎来到聊天室!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n7/1.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> websocket </tag>
            
            <tag> express框架 </tag>
            
            <tag> ws模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(17)-websocket学习(1)-初识websocket</title>
      <link href="/2022/11/07/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B017/"/>
      <url>/2022/11/07/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B017/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是websocket"><a href="#什么是websocket" class="headerlink" title="什么是websocket"></a>什么是<code>websocket</code></h1><ul><li><strong><code>WebSocket</code>是<code>HTML5</code>下一种<code>新的协议</code>（<code>websocket</code>协议本质上是一个基于<code>tcp</code>的协议）</strong></li><li><strong>它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的</strong></li><li><strong><code>Websocket</code>是一个<code>持久化</code>的协议</strong><br><img src="/../upload/nodejs/n7/1.png" alt="image"></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景:"></a>应用场景:</h2><ul><li><strong>实时弹幕</strong></li><li><strong>媒体聊天</strong></li><li><strong>协同编辑(如<code>world文档</code>)</strong></li><li><strong>基于位置的实时更新应用(<code>美团外卖</code>)</strong></li><li><strong>体育实况的更新</strong></li><li><strong>股票基金报价的实时更新等…</strong></li></ul><h2 id="http协议和websocket协议的区别在哪呢"><a href="#http协议和websocket协议的区别在哪呢" class="headerlink" title="http协议和websocket协议的区别在哪呢?"></a><code>http</code>协议和<code>websocket</code>协议的区别在哪呢?</h2><p><img src="/../upload/nodejs/n7/2.png" alt="image"></p><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a><code>http</code>协议</h3><ul><li><strong>要知道<code>http</code>协议的模式的运行流程是: <code>http协议</code>是单向通信的,即客户端先向服务器发送请求,服务器再给客户端响应数据, 服务器永远不可能低下头主动的给服务器响应数据的, 除非客户端先向服务器要数据, 也就是说,浏览器不主动请求的话,服务器是永远不可能给你发数据的,这就是<code>http</code>协议,那使用<code>http</code>协议来实现上面的应用场景的话其实也是可以实现的,不过实现起来比较麻烦, 常用的实现方法有<code>轮询</code>。</strong></li><li><strong>所谓的<code>轮询</code>,其实就是再客户端(<code>js端</code>)设置一个定时器,按照一定的时间间隔向服务器发送请求, 来询问服务器是否有最新的数据(弹幕,聊天信息,位置等….),但是这种机制的确定就是实时性不够, 你想一想,如果客户端设置的时间过长,像如果1分钟发一次的话,那么你得到的最新消息就是1分钟以前的了, 如果你设置的过短的话, 频繁的请求服务器就会给服务器带来极大的压力,尤其是用户一多的话服务器的压力就更大了,随时可能宕机!</strong></li></ul><h3 id="WebScoket协议"><a href="#WebScoket协议" class="headerlink" title="WebScoket协议"></a><code>WebScoket</code>协议</h3><ul><li><strong><code>webscoket</code>协议能够让服务器与客户端通过<code>握手(handshake)</code>来建立起全双工的通信方式,任何一方都能够主动的发送消息给对方。<code>webscoket</code>并不是全新的协议，而是利用了<code>HTTP协议</code>来建立连接的,而<code>http协议</code>的底层其实是使用的<code>TCP协议</code>,我们都知道<code>TCP协议</code>是能够实现全双工通信的, 但是<code>http协议</code>为了精简,就在这个基础上阉割了<code>全双工通信</code>的功能,但是后来发现业务变复杂了,又需要<code>全双工通信</code>了,这时,<code>websocket</code>协议就应运而生了。</strong><br><img src="/../upload/nodejs/n7/3.png" alt="image"></li></ul><h4 id="websocket全双工通信实现流程"><a href="#websocket全双工通信实现流程" class="headerlink" title="websocket全双工通信实现流程"></a><code>websocket</code>全双工通信实现流程</h4><ul><li><strong>首先，<code>WebSocket</code>连接必须由浏览器发起，因为请求协议是一个标准的<code>HTTP</code>请求(<code>但是建立之后，在真正传输时候是不需要HTTP协议的</code>)，格式如下：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET ws://localhost:3000/ws/chat HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Origin: http://localhost:3000</span><br><span class="line">Sec-WebSocket-Key: client-random-string</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><ul><li><p><strong>该请求和普通的HTTP请求有几点不同：</strong></p><ol><li><p><strong>GET请求的地址不是类似<code>/path/</code>，而是以<code>ws://</code>开头的地址；</strong></p></li><li><p><strong>请求头<code>Upgrade: websocket</code>和<code>Connection: Upgrade</code>表示这个连接将要被转换为<code>WebSocket</code>连接；</strong></p></li><li><p><strong><code>Sec-WebSocket-Key</code>是用于标识这个连接，并非用于加密数据；</strong></p></li><li><p><strong><code>Sec-WebSocket-Version</code>指定了<code>WebSocket</code>的协议版本。</strong></p></li></ol></li><li><p><strong>随后，服务器如果接受该请求，就会返回如下响应：</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: server-random-string</span><br></pre></td></tr></table></figure><ul><li><strong>该响应代码<code>101</code>表示本次连接的HTTP协议即将被更改，更改后的协议就是<code>Upgrade: websocket</code>指定的<code>WebSocket协议</code>。</strong></li><li><strong>版本号和子协议规定了双方能理解的数据格式，以及是否支持压缩等等。如果仅使用<code>WebSocket的API</code>，就不需要关心这些。</strong></li><li><strong>现在，一个<code>WebSocket</code>连接就建立成功，浏览器和服务器就可以随时主动发送消息给对方。消息有两种，一种是<code>文本</code>，一种是<code>二进制数据</code>。通常，我们可以发送<code>JSON格式的文本</code>，这样，在浏览器处理起来就十分容易。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> websocket </tag>
            
            <tag> express框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(16)-jwt登录鉴权(2)-在express中使用jwt</title>
      <link href="/2022/11/05/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B016/"/>
      <url>/2022/11/05/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B016/</url>
      
        <content type="html"><![CDATA[<h1 id="在express框架中使用JWT"><a href="#在express框架中使用JWT" class="headerlink" title="在express框架中使用JWT"></a>在<code>express</code>框架中使用<code>JWT</code></h1><ol><li><strong>安装<code>JWT</code>相关的包:</strong><ul><li><strong><code>jsonwebtoken</code>: 用于生成 <code>JWT 字符串</code></strong></li><li><strong><code>express-jwt</code> 用于将 <code>JWT 字符串解析还原成 JSON 对象</code></strong></li></ul></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>导入<code>JWT</code>相关包</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)<span class="comment">//express框架</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)<span class="comment">//jwt生成器</span></span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)<span class="comment">//jwt解析器</span></span><br><span class="line"><span class="comment">// const &#123; expressJWT:expressJWT &#125; = require(&quot;express-jwt&quot;)//高版本使用 jwt解析器</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>设置<code>密钥</code>和使用<code>jwt.sign()</code>加密你想加密的信息生成<code>jwt</code>字符串</strong><ul><li><strong>为了保证<code> JWT</code> 字符串的安全性，防止 <code>JWT</code> 字符串在网络传输过程中被别人破解，我们需要专门定义一个用于加密和解密的 <code>secret</code> 密钥：</strong><ul><li><strong>当生成 <code>JWT</code> 字符串的时候，需要使用 <code>secret</code> 密钥对用户的信息进行加密，最终得到加密好的 <code>JWT</code> 字符串</strong></li><li><strong>当把 <code>JWT</code> 字符串解析还原成 <code>JSON</code> 对象的时候，需要使用 <code>secret</code> 密钥进行解密</strong></li></ul></li></ul></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置token密钥</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;miyao&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 jsonwebtoken 包提供的 sign() 方法，将用户的信息加密成 JWT 字符串，响应给客户端：</span></span><br><span class="line"><span class="comment">//jwt.sign() 方法生成 JWT 字符串。</span></span><br><span class="line"><span class="comment">// 参数1：用户的信息对象</span></span><br><span class="line"><span class="comment">// 参数2：加密的秘钥</span></span><br><span class="line"><span class="comment">// 参数3：配置对象，可以配置当前 token 的有效期</span></span><br><span class="line"><span class="comment">// 记住：千万不要把密码加密到 token 字符中</span></span><br><span class="line"><span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(</span><br><span class="line">    &#123;<span class="attr">username</span>:req.<span class="property">body</span>.<span class="property">username</span>&#125;,<span class="comment">//将用户名加密发送给客户端</span></span><br><span class="line">    secretKey,<span class="comment">//加密密钥</span></span><br><span class="line">    &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;30h&#x27;</span> &#125;<span class="comment">//token有效时间 30小时</span></span><br><span class="line">)</span><br><span class="line">res.<span class="title function_">send</span>(&#123;<span class="comment">//登陆成功发送token</span></span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">token</span>: tokenStr, <span class="comment">// 要发送给客户端的 token 字符串</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>注册解密器</strong><ul><li><strong>解密器注册成功后,我们在调用需要鉴权的接口时可以通过<code>req.user</code>来获取我们解密出来的信息</strong></li><li><strong>客户端每次在访问那些有权限接口的时候，都需要主动通过请求头中的 <code>Authorization</code> 字段，将 <code>Token</code> 字符串发送到服务器进行身份认证。</strong></li><li><strong>此时，服务器可以通过<code>express-jwt</code>这个中间件，自动将客户端发送过来的 <code>Token</code> 解析还原成 <code>JSON</code> 对象：</strong></li></ul></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册token解密器</span></span><br><span class="line"><span class="comment">// 注意：只要配置成功了 express-jwt 这个中间件，就可以把解析出来的用户信息，挂载到 req.user 属性上</span></span><br><span class="line"><span class="comment">// 里面传入的对象:密钥(加密解密都是一个),unless表示里面的带指定路径的不需要token鉴权</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(</span><br><span class="line">    &#123; <span class="comment">//按着模板填即可</span></span><br><span class="line">        <span class="attr">secret</span>: secretKey ,<span class="comment">//密钥</span></span><br><span class="line">        <span class="attr">algorithms</span>: [<span class="string">&quot;HS256&quot;</span>],<span class="comment">//设置jwt算法</span></span><br><span class="line">    &#125;</span><br><span class="line">).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))<span class="comment">//表示携带/api的接口不需要token鉴权 </span></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>注册解密器(新版)</strong></li></ol><ul><li><strong>在新版的<code>jwt模块</code>当中,解密<code>token</code>不再这么复杂, 提供了一个新的<code>api</code>接口来解密<code>token</code></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jwt.verify()函数</span></span><br><span class="line"><span class="keyword">const</span> paylod = jwt.<span class="title function_">verify</span>(token , <span class="string">&#x27;密钥&#x27;</span>)</span><br><span class="line"><span class="comment">//输出的 paylod 就能token解密后的数据</span></span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li><strong>创建一个错误中间件,捕获解析 <code>JWT</code> 失败后产生的错误以保持代码运行的稳定性</strong><ul><li><strong>当使用 <code>express-jwt</code> 解析 <code>Token</code> 字符串时，如果客户端发送过来的 <code>Token 字符串过期或不合法</code>，会产生一个解析失败的错误，影响项目的正常运行。我们可以通过 <code>Express</code> 的错误中间件，捕获这个错误并进行相关的处理。</strong></li></ul></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置一个错误中间件 , 捕获解析 JWT 失败后产生的错误</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这次错误是由 token 解析失败导致的</span></span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;<span class="comment">//固定写法</span></span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">401</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">500</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;未知的错误&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="完整的代码展示"><a href="#完整的代码展示" class="headerlink" title="完整的代码展示"></a>完整的代码展示</h2><ul><li><strong>服务端(<code>app.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jwt身份认证</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入相应的包</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)<span class="comment">//express框架</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)<span class="comment">//jwt生成器</span></span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)<span class="comment">//jwt解析器</span></span><br><span class="line"><span class="comment">// const &#123; expressJWT:expressJWT &#125; = require(&quot;express-jwt&quot;)//高版本使用 jwt解析器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析post参数的两个内置中间件</span></span><br><span class="line"><span class="comment">// 通过express.json()这个中间件，解析表单中的JSON格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())<span class="comment">//解析post的请求题参数(json格式)</span></span><br><span class="line"><span class="comment">// 通过express.urlencoded()这个中间件，来解析表单中的url-encoded格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))<span class="comment">//解析post的请求题参数(encoded格式)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 学习重点1: 设置token密钥</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;miyao&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 学习重点3 : 注册token解密器</span></span><br><span class="line"><span class="comment">// 注意：只要配置成功了 express-jwt 这个中间件，就可以把解析出来的用户信息，挂载到 req.user 属性上</span></span><br><span class="line"><span class="comment">// 里面传入的对象:密钥(加密解密都是一个),unless表示里面的带指定路径的不需要token鉴权</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(</span><br><span class="line">    &#123; <span class="comment">//按着模板填即可</span></span><br><span class="line">        <span class="attr">secret</span>: secretKey ,<span class="comment">//密钥</span></span><br><span class="line">        <span class="attr">algorithms</span>: [<span class="string">&quot;HS256&quot;</span>],<span class="comment">//设置jwt算法</span></span><br><span class="line">    &#125;</span><br><span class="line">).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))<span class="comment">//表示携带/api的接口不需要token鉴权 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置登录接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span> , <span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    <span class="comment">// 判断用户提交的登录信息是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">username</span> !== <span class="string">&#x27;lam&#x27;</span> || req.<span class="property">body</span>.<span class="property">password</span> !== <span class="string">&#x27;123&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">400</span>, <span class="attr">msg</span>: <span class="string">&#x27;登录失败&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登陆成功(启动jwt加密,将用户信息通过密钥加密生成token发送给浏览器)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        学习重点2 : 在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。</span></span><br><span class="line"><span class="comment">                    并通过 token 属性发送给客户端</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="comment">// 参数1：用户的信息对象</span></span><br><span class="line">    <span class="comment">// 参数2：加密的秘钥</span></span><br><span class="line">    <span class="comment">// 参数3：配置对象，可以配置当前 token 的有效期</span></span><br><span class="line">    <span class="comment">// 记住：千万不要把密码加密到 token 字符中</span></span><br><span class="line">    <span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(</span><br><span class="line">        &#123;<span class="attr">username</span>:req.<span class="property">body</span>.<span class="property">username</span>&#125;,<span class="comment">//将用户名加密发送给客户端</span></span><br><span class="line">        secretKey,<span class="comment">//加密密钥</span></span><br><span class="line">        &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;30h&#x27;</span> &#125;<span class="comment">//token有效时间 30小时</span></span><br><span class="line">    )</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">        <span class="attr">token</span>: tokenStr, <span class="comment">// 要发送给客户端的 token 字符串</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个有权限的 API 接口(需要token鉴权)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// 学习重点4：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">user</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;获取用户信息成功！&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: req.<span class="property">user</span>, <span class="comment">// 要发送给客户端的用户信息</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点学习5 : 设置一个错误中间件 , 捕获解析 JWT 失败后产生的错误</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这次错误是由 token 解析失败导致的</span></span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;<span class="comment">//固定写法</span></span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">401</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">500</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;未知的错误&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动,3000端口正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><ul><li><p><strong>生成<code>token</code></strong><br><img src="/../upload/nodejs/n6/11.png" alt="image"></p></li><li><p><strong>解析<code>token</code>并输出解析后的结果</strong><br><img src="/../upload/nodejs/n6/12.png" alt="image"><br><img src="/../upload/nodejs/n6/13.png" alt="image"></p></li><li><p><strong>发生错误时(<code>token过期</code>或者<code>token输入错误</code>),错误中间件的捕获错误作用</strong><br><img src="/../upload/nodejs/n6/14.png" alt="image"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express框架 </tag>
            
            <tag> jwt </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(15)-jwt登录鉴权(1)</title>
      <link href="/2022/11/05/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B015/"/>
      <url>/2022/11/05/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B015/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要JWT"><a href="#为什么需要JWT" class="headerlink" title="为什么需要JWT?"></a>为什么需要<code>JWT</code>?</h1><ul><li><strong>我们之前学到的<code>Session</code>认证机制需要配合<code>Cookie</code>才能实现,且由于<code>Cookie</code>是不支持跨域访问的, 因此，当涉及到<code>前端跨域请求后端接口</code>的时候，需要做很多额外的配置，才能实现<code>跨域 Session 认证</code>。</strong></li><li><strong>注意</strong><ul><li><strong>当<code>前端请求后端接口不存在跨域问题</code>的时候，推荐使用 <code>Session</code> 身份认证机制。</strong></li><li><strong>当<code>前端需要跨域请求后端接口</code>的时候，不推荐使用<code> Session</code> 身份认证机制，推荐使用 <code>JWT</code> 认证机制。</strong></li></ul></li></ul><h1 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT?"></a>什么是<code>JWT</code>?</h1><ul><li><strong><code>JWT</code>（英文全称：<code>JSON Web Token</code>）是目前最流行的<code>跨域认证解决方案</code>。</strong></li><li><strong>它遵循<code>JSON</code>格式(因此不存在跨域问题)，将用户信息加密到<code>token</code>里，服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证<code>token</code>，通过<code>token</code>验证用户身份。基于<code>token</code>的身份验证可以替代传统的<code>cookie+session</code>身份验证方法。</strong></li></ul><h1 id="JWT的工作原理"><a href="#JWT的工作原理" class="headerlink" title="JWT的工作原理:"></a><code>JWT</code>的工作原理:</h1><p><img src="/../upload/nodejs/n6/9.jpg" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>用户登录提交信息到服务器 , 服务器将用户提交的信息通过特定的密钥加密成一个<code>token</code>字符串, 随后相应给客户端, 客户端再将响应回来的<code>token</code>字符串主动的保存到浏览器当中(<code>localstorage</code>,<code>localsession</code>), 今后凡是需要进行身份验证的时候, 客户端就会通过请求头里面的<code>Authorization</code>这个字段, 将<code>token</code>发送给服务器, 服务器就会将这个<code>token</code>还原成用户的信息对象, 从而对用户的身份进行认证</strong></li></ul><h1 id="JWT的组成部分"><a href="#JWT的组成部分" class="headerlink" title="JWT的组成部分"></a><code>JWT</code>的组成部分</h1><ul><li><strong><code>JWT</code> 通常由三部分组成，分别是 <code>Header</code>（头部）、<code>Payload</code>（有效荷载）、<code>Signature</code>（签名）。</strong></li><li><strong>三者之间使用英文的“.”分隔(这个.号只有分隔的作用)，格式如下：</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Header</span>.<span class="property">Payload</span>.<span class="property">Signature</span></span><br></pre></td></tr></table></figure><ul><li><strong>生成的<code>Token</code>示例如下:</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.<span class="property">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span>.<span class="property">TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure><h2 id="这三个部分的作用"><a href="#这三个部分的作用" class="headerlink" title="这三个部分的作用"></a>这三个部分的作用</h2><ul><li><strong><code>Payload</code> 部分才是<code>真正的用户信息</code>，它是用户信息经过加密之后生成的字符串。</strong></li><li><strong><code>Header</code> 和 <code>Signature</code> 是<code>安全性相关</code>的部分，只是为了保证 <code>Token 的安全性</code>,来防止别人破解<code>token</code>里面的信息。</strong><br><img src="/../upload/nodejs/n6/10.png" alt="image"></li></ul><h1 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a><code>JWT</code>的使用方式</h1><ul><li><strong>客户端收到服务器返回的 <code>JWT</code> 之后，通常会将它储存在 <code>localStorage</code> 或 <code>sessionStorage</code> 中。</strong></li><li><strong>此后，客户端每次与服务器通信，都要带上这个<code> JWT</code> 的字符串，从而进行身份认证。推荐的做法是把 <code>JWT</code> 放在 <code>HTTP</code> 请求头的 <code>Authorization</code> 字段中，格式如下：</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;api/user/1&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer &#x27;</span> + token</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express框架 </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(14)-Cookie与Session身份验证(2) - 在node中session中间件的使用</title>
      <link href="/2022/11/05/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014/"/>
      <url>/2022/11/05/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014/</url>
      
        <content type="html"><![CDATA[<h2 id="Session中间件的使用"><a href="#Session中间件的使用" class="headerlink" title="Session中间件的使用"></a><code>Session</code>中间件的使用</h2><ol><li><strong>安装<code>express-session</code>中间件</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express-session --save</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>随后在项目当中引入中间件</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>注册和配置<code>session</code>中间件</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;server-session&#x27;</span>,    <span class="comment">// 服务器生成session的签名 自定义</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sessionToCookieName&#x27;</span>, <span class="comment">// 设置session对应cookie的名称</span></span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,               <span class="comment">// 强制保存session，即使他没有变化，必须配置，否则会有警告</span></span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,     <span class="comment">// 强制将未初始化的session存储，必须配置，否则会有警告</span></span><br><span class="line">    <span class="attr">rolling</span>: <span class="literal">true</span>,               <span class="comment">// 在每次请求时强行设置cookie，这将重置cookie过期时间（默认：false）</span></span><br><span class="line">    <span class="attr">cookie</span>: &#123;                    <span class="comment">// cookie 配置与cookie-parser的配置一致</span></span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><ol start="4"><li><strong><code>session</code>中间件的增删改查</strong></li></ol><ul><li><strong>增 , 改 , 查</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增和编辑</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">username</span> = <span class="string">&#x27;张三&#x27;</span><span class="comment">//直接在后面追加属性或者修改属性值</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;登录&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> username = req.<span class="property">session</span>.<span class="property">username</span></span><br><span class="line">    <span class="keyword">if</span>(!username) &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;session没有缓存用户姓名的信息&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;用户姓名为：&#x27;</span> + username)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><strong>删</strong></p><ul><li><strong>方法一: 设置<code>cookie</code>的<code>maxAge</code>为<code>0</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 它会把所有的session都销毁 一般不用</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/loginout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">cookie</span>.<span class="property">maxAge</span> = <span class="number">0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>方法二: 销毁指定<code>session</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定session中具体的key值进行销毁</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/loginout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">username</span> = <span class="literal">null</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>方法三: 调用<code>destroy</code>方法</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 会清空所有的session</span></span><br><span class="line">req.<span class="property">session</span>.<span class="title function_">destroy</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;退出登录, session清空成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="我做了一个小demo来实现Session的增删改查实现"><a href="#我做了一个小demo来实现Session的增删改查实现" class="headerlink" title="我做了一个小demo来实现Session的增删改查实现"></a>我做了一个小<code>demo</code>来实现<code>Session</code>的增删改查实现</h2><ul><li><strong>实现需求:一个登陆界面,一个首页,登录成功后将登陆状态和用户名密码等信息保存到<code>session</code>中并跳转到首页</strong></li><li><strong>在首页中输出<code>session</code>中的用户名</strong></li><li><strong>点击首页的退出登录按钮,清除<code>session</code>中的数据并跳转回登录页,此时无法在通过修改网页url的方法回到首页</strong></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h3><ul><li><strong>服务器端(<code>app.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cookie与session - session中间件的使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 express框架 和 session中间件</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用express托管静态资源(./托管的话,一运行服务器就会默认指向该目录下的index文件)</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./pages&#x27;</span>))<span class="comment">//直接配置同目录下的文件名即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析post参数的两个内置中间件</span></span><br><span class="line"><span class="comment">// 通过express.json()这个中间件，解析表单中的JSON格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())<span class="comment">//解析post的请求题参数(json格式)</span></span><br><span class="line"><span class="comment">// 通过express.urlencoded()这个中间件，来解析表单中的url-encoded格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))<span class="comment">//解析post的请求题参数(encoded格式)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 学习重点1: 配置 Session 中间件(里面传入一个配置对象)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;jiami&#x27;</span>,<span class="comment">//里面传入任意的字符串,用于session加密</span></span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,<span class="comment">//固定写法,用于强制保存 session 默认为true,建议设置为false</span></span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span><span class="comment">//固定写法,强制将未初始化的 session 存储。默认为true</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录的 API 接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    <span class="comment">// 判断用户提交的登录信息是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">username</span> !== <span class="string">&#x27;lam&#x27;</span> || req.<span class="property">body</span>.<span class="property">password</span> !== <span class="string">&#x27;123&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;登录失败&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 学习重点2: 请将登录成功后的用户信息，保存到 Session 中</span></span><br><span class="line">    <span class="comment">// 注意：只有成功配置了 express-session 这个中间件之后，才能够通过 req 点出来 session 这个属性</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span> <span class="comment">// 用户的信息</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="property">islogin</span> = <span class="literal">true</span> <span class="comment">// 用户的登录状态</span></span><br><span class="line">  </span><br><span class="line">    res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;登录成功&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户姓名接口(获取session里面的数据)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/username&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 首先对请求参数中的session进行判断,判断其中是否存在islogin</span></span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">islogin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>:<span class="number">0</span>,<span class="attr">msg</span>:<span class="string">&#x27;登陆失败!&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;登陆成功!&#x27;</span>,</span><br><span class="line">        <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span>,<span class="comment">//学习重点3: 获取session里面的数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出登录接口(清除session)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/logout&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 学习重点4: 调用session.destroy()接口清空session</span></span><br><span class="line">    <span class="comment">// 注意调用.destroy只会清除当前用户的session,不会清除其他用户的session</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;退出登陆成功!!&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动,3000端口正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>登录页(<code>login.html</code>)[这里就只显示<code>body</code>标签内的数据]</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取输出的参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#username&#x27;</span>)<span class="comment">//获取输入账号dom</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> password = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#password&#x27;</span>)<span class="comment">//获取输入密码dom</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> login = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#login&#x27;</span>)<span class="comment">//获取登录按钮dom</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注册登陆事件(点击发送post请求)</span></span></span><br><span class="line"><span class="language-javascript">        login.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">value</span>,password.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用fetch发送请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fetch</span>(<span class="string">`/login`</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="comment">//设置响应体内容</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>:username.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">password</span>:password.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">                &#125;),</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">headers</span>:&#123;<span class="comment">//设置响应头</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(res)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 判断返回的状体码status</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(!res.<span class="property">status</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;登陆失败!账号或者密码错误!!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;登陆成功!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    location.<span class="property">href</span> = <span class="string">&#x27;./index.html&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>首页(<code>index.html</code>)[这里就只显示<code>body</code>标签内的数据]</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页面一加载就发送请求判断session的登陆情况</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">`/username`</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,<span class="comment">//发送get请求</span></span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 首先判断登陆状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(!res.<span class="property">status</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">`你暂未登录,请先登录...`</span>)</span></span><br><span class="line"><span class="language-javascript">                    location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">`欢迎!<span class="subst">$&#123;res.username&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// // 注册退出登录事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> logout = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#logout&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// // 点击发送退出登录请求</span></span></span><br><span class="line"><span class="language-javascript">        logout.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fetch</span>(<span class="string">`/logout`</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,<span class="comment">//发送get请求</span></span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(res.<span class="property">msg</span>)<span class="comment">//输出退出成功!</span></span></span><br><span class="line"><span class="language-javascript">                location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span><span class="comment">//退回登录面</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n6/1.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express框架 </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
            <tag> http </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(13)-Cookie与Session身份验证(1)-了解Cookie和Session</title>
      <link href="/2022/11/05/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013/"/>
      <url>/2022/11/05/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013/</url>
      
        <content type="html"><![CDATA[<h1 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h1><h2 id="什么是身份认证"><a href="#什么是身份认证" class="headerlink" title="什么是身份认证?"></a>什么是身份认证?</h2><ul><li><strong>身份认证（<code>Authentication</code>）又称“身份验证”、“鉴权”，是指通过一定的手段，完成对用户身份的确认。</strong></li><li><strong>日常生活中的身份认证随处可见，例如：高铁的验票乘车，手机的密码或指纹解锁，支付宝或微信的支付密码等。</strong></li><li><strong>在 Web 开发中，也涉及到用户身份的认证，例如：各大网站的<code>手机验证码登录</code>、<code>邮箱密码登录</code>、<code>二维码登录</code>等。</strong></li></ul><h2 id="为什么需要身份验证"><a href="#为什么需要身份验证" class="headerlink" title="为什么需要身份验证?"></a>为什么需要身份验证?</h2><ul><li><strong>身份认证的目的，是为了<code>确认当前所声称为某种身份的用户，确实是所声称的用户</code>。例如，你去找快递员取快递，你要怎么证明这份快递是你的。</strong></li><li><strong>在互联网项目开发中，如何对用户的身份进行认证，是一个值得深入探讨的问题。例如，如何才能保证网站不会错误的将“马云的存款数额”显示到“马化腾的账户”上。</strong></li></ul><h2 id="不同开发模式下的身份认证"><a href="#不同开发模式下的身份认证" class="headerlink" title="不同开发模式下的身份认证"></a>不同开发模式下的<code>身份认证</code></h2><ul><li><strong>对于服务端渲染和前后端分离这两种开发模式来说，分别有着不同的身份认证方案：</strong><ol><li><strong><code>服务端渲染</code>推荐使用 <code>Session 认证机制</code></strong></li><li><strong><code>前后端分离</code>推荐使用<code> JWT 认证机制</code>(重点学习)</strong></li></ol></li></ul><h1 id="http协议的基本介绍"><a href="#http协议的基本介绍" class="headerlink" title="http协议的基本介绍"></a><code>http</code>协议的基本介绍</h1><h2 id="http协议的无状态性"><a href="#http协议的无状态性" class="headerlink" title="http协议的无状态性"></a><code>http</code>协议的无状态性</h2><ul><li><strong>了解 <code>HTTP</code> 协议的无状态性是进一步学习 <code>Session</code> 认证机制的必要前提。</strong></li><li><strong><code>HTTP</code> 协议的无状态性，指的是客户端的每次 <code>HTTP </code>请求都是独立的，连续多个请求之间没有直接的关系，服务器不会主动保留每次 <code>HTTP</code> 请求的状态。</strong></li></ul><h3 id="如下图所示"><a href="#如下图所示" class="headerlink" title="如下图所示:"></a>如下图所示:</h3><p><img src="/../upload/nodejs/n6/1.png" alt="image"></p><ul><li><strong>我们去超市买东西,结账的时候,收银员是不会认得每一个顾客的,更不会认得你究竟是不是会员, 你第二天去继续取买同样也是如此, 这就类比到服务器(收银员)不会认得每一个<code>http</code>请求(顾客的购物结算)一样</strong></li></ul><h2 id="如何突破http协议的无状态限制呢"><a href="#如何突破http协议的无状态限制呢" class="headerlink" title="如何突破http协议的无状态限制呢?"></a>如何突破<code>http</code>协议的无状态限制呢?</h2><ul><li><strong>还是上一个例子, 为了方便收银员在进行结算时给会员打折,超市可以给会员发一张<code>vip会员卡</code></strong></li></ul><h3 id="如下图所示-1"><a href="#如下图所示-1" class="headerlink" title="如下图所示"></a>如下图所示</h3><p><img src="/../upload/nodejs/n6/2.png" alt="image"></p><ul><li><strong>我们在进行购物结算(<code>http请求</code>)的时候出示<code>会员卡</code>这样收银员(服务器)就能识别到我们究竟是不是会员,而这张<code>会员卡</code>就是<code>Cookie</code></strong></li></ul><h1 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie?"></a>什么是<code>Cookie</code>?</h1><ul><li><strong><code>Cookie</code> 是存储在用户浏览器中的一段不超过 <code>4 KB</code> 的字符串。它由一个名称（<code>Name</code>）、一个值（<code>Value</code>）[键值对形式]和其它几个用于控制 <code>Cookie</code> 有效期、安全性、使用范围的可选属性组成。</strong></li><li><strong>不同域名下的 <code>Cookie</code> 各自独立，每当客户端发起请求时，会<code>自动</code>把<code>当前域名下</code>所有<code>未过期的 Cookie</code> 一同发送到服务器。</strong></li></ul><h3 id="Cookie的几大特性"><a href="#Cookie的几大特性" class="headerlink" title="Cookie的几大特性:"></a><code>Cookie</code>的几大特性:</h3><ol><li><strong>自动发送(我们在想服务器发送请求时自动携带<code>cookie</code>)</strong></li><li><strong>域名独立(不同域名下的<code>cookie</code>是相互独立的,好比百度的<code>cookie</code>无法访问京东一样)</strong></li><li><strong>过期时限(每一个<code>cookie</code>都是有过期时限的,只有在有效期的范围内才能发送到服务器)</strong></li><li><strong>4KB 限制(<code>cookie</code>是以键值对的形式存储的,存储的字符串限制为4kb)</strong><br><img src="/../upload/nodejs/n6/3.png" alt="image"></li></ol><h2 id="Cookie在身份验证中的作用"><a href="#Cookie在身份验证中的作用" class="headerlink" title="Cookie在身份验证中的作用"></a><code>Cookie</code>在身份验证中的作用</h2><ul><li><strong>客户端第一次请求服务器的时候，服务器通过<code>响应头</code>的形式，向客户端发送一个身份认证的 <code>Cookie</code>，客户端会自动将 <code>Cookie</code> 保存在浏览器中。</strong></li><li><strong>随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将<code>身份认证相关的 Cookie</code>，通过<code>请求头</code>的形式发送给服务器，服务器即可验明客户端的身份。</strong><br><img src="/../upload/nodejs/n6/4.png" alt="image"></li></ul><h2 id="Cookie是不具备安全性的"><a href="#Cookie是不具备安全性的" class="headerlink" title="Cookie是不具备安全性的"></a><code>Cookie</code>是不具备安全性的</h2><ul><li><strong>由于 <code>Cookie</code> 是存储在浏览器中的，而且<code>浏览器也提供了读写 Cookie 的 API</code>，因此 <code>Cookie 很容易被伪造</code>，不具有安全性。因此不建议服务器将重要的隐私数据，通过 <code>Cookie</code> 的形式发送给浏览器。</strong></li></ul><h3 id="还是拿回上一个例子"><a href="#还是拿回上一个例子" class="headerlink" title="还是拿回上一个例子"></a>还是拿回上一个例子</h3><p><img src="/../upload/nodejs/n6/5.png" alt="image"></p><ul><li><strong>有的客户发现只要出示会员卡就能打折,那么他就去伪造一个一模一样会员卡,同样也就能实现打折了,由此可见,单纯的使用会员卡(<code>cookie</code>)来辨别身份是不安全的,因为用户可以伪造这张会员卡(<code>Cookie</code>)</strong></li></ul><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a><code>Session</code></h1><ul><li><p><strong>为了防止客户伪造会员卡，收银员在拿到客户出示的会员卡之后，可以在<code>收银机上进行刷卡认证</code>。只有收银机确认存在的会员卡，才能被正常使用。</strong><br><img src="/../upload/nodejs/n6/6.png" alt="image"></p></li><li><p><strong>这种“<code>会员卡 + 刷卡认证</code>”的设计理念，就是 <code>Session</code> 认证机制的精髓。</strong></p></li></ul><h2 id="什么是Session"><a href="#什么是Session" class="headerlink" title="什么是Session"></a>什么是<code>Session</code></h2><ul><li><p><strong><code>Session</code>是另一种记录客户状态的机制，不同的是<code>Cookie</code>保存在<code>客户端浏览器</code>中，而<code>Session</code>保存在<code>服务器</code>上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是<code>Session</code>。客户端浏览器再次访问时只需要从该<code>Session</code>中查找该客户的状态就可以了。</strong></p></li><li><p><strong>每个用户访问服务器都会建立一个<code>session</code>，那服务器是怎么标识用户的唯一身份呢？事实上，用户与服务器建立连接的同时，服务器会自动为其分配一个<code>Session_Id</code>,这个<code>Session_Id</code>一般是没有规律的字符串。</strong></p></li></ul><h2 id="Session的工作原理"><a href="#Session的工作原理" class="headerlink" title="Session的工作原理"></a><code>Session</code>的工作原理</h2><p><img src="/../upload/nodejs/n6/7.png" alt="image"></p><ul><li><strong><code>Session</code>的工作原理是客户端登录完成之后，服务器会创建对应的<code>Session</code>，<code>Session</code>创建完之后，服务器会通过<code>Cookie</code>携带<code>Session的id</code>发送给客户端，客户端将这个个带有<code>Session_id</code>的<code>Cookie</code>存储到浏览器 中。这样客户端每次访问服务器时，利用<code>Cookie</code>的自动发送特性,将这个带有<code>Session_id</code>的<code>Cookie</code>发送到服务器，服务器拿到<code>Session_id</code>之后，在内存找到与之对应的<code>Session</code>这样就可以返回对应的状态,页面或者资源了!。</strong></li></ul><h2 id="Session和Cookie的区别？"><a href="#Session和Cookie的区别？" class="headerlink" title="Session和Cookie的区别？"></a><code>Session</code>和<code>Cookie</code>的区别？</h2><ol><li><strong>数据存储位置</strong>：<code>cookie</code>数据存放在<strong>客户的浏览器</strong>上，<code>session</code>数据放在<strong>服务器</strong>上。</li><li><strong>安全性</strong>：<code>cookie</code><strong>不是很安全</strong>，别人可以分析存放在本地的<code>cookie</code>并进行<code>cookie</code>欺骗，考虑到安全应当使用<code>session</code>。</li><li><strong>服务器性能</strong>：<code>session</code>会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用<code>cookie</code>。</li><li><strong>数据大小</strong>：单个<code>cookie</code>保存的数据不能超过<code>4K</code>，很多浏览器都限制一个站点最多保存<code>20</code>个<code>cookie</code>。</li><li><strong>信息重要程度</strong>：可以考虑将登陆信息等<strong>重要信息</strong>存放为<code>session</code>，<strong>其他信息</strong>如果需要保留，可以放在<code>cookie</code>中。</li></ol><h2 id="安全性对比疑问"><a href="#安全性对比疑问" class="headerlink" title="安全性对比疑问"></a>安全性对比疑问</h2><ul><li><p><strong>有个疑问，据说是<code>session</code>身份验证比<code>cookie</code>身份验证更安全，因为<code>session</code>安全验证是存储在服务器，但是服务器仍然是需要去读取存储用户浏览器中的<code>session id</code>，然后依照这个<code>session id</code>去寻找<code>session</code>，这和读取<code>cookie</code>比起来，感觉也安全不到哪里去啊，我如果获取了目标的<code>session id</code>，不是照样可以伪造身份吗？你把<code>session</code>信息存储在服务端又安全在哪里呢？</strong></p></li><li><p><strong>网络上的某篇文章解答:</strong></p><ol><li><strong>没错，其实<code>HTTP</code>本身就不安全，只要是存在<code>cookie</code>中的数据都可以获取到并加以利用，但是<code>session</code>的安全性也是相对的，由于数据存储在数据库中，就算<code>sessionid</code>被获取利用，但是<code>session</code>中的数据并不会被恶意程序获取，这一点相对<code>cookie</code>来说就安全了一些</strong></li><li><strong>并且经常存在<code>session -id</code>还存储在浏览器，但是<code>session</code>信息已经过期的情况，此时进行登录，它会依照你当前的<code>session -id</code>创建<code>session</code>文件。也就是说黑客获得了用户的<code>session -id</code>后并不一定可以利用这个id进行登录，因为对应的<code>session</code>信息可能已经被销毁了，而且<code>session id</code>中也并没有存储其它有价值的信息，这就是<code>session</code>比单纯的<code>cookie</code>安全性更高的原因</strong></li></ol></li></ul><h3 id="Cookie结合Session的工作流程图"><a href="#Cookie结合Session的工作流程图" class="headerlink" title="Cookie结合Session的工作流程图"></a><code>Cookie</code>结合<code>Session</code>的工作流程图</h3><p><img src="/../upload/nodejs/n6/8.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express框架 </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(12)-Mysql数据库快速入门(2)-node操作数据库</title>
      <link href="/2022/11/04/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012/"/>
      <url>/2022/11/04/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012/</url>
      
        <content type="html"><![CDATA[<h1 id="node操作数据库"><a href="#node操作数据库" class="headerlink" title="node操作数据库"></a><code>node</code>操作数据库</h1><ol><li><strong>初始化<code>npm</code></strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>安装<code>mysql2</code>模块以及<code>express</code>框架</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save express mysql</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>后面就是项目中的代码应用:(基本使用)</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入express模块和mysql2模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">async</span> (req , res)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 1.创建连接池,进行操作</span></span><br><span class="line">    <span class="keyword">const</span> config = <span class="title function_">getConfig</span>()<span class="comment">//2.创建数据库连接对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.创建数据库连接池(promise形式调数据)</span></span><br><span class="line">    <span class="keyword">const</span> promisePool = mysql.<span class="title function_">createPool</span>(config).<span class="title function_">promise</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.使用query方法来操作数据库(里面填的是sql操作语句)</span></span><br><span class="line">    <span class="comment">// var students = await promisePool.query(&#x27;select * from student&#x27;)//查询学生的所有数据</span></span><br><span class="line">    <span class="keyword">var</span> students = <span class="keyword">await</span> promisePool.<span class="title function_">query</span>(<span class="string">`select * from student order by </span></span><br><span class="line"><span class="string">    score desc limit 2 offset 2`</span>)<span class="comment">//条件查询(按分数的倒序查询只要3和4个)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// console.log(students[0]);//控制台上输出结果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">ok</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">data</span>: students[<span class="number">0</span>]<span class="comment">//输出到页面上</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动,3000端口号正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链接数据库函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getConfig</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//域名</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">3306</span>,<span class="comment">//端口号(mysql默认是3306)</span></span><br><span class="line">        <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,<span class="comment">//数据库的用户名</span></span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;Zpl13189417387&#x27;</span>,<span class="comment">//数据库的密码</span></span><br><span class="line">        <span class="attr">database</span>:<span class="string">&#x27;test1&#x27;</span>,<span class="comment">//要连接的数据库名称</span></span><br><span class="line">        <span class="attr">connectionLimit</span>:<span class="number">1</span><span class="comment">//创建连接池的数量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n5/9.png" alt="image"></p><h3 id="mysql2模块中的query-方法"><a href="#mysql2模块中的query-方法" class="headerlink" title="mysql2模块中的query()方法"></a><code>mysql2</code>模块中的<code>query()</code>方法</h3><ul><li><p><strong><a href="https://www.npmjs.com/package/mysql2">官方文档</a></strong></p></li><li><p><strong><code>query(&#39;操作数据库的sql语句&#39;,携带的变量)</code>里面接收两个参数</strong></p><ol><li><strong>参数1是操作数据库的<code>sql</code>语句,用来实现通过<code>node</code>来对数据库进行增删改查</strong></li><li><strong>参数2是在进行操作数据库时,对携带过去的参数进行一个集中管理</strong></li></ol></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h2><ol><li><strong>简单形式(一个参数[sql语句])</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> promisePool.<span class="title function_">query</span>(</span><br><span class="line"><span class="string">&#x27;select * from student where name=&quot;马保国&quot; and gender=1&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//从student表格中查一个name=马保国且gender=1的数据</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>携带参数的形式(推荐使用)</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> promisePool.<span class="title function_">query</span>(</span><br><span class="line"><span class="string">&#x27;select * from student where name=? and gender=?&#x27;</span>,</span><br><span class="line">    [<span class="string">&#x27;马保国&#x27;</span>,<span class="number">1</span>]</span><br><span class="line">)</span><br><span class="line"><span class="comment">//从student表格中查一个name=马保国且gender=1的数据</span></span><br></pre></td></tr></table></figure><h2 id="nodeJS操作数据库的增删改查"><a href="#nodeJS操作数据库的增删改查" class="headerlink" title="nodeJS操作数据库的增删改查"></a><code>nodeJS</code>操作数据库的增删改查</h2><h4 id="增加数据-插入数据insert"><a href="#增加数据-插入数据insert" class="headerlink" title="增加数据(插入数据insert)"></a><strong>增加数据(插入数据<code>insert</code>)</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node操作mysql数据库 - 增加数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入express模块和mysql2模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">async</span> (req , res)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 1.创建连接池,进行操作</span></span><br><span class="line">    <span class="keyword">const</span> config = <span class="title function_">getConfig</span>()<span class="comment">//2.创建数据库连接对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.创建数据库连接池(promise形式调数据)</span></span><br><span class="line">    <span class="keyword">const</span> promisePool = mysql.<span class="title function_">createPool</span>(config).<span class="title function_">promise</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.使用query方法来操作数据库(里面填的是sql操作语句)***************************</span></span><br><span class="line">    <span class="keyword">var</span> students = <span class="keyword">await</span> promisePool.<span class="title function_">query</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    insert into student(name,score,gender,class_id) values (?,?,?,?)</span></span><br><span class="line"><span class="string">    `</span>,[<span class="string">&#x27;坤坤&#x27;</span>,<span class="number">60</span>,<span class="number">0</span>,<span class="number">2</span>])<span class="comment">//增加一条数据(坤坤,60,0,2)</span></span><br><span class="line">    <span class="comment">//************************************************************************</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// console.log(students[0]);//控制台上输出结果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">ok</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">data</span>: students[<span class="number">0</span>]<span class="comment">//输出到页面上</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动,3000端口号正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链接数据库函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getConfig</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//域名</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">3306</span>,<span class="comment">//端口号(mysql默认是3306)</span></span><br><span class="line">        <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,<span class="comment">//数据库的用户名</span></span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;Zpl13189417387&#x27;</span>,<span class="comment">//数据库的密码</span></span><br><span class="line">        <span class="attr">database</span>:<span class="string">&#x27;test1&#x27;</span>,<span class="comment">//要连接的数据库名称</span></span><br><span class="line">        <span class="attr">connectionLimit</span>:<span class="number">1</span><span class="comment">//创建连接池的数量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>结果展示:</strong><br><img src="/../upload/nodejs/n5/10.png" alt="image"></li></ul><h4 id="更改数据-update"><a href="#更改数据-update" class="headerlink" title="更改数据(update)"></a><strong>更改数据(<code>update</code>)</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.使用query方法来操作数据库(里面填的是sql操作语句)</span></span><br><span class="line"><span class="keyword">var</span> students = <span class="keyword">await</span> promisePool.<span class="title function_">query</span>(<span class="string">`</span></span><br><span class="line"><span class="string">update student set score=?,class_id=? where name=&quot;坤坤&quot; and gender=0`</span></span><br><span class="line">,[<span class="number">50</span>,<span class="number">1</span>])<span class="comment">//更改一条数据(坤坤,50,0,1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里省略了上下文代码,与上面的增加数据是一致的,只不过是/****/部分有所不同而已</span></span><br></pre></td></tr></table></figure><ul><li><strong>结果展示</strong><br><img src="/../upload/nodejs/n5/11.png" alt="image"></li></ul><h4 id="删除数据-delete"><a href="#删除数据-delete" class="headerlink" title="删除数据(delete)"></a><strong>删除数据(<code>delete</code>)</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.使用query方法来操作数据库(里面填的是sql操作语句)</span></span><br><span class="line"><span class="keyword">var</span> students = <span class="keyword">await</span> promisePool.<span class="title function_">query</span>(</span><br><span class="line"><span class="string">`delete from student where name=? and gender=?`</span></span><br><span class="line">,[<span class="string">&#x27;坤坤&#x27;</span>,<span class="number">0</span>])<span class="comment">//删除一条数据(name=坤坤,gender=0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里省略了上下文代码,与上面的增加数据是一致的,只不过是/****/部分有所不同而已</span></span><br></pre></td></tr></table></figure><ul><li><strong>结果展示</strong><br><img src="/../upload/nodejs/n5/12.png" alt="image"></li></ul><h4 id="查找数据-select"><a href="#查找数据-select" class="headerlink" title="查找数据(select)"></a><strong>查找数据(<code>select</code>)</strong></h4><ul><li><strong>参考上面的基本使用</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> students = <span class="keyword">await</span> promisePool.<span class="title function_">query</span>(</span><br><span class="line">    <span class="string">&#x27;select * from student where name=? and gender=?&#x27;</span>,</span><br><span class="line">    [<span class="string">&#x27;马保国&#x27;</span>,<span class="number">1</span>]</span><br><span class="line">    )<span class="comment">//查询name=马保国,gender=1的数据</span></span><br></pre></td></tr></table></figure><ul><li><strong>结果展示:</strong><br><img src="/../upload/nodejs/n5/13.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> MySQL </tag>
            
            <tag> express框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(11)-Mysql数据库快速入门(1)</title>
      <link href="/2022/11/04/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011/"/>
      <url>/2022/11/04/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库的快速入门"><a href="#MySQL数据库的快速入门" class="headerlink" title="MySQL数据库的快速入门"></a><code>MySQL</code>数据库的快速入门</h1><ul><li><strong>因为要学习<code>nodejs</code>所以这里简单的入门学习一下数据库,而为什么选择<code>MySQL</code>呢? 因为它是目前网上最火的数据库,同时页是免费开源的</strong></li><li><strong>这里我并没有选择安装<code>MySQL server</code>,而是选择了使用<code>wamp</code>集成环境来开发,因为它相对于前者,里面已经集成了图形化处理,不再需要另外安装数据库图形化处理软件</strong></li></ul><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p><img src="/../upload/nodejs/n5/1.png" alt="image"></p><h2 id="SQL的基本语法"><a href="#SQL的基本语法" class="headerlink" title="SQL的基本语法"></a><code>SQL</code>的基本语法</h2><ul><li><strong>插入数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `students`(`name`, `score`, `gender`) <span class="keyword">VALUES</span> (<span class="string">&#x27;lam&#x27;</span>,<span class="number">100</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">-- 可以不设置id,create_time</span></span><br><span class="line"><span class="comment">-- 这里省略了id的设置,因为id为我设置成了自增</span></span><br></pre></td></tr></table></figure><ul><li><strong>更新数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `students` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>,`score`<span class="operator">=</span><span class="number">20</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>将students表格中id为<span class="number">2</span>的行里面的name设置为张三,score设置为<span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li><strong>删除数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `students` <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 删除id为2的数据行</span></span><br></pre></td></tr></table></figure><ul><li><strong>查询数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查所有的数据所有的字段(*表示选取所有的列)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `students` <span class="keyword">WHERE</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查所有的数据某个字段(*表示选取所有的列)</span></span><br><span class="line"><span class="keyword">SELECT</span> `id`, `name`, `score`, `gender` <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 条件查询(*表示选取所有的列)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> score<span class="operator">&gt;=</span><span class="number">80</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">where</span> score<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">AND</span> gender<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询(*表示选取所有的列)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%k%&#x27;</span><span class="comment">-- 查询所有带k的字段</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;k%&#x27;</span><span class="comment">-- 查询所有以k开头的字段</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%k&#x27;</span><span class="comment">-- 查询所有以k结尾的字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排序</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> score;<span class="comment">-- 正向排序</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;<span class="comment">-- 反向排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分页查询</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> student LIMIT <span class="number">50</span> <span class="keyword">OFFSET</span> <span class="number">0</span></span><br><span class="line"><span class="comment">-- 表示只取前面的50条数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span> LIMIT <span class="number">2</span> <span class="keyword">OFFSET</span> <span class="number">2</span></span><br><span class="line"><span class="comment">-- 表示按分数的倒序排列,取两行数据,但是从第2个开始取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 记录条数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 数据名称 <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><h2 id="多表查询-不常用"><a href="#多表查询-不常用" class="headerlink" title="多表查询(不常用)"></a>多表查询(不常用)</h2><ul><li><strong>多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有100行记录的表进行笛卡尔查询将返回1万条记录，对两个各自有1万行记录的表进行笛卡尔查询将返回1亿条记录</strong></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student , class</span><br><span class="line"><span class="comment">-- 表示查询这两个表格中的所有数据</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n5/2.png" alt="image"></p><h2 id="联表查询-重点常用开发"><a href="#联表查询-重点常用开发" class="headerlink" title="联表查询(重点常用开发)"></a>联表查询(重点常用开发)</h2><ul><li><strong>相较于上面的多表查询,联表查询就非常的重要了,它将多个表格通过<code>on</code>关键字连接起来,实现联合查询</strong></li></ul><h4 id="联表查询重点分为以下三种情况"><a href="#联表查询重点分为以下三种情况" class="headerlink" title="联表查询重点分为以下三种情况:"></a>联表查询重点分为以下三种情况:</h4><p><img src="/../upload/nodejs/n5/3.png" alt="image"></p><table><thead><tr><th>join</th><th align="center">a是左表，b是右表</th></tr></thead><tbody><tr><td>a inner join b</td><td align="center">表中若至少一个字段匹配，就返回</td></tr><tr><td>a left join b</td><td align="center">从左表中返回所有的值，即使右表中没匹配到</td></tr><tr><td>a right join b</td><td align="center">从右表中返回所有的值，即使左表中没匹配到</td></tr></tbody></table><ol><li><strong><code>inner join</code>(交集)查询两个表格中共有的</strong></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- inner join(交集查询)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score <span class="comment">-- (将c.name设置为class_name)</span></span><br><span class="line"><span class="keyword">FROM</span> student s <span class="comment">-- (左表,这里将student设置为s简写)</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> class c <span class="comment">-- (右表,这里将class设置为c简写)</span></span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id; <span class="comment">-- (查询条件为:学生的班级id = 班级的id)</span></span><br></pre></td></tr></table></figure><ul><li><strong>结果展示:</strong><br><img src="/../upload/nodejs/n5/4.png" alt="image"></li></ul><ol><li><strong><code>left join</code>(查询两个表格中共有的之外并包括上左表格中存在的)</strong></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- left join(左并集查询)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score <span class="comment">-- (将c.name设置为class_name)</span></span><br><span class="line"><span class="keyword">FROM</span> student s <span class="comment">-- (左表,这里将student设置为s简写)</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> class c <span class="comment">-- (右表,这里将class设置为c简写)</span></span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id; <span class="comment">-- (查询条件为:学生的班级id = 班级的id)</span></span><br></pre></td></tr></table></figure><ul><li><strong>结果展示</strong><br><img src="/../upload/nodejs/n5/5.png" alt="image"></li></ul><ol><li><strong><code>right join</code>(查询两个表格中共有的之外并包括上坐标右表格中存在的)</strong></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- right join(右并集查询)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score <span class="comment">-- (将c.name设置为class_name)</span></span><br><span class="line"><span class="keyword">FROM</span> student s <span class="comment">-- (左表,这里将student设置为s简写)</span></span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> class c <span class="comment">-- (右表,这里将class设置为c简写)</span></span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id; <span class="comment">-- (查询条件为:学生的班级id = 班级的id)</span></span><br></pre></td></tr></table></figure><ul><li><strong>结果展示:</strong><br><img src="/../upload/nodejs/n5/6.png" alt="image"></li></ul><ol><li><strong><code>full join</code>(这就是上面多表查询)</strong></li></ol><h2 id="外键约束-重点-结合连表查询"><a href="#外键约束-重点-结合连表查询" class="headerlink" title="外键约束(重点,结合连表查询)"></a>外键约束(重点,结合连表查询)</h2><h3 id="什么是外键约束-为什么需要外键约束"><a href="#什么是外键约束-为什么需要外键约束" class="headerlink" title="什么是外键约束? 为什么需要外键约束"></a>什么是外键约束? 为什么需要外键约束</h3><ul><li><p><strong>外键约束（<code>Foreign Key</code>）即数据库中两个数据表之间的某个列建立的一种联系。这种联系通常是以实际场景中含义完全相同的字段所造成的。<code>MySQL</code>通过外键约束的引入，可以使得数据表中的数据完整性更强，也更符合显示情况。下面，我举一个例子来说明<code>MySQL</code>外键约束的作用。</strong></p></li><li><p><strong>假如我们对大学学生成绩管理系统建立数据库，有两张表，一张表是学生表，存储了学生的学号、姓名、性别、院系等信息，还有一张表是成绩表，存储了学生学号、课程编号、考试成绩等信息。这样，这两张表之间就会通过学生学号建立<code>外键约束</code>。很自然的我们想到，成绩表的学生学号依赖于学生表的学生学号存在，如果一个学生毕业、或者退学，从学生表中删除时，那么他的相关成绩也就没有必要在成绩表中存在了。在没有创建外键关系之前，这两张表完全是独立存在的，我们可以强行在成绩表中插入一个不存在学生的相关成绩，也可以强行删除学生表中的一个学生，并且不管其成绩信息是否在成绩表中存在。但是，在建立外键关系后，<code>MySQL</code>数据库会约束上述两种行为，每次对数据进行<code>插入</code>或者<code>删除</code>时，都会检查数据完整性，使得我们的操作必须符合实际情况。</strong></p></li></ul><h3 id="使用wamp设置表间的外键约束"><a href="#使用wamp设置表间的外键约束" class="headerlink" title="使用wamp设置表间的外键约束"></a>使用<code>wamp</code>设置表间的<code>外键约束</code></h3><ul><li><p><strong>首先将关联的两个表格的存储引擎设置成<code>InnoDB</code>模式</strong><br><img src="/../upload/nodejs/n5/7.png" alt="image"></p></li><li><p><strong>随后跳转到机构页面进行属性的关联</strong><br><img src="/../upload/nodejs/n5/8.png" alt="image"></p></li><li><p><strong>关联的模式如下:</strong></p><ul><li><strong><code>CASCADE</code>: 在父表上update&#x2F;delete记录时，同步update&#x2F;delete掉子表的匹配记录</strong></li><li><strong><code>SET NULL</code>: 在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null (要注意子表的外键列不能为not null)</strong></li><li><strong><code>NO ACTION</code>: 如果子表中有匹配的记录,则不允许对父表对应候选键进行update&#x2F;delete操作</strong></li><li><strong><code>RESTRICT</code>: 同no action, 都是立即检查外键约束</strong></li></ul></li></ul><h4 id="使用RESTRICT-限制模式"><a href="#使用RESTRICT-限制模式" class="headerlink" title="使用RESTRICT(限制模式)"></a><strong>使用<code>RESTRICT</code>(限制模式)</strong></h4><p><img src="/../upload/nodejs/n5/1.gif" alt="image"></p><ul><li><strong>我们无法给不存在的班级添加学生,也不能更改不存在班级的学生,两者是一一对应的</strong></li></ul><h4 id="使用CASCADE"><a href="#使用CASCADE" class="headerlink" title="使用CASCADE"></a><strong>使用<code>CASCADE</code></strong></h4><p><img src="/../upload/nodejs/n5/2.gif" alt="image"></p><ul><li><strong>这样我们在删除或更改班级的时候会连带班级里面的学生一起删掉或更改掉(3班的坤坤消失了,连同3版一起消失的)</strong></li></ul><h4 id="使用SET-NULL-无意义"><a href="#使用SET-NULL-无意义" class="headerlink" title="使用SET NULL(无意义)"></a>使用<code>SET NULL</code>(无意义)</h4><ul><li><strong>改动过后该属性就会变成<code>null</code></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板引擎pug-pug 模板语法的学习</title>
      <link href="/2022/11/03/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8Epug/"/>
      <url>/2022/11/03/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8Epug/</url>
      
        <content type="html"><![CDATA[<h1 id="pug-模板语法的学习"><a href="#pug-模板语法的学习" class="headerlink" title="pug 模板语法的学习"></a><code>pug</code> 模板语法的学习</h1><ul><li><strong><a href="https://www.pugjs.cn/api/getting-started.html">官方文档</a></strong></li><li><strong><code>pug</code> 原名 <code>jade</code> ，因版权问题更名为 <code>pug</code> ，即哈巴狗。 <code>ejs</code> 一样，pug 也是一个模板引擎，可用于快速的网站开发，当然也可以用于静态博客网站的设计。</strong></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pug</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><strong><code>pug</code> 不同于 <code>html</code> ，前者不需要标签的开和闭，如 <code>html</code> 的 <code>&lt;p&gt;Demo&lt;/p&gt;</code> ，在 pug 使用 <code>p Demo</code> 即可。</strong></li></ul><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul><li><strong>pug 对空格敏感，有点类似 python 对制表符tab敏感。pug 使用空格作为缩进符，当然用 <code>soft tab</code> 也可行。同一级标签需保证左对齐。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div</span><br><span class="line">    p Hello, world!</span><br><span class="line">    p Hello, pug.</span><br></pre></td></tr></table></figure><ul><li><strong>渲染结果如下:</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hellow, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, pug.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><strong>pug 使用 <code>//-</code> 或 <code>//</code> 对代码进行注释，前者注释内容不出现在渲染后的 html 文件中，后者反之。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- html中不包含此行</span><br><span class="line">// html中会包含此行</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><strong>pug 将标签属性存放于括号 <code>()</code> 内，多个属性之间以 <code>逗号</code> 或 <code>空格</code> 分隔。此外，对于标签的 <code>id</code> 和 <code>class</code> ，pug 使用 <code>#</code> 紧跟标签 <code>id</code> ,使用 <code>.</code> 紧跟标签 <code>class</code> ，可以同时设置多个 <code>class</code> 。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h1#title Test title</span><br><span class="line">img#name.class1.class2(src=&quot;/test.png&quot; alt=&quot;test&quot;)</span><br></pre></td></tr></table></figure><ul><li><strong>渲染结果如下:</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Test title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class1 class2&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/test.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><ul><li><strong>为了方便代码复用，pug 提供了 <code>include</code> 包含功能，以下代码会将 <code>_partial</code> 目录下的 <code>head.pug</code> 文件内容包含到当前调用的位置。有点 C&#x2F;C++ 中内联函数的意思。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang=&#x27;en&#x27;)</span><br><span class="line">    include _partial/head.pug</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li><strong>下面是一个简单的 <code>base</code> 模板，通过 <code>block</code> 定义了页面头部 <code>head</code> 和内容 <code>body</code> 。块 <code>block</code> 有点类似 C&#x2F;C++ 的抽象函数，需要在继承者中完成定义，填充具体内容。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- base.pug</span><br><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        block title</span><br><span class="line">    body</span><br><span class="line">        block content</span><br></pre></td></tr></table></figure><ul><li><strong>以下文件使用 <code>extends</code> 继承以上模板，通过 <code>block</code> 覆盖或替换原有块 <code>block</code> 。当然，继承者也可以在原有基础上继续扩展。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- index.pug</span><br><span class="line">extends base.pug</span><br><span class="line"></span><br><span class="line">block title</span><br><span class="line">    title &quot;Test title&quot;</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">    h1 Hello world!</span><br><span class="line">    block article</span><br></pre></td></tr></table></figure><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><ul><li><strong>pug中通过 <code>- var name = value</code> 的形式定义变量</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- var intData = 100</span><br><span class="line">- var boolData = false</span><br><span class="line">- var stringData = &#x27;Test&#x27;</span><br><span class="line">p.int= intData</span><br><span class="line">p.bool= boolData</span><br><span class="line">p.stringData= stringData</span><br></pre></td></tr></table></figure><ul><li><p><strong>需注意的是，在引用变量时，需要在引用位置加上&#x3D;号，否则会默认将变量名当成普通字符串使用。</strong></p></li><li><p><strong>如果想要将变量与其它字符串常量或是变量连接在一起，就不能用等号了，而是应该用 <code>#&#123;&#125;</code> ，该符号会对大括号内的变量进行求值和转义，最终得到渲染输出的内容。</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- var girl = &#x27;Lily&#x27;</span><br><span class="line">- var boy = &#x27;Jack&#x27;</span><br><span class="line">p #&#123;girl&#125; is so beautiful!</span><br><span class="line">p And #&#123;boy&#125; is handsome.</span><br></pre></td></tr></table></figure><h3 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h3><ul><li><strong>pug 的条件语句与其它语言类似，均是如下这般：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- var A = &#123;value: &#x27;Test&#x27;&#125;</span><br><span class="line">- var B = true</span><br><span class="line">if A.value</span><br><span class="line">    p= A.value</span><br><span class="line">else if B</span><br><span class="line">    p= B</span><br><span class="line">else</span><br><span class="line">    p nothing</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ul><li><strong>pug 中使用 <code>each</code> 和 <code>while</code> 实现循环迭代，<code>each</code> 可以返回当前所在项的索引值，默认从 <code>0</code> 开始计数。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- each</span><br><span class="line">ol</span><br><span class="line">    each item in [&#x27;Sun&#x27;, &#x27;Mon&#x27;, &#x27;Tus&#x27;, &#x27;Wen&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;]</span><br><span class="line">        li= item</span><br><span class="line"></span><br><span class="line">//- get index of each</span><br><span class="line">- var week = [&#x27;Sun&#x27;, &#x27;Mon&#x27;, &#x27;Tus&#x27;, &#x27;Wen&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;]</span><br><span class="line">ol</span><br><span class="line">    each item, index in week</span><br><span class="line">        li= index + &#x27;:&#x27; + item</span><br></pre></td></tr></table></figure><ul><li><strong>渲染成 html 后：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;Sun&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Mon&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Tus&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Wen&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Thu&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Fri&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Sat&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;0:Sun&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;1:Mon&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;2:Tus&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;3:Wen&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;4:Thu&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;5:Fri&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;6:Sat&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><ul><li><strong><code>while</code> 调用方式如下：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- while</span><br><span class="line">- var day = 1</span><br><span class="line">ul</span><br><span class="line">    while day &lt; 7</span><br><span class="line">        li= day++</span><br></pre></td></tr></table></figure><h3 id="Minix"><a href="#Minix" class="headerlink" title="Minix"></a>Minix</h3><ul><li><strong><code>mixin</code> 名曰混入，类似其它编程语言中的函数，也是为了代码复用，可带参数或不带参数，定义方式如下：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mixin menu-item(href, name)</span><br><span class="line">    li</span><br><span class="line">        span.dot ●</span><br><span class="line">        a(href=href)= name</span><br></pre></td></tr></table></figure><ul><li><p><strong>其中，<code>menu-item</code> 为调用时所用名称，可认为是函数名，<code>href</code> 及 <code>name</code> 是参数。同上定义变量所说，<code>a(href=href)= name</code> 中第二个 <code>=</code> 是为了将后面的 <code>name</code> 当作参数来处理，而不是当作字符串 <code>&quot;name&quot;</code> 来处理。</strong></p></li><li><p><strong>调用 <code>mixin</code> 定义的代码块，需通过 <code>+</code> 号紧跟 <code>mixin</code> 名称及参数:</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+menu-item(&#x27;/Archives&#x27;,&#x27;Archives&#x27;)</span><br><span class="line">+menu-item(&#x27;/About&#x27;,&#x27;About&#x27;)</span><br></pre></td></tr></table></figure><ul><li><strong>mixin<code>之所以称为混入，是因为其语法不局限于函数调用，在</code>mixin<code>可以使用块</code>block</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mixin print(post)</span><br><span class="line">    if block</span><br><span class="line">        block</span><br><span class="line">    else</span><br><span class="line">        p= post</span><br><span class="line"></span><br><span class="line">+print(&quot;no block&quot;)</span><br><span class="line">+print(&quot;&quot;)</span><br><span class="line">    div.box</span><br><span class="line">        p this is the content of block</span><br></pre></td></tr></table></figure><ul><li><strong>对应 html 代码：</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>no block<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>this is the content of block<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li><strong>注意以下 <code>pug</code> 语句中第一行的 <code>.</code> 号。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script(type=&#x27;text/javascript&#x27;).</span><br><span class="line">    var data = &quot;Test&quot;</span><br><span class="line">    var enable = true</span><br><span class="line">    if enable</span><br><span class="line">        console.log(data)</span><br><span class="line">    else</span><br><span class="line">        console.log(&#x27;nothing&#x27;)</span><br></pre></td></tr></table></figure><ul><li><strong>对应的 JS 代码如下：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&#x27;text/javascript&#x27;&gt;</span><br><span class="line">    var data = &quot;Test&quot;</span><br><span class="line">    var enable = true</span><br><span class="line">    if enable</span><br><span class="line">        console.log(data)</span><br><span class="line">    else</span><br><span class="line">        console.log(&#x27;nothing&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>对于简单脚本，使用 pug 尚可，复杂的还是单独写到 <code>.js</code> 文件中，然后通过 pug 引用方便一些，引用方式如下</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script(type=&#x27;text/javascript&#x27;, src=&#x27;/path/to/js&#x27;)</span><br><span class="line"></span><br><span class="line">//- with hexo function url_for</span><br><span class="line">script(type=&#x27;text/javascript&#x27;, src=url_for(theme.js) + &#x27;/ready.js&#x27;)</span><br></pre></td></tr></table></figure><h3 id="include语法"><a href="#include语法" class="headerlink" title="include语法"></a>include语法</h3><p><code>include</code> 语法可以用来包含公共的一些模板来引用指定模板</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include public.pug // 当前文件夹下, 同目录下的 pug模板</span><br><span class="line"></span><br><span class="line"># 查找 assets目录下的 assets.pug 模板</span><br><span class="line">include assets/assets.pug</span><br></pre></td></tr></table></figure><blockquote><p>这篇博客引用了作者为”<strong>义含遗憾</strong>“的文章<br>原文链接为:<a href="https://cloud.tencent.com/developer/user/1351255">腾讯云</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express框架 </tag>
            
            <tag> 模板引擎 </tag>
            
            <tag> pug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(10)-express框架学习(4)-pug模板引擎的基本使用以及express生成器</title>
      <link href="/2022/11/03/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010/"/>
      <url>/2022/11/03/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010/</url>
      
        <content type="html"><![CDATA[<h1 id="express模板引擎-服务端渲染"><a href="#express模板引擎-服务端渲染" class="headerlink" title="express模板引擎(服务端渲染)"></a><code>express</code>模板引擎(服务端渲染)</h1><h2 id="为什么需要模板引擎"><a href="#为什么需要模板引擎" class="headerlink" title="为什么需要模板引擎?"></a>为什么需要模板引擎?</h2><ul><li><p><strong>我们都知道,使用<code>express</code>框架能够很快的搭建一个服务器,服务器能够向,前端返回接口数据,渲染页面亦或者返回一段<code>html</code>的代码片段,但是我们要将代码片段写在<code>res.send(&#39;这里面&#39;)</code>,就显得非常的麻烦和复杂,并且我们在加载静态资源的时候,通过请求<code>url</code>来发送请求,而<code>url</code>后面就需要携带<code>.html</code>为后缀,这就非常的不好看,因此就衍生了<code>模板引擎</code>!</strong></p></li><li><p><strong>使用模板引擎过后,在程序运行时，模板引擎使用实际的值替换模板文件中的变量，并将模板转换为要发送给客户端的<code>HTML</code>文件。这种方法使得设计<code>HTML</code>页面变得更加容易，轻松实现数据与视图分离，有利于大型项目中的前后端开发的分工协作。</strong></p></li></ul><h2 id="安装pug模板引擎"><a href="#安装pug模板引擎" class="headerlink" title="安装pug模板引擎"></a>安装<code>pug</code>模板引擎</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pug --save</span><br></pre></td></tr></table></figure><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录:"></a>项目目录:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── dist</span><br><span class="line">|└── js</span><br><span class="line">|└── js.<span class="property">js</span></span><br><span class="line">├── app.<span class="property">js</span></span><br><span class="line">└── view</span><br><span class="line">    ├── home.<span class="property">pug</span></span><br><span class="line">└── style.<span class="property">css</span></span><br></pre></td></tr></table></figure><h3 id="重点设置"><a href="#重点设置" class="headerlink" title="重点设置:"></a>重点设置:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入pug模板</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;view&#x27;</span>));<span class="comment">//__dirname表示当前目录下</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;pug&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong><code>app.js</code>(服务器)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pug模板引擎的基本使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span> , <span class="string">&#x27;pug&#x27;</span>)<span class="comment">//指定模板解析引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span> , <span class="string">&#x27;./views&#x27;</span>)<span class="comment">//指定模板代码的读取目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将dist中的所有文件变成静态资源托管到服务器上</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送get请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 模板引擎最重要的一点:能够将服务器中的参数传给前端页面</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;<span class="comment">//通过对象的形式</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;lam&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用render函数来解析pug模板(views文件夹下的home.pug)</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;home&#x27;</span>,obj)<span class="comment">//渲染模板后返回给前端,并且携带参数</span></span><br><span class="line">    <span class="comment">// 相较于send(),render()只能解析模板,但send()能发送接口数据和解析html片段</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器已启动,端口3000正在监听...`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong><code>home.pug</code>(渲染模板)</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang=&quot;en&quot;)</span><br><span class="line">    head</span><br><span class="line">        meta(charset=&quot;UTF-8&quot;)</span><br><span class="line">        meta(http-equiv=&quot;X-UA-Compatible&quot;, content=&quot;IE=edge&quot;)</span><br><span class="line">        meta(name=&quot;viewport&quot;, content=&quot;width=device-width, initial-scale=1.0&quot;)</span><br><span class="line">        title 首页</span><br><span class="line">        //- 引入js(非同一目录下)</span><br><span class="line">        script </span><br><span class="line">            include ../dist/js/js.js</span><br><span class="line">        //- 引入css样式(同一目录)</span><br><span class="line">        style </span><br><span class="line">            include style.css </span><br><span class="line">    body </span><br><span class="line">        h1 你好! pug</span><br><span class="line">        p(class=&#x27;h&#x27;) this is #&#123;name&#125;&#x27;s website</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n4/7.png" alt="image"></p><h1 id="express生成器"><a href="#express生成器" class="headerlink" title="express生成器"></a><code>express</code>生成器</h1><ul><li><strong><a href="https://www.expressjs.com.cn/starter/generator.html">官方文档</a></strong></li><li><strong>express项目生成器，是一个<code>nodejs</code>程序,类似与脚手架，可以帮助我们快速搭建一个<code>express</code>项目。</strong></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h2><ol><li><strong>首先要安装<code>express-generator</code>(生成器)这个express项目生成器工具</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 可以使用npx进行安装(但是Nodejs必须在8.2.0及更高版本才行)</span><br><span class="line">$ npx express-generator</span><br><span class="line"> </span><br><span class="line">// 相对于较老的Nodejs版本 建议还是用npm将express-generator安装到全局中使用</span><br><span class="line">$ npm install -g express-generator</span><br><span class="line">//安装完毕后可以在命令行输入 express 检查是否安装成功</span><br><span class="line"> </span><br><span class="line">// -h 参数可以列出所有可用的命令行参数</span><br><span class="line">$ express -h</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>创建项目</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 创建项目  这样直接就可以快速的创建出一个项目 但是这样默认使用的是jade模板</span><br><span class="line">$ express 项目名    </span><br><span class="line"> </span><br><span class="line">// 如果想要使用别的模板 则用 --view=[模板名] 创建项目</span><br><span class="line">// 这里演示pug模板项目创建</span><br><span class="line">$ express 项目名 --view=pug</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>项目结构</strong></li></ol><ul><li><p><strong>将创建好的项目在<code>vscode</code>中打开 可看到如下项目结构</strong><br><img src="/../upload/nodejs/n4/8.png" alt="image"></p></li><li><p><strong>可以看到,项目的模板是<code>pug</code>，还有就是项目并没有帮我们安装依赖，那么我们就需要自己手动安装项目的依赖</strong></p></li><li><p><strong>项目<code>根目录</code>下有4个自带的文件夹</strong></p><ul><li><strong><code>bin</code>:存放项目源代码的文件夹。</strong></li><li><strong><code>public</code>:项目静态文件夹。</strong></li><li><strong><code>routers</code>:存放路由的文件夹。</strong></li><li><strong><code>views</code>:存放模板的文件夹。</strong></li></ul></li><li><p><strong>这里讲解一下一个很重要的文件<code>app.js</code></strong></p><ul><li><strong><code>app.js</code>引入各种模块包，其中最重要是<code>express</code>框架，使用框架包创建应用程序实例，在应用程序运行过程中，需要其他模块包配合它。比如：<code>http-error</code>记录请求过程中的错误信息。再比如<code>morgan</code>记录请求日志.</strong></li><li><strong>再比如<code>cookie-parser</code>记录<code>cookie</code>解析。还是<code>express.json()</code>，<code>express.urlencoded()</code>。相对比较重要的路由中间件（必须掌握如何定义路由）。</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    http-errors 这个模块包主要是监听在请求的过程中出现的错误和错误信息，</span></span><br><span class="line"><span class="comment">    是一个中间件本质也是一个模块，其实是一个函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">&#x27;http-errors&#x27;</span>);</span><br><span class="line"><span class="comment">// 语句-&gt;函数-&gt;脚本库-&gt;模块-&gt;框架-&gt;平台</span></span><br><span class="line"><span class="comment">// 引入express模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入path模块，路径</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 主要对cookie进行设置或者获取的功能</span></span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 主要是负责服务器日志</span></span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入的路由文件</span></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建服务器对象</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 设置服务器对象的中间件</span></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line"><span class="comment">// 模板渲染的页面所存放的位置</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"><span class="comment">// 使用的渲染语法</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&#x27;dev&#x27;</span>));</span><br><span class="line"><span class="comment">// 使用json解析对象或者字符串</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"><span class="comment">// 使用两个路由文件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line"><span class="comment">// 可以为一个路由文件的接口添加前缀,把路由前缀加上/users/</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/users&#x27;</span>, usersRouter);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// catch 404 and forward to error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// next把本次请求传递给另一个中间件,如果没有next,服务器就没有响应.</span></span><br><span class="line">  <span class="comment">// 每一次请求都要走中间件,中间件会对请求进行加工然后再给服务器</span></span><br><span class="line">  <span class="title function_">next</span>(<span class="title function_">createError</span>(<span class="number">404</span>));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">message</span> = err.<span class="property">message</span>;</span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">error</span> = req.<span class="property">app</span>.<span class="title function_">get</span>(<span class="string">&#x27;env&#x27;</span>) === <span class="string">&#x27;development&#x27;</span> ? err : &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  res.<span class="title function_">status</span>(err.<span class="property">status</span> || <span class="number">500</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>安装依赖</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 进入到项目的根目录</span><br><span class="line">$ <span class="built_in">cd</span> myapp</span><br><span class="line">// 进行依赖的安装</span><br><span class="line">$ npm install || npm i</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>项目的启动</strong></li></ol><ul><li><p><strong>打开项目中的<code>package.json</code>文件可以看到</strong><br><img src="/../upload/nodejs/n4/9.png" alt="image"></p></li><li><p><strong>默认帮我们生成了一个<code>start</code> 命令 运行当前项目<code>bin</code>目录下的<code>www</code>文件 其实这个文件就相当于这个项目的入口文件</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 启动项目 在项目的根目录下打开终端 运行下面命令就可以运行项目了</span><br><span class="line">$ npm run start</span><br><span class="line"> </span><br><span class="line">// 也可以使用 以下命令来启动项目 因为www文件就是我们项目的有个入口文件</span><br><span class="line">$ node ./bin/www</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>项目的热更新</strong></li></ol><ul><li><p><strong>上面的项目启动方式 当我们项目早运行的过程中修改代码 浏览器中的内容是不会自动更新的这时就需要我们重启项目 这样给我们开发项目带来非常的不便 这时我们就可以使用<code>热部署</code>模块来改造我们的项目</strong></p></li><li><p><strong>下面我就推荐两款热部署工具 当代码被修改时项目会重新启动</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 第一款 node-dev </span><br><span class="line">// 安装命令 如下  </span><br><span class="line">$ npm install -g node-dev</span><br><span class="line">//安装完后就可以用如下命令来启动项目了 当项目代码修改时启动的项目的内容也会发生变化</span><br><span class="line">$  node-dev [文件名]</span><br><span class="line"> </span><br><span class="line">// 第二款 nodemon</span><br><span class="line">// 安装命令如下</span><br><span class="line">$ npm install -g nodemon</span><br><span class="line">//安装完后就可以用如下命令来启动项目了 当项目代码修改时启动的项目的内容也会发生变化</span><br><span class="line">$ nodemon [文件名]</span><br></pre></td></tr></table></figure><ul><li><strong>这样我们就可以修改 <code>package.json</code> 里面的启动命令 来达到一个项目热部署的效果 这里,我将start 改成了 <code>&quot;start&quot;: &quot;nodemon ./bin/www&quot;</code></strong></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon ./bin/www&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/nodejs/n4/10.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express框架 </tag>
            
            <tag> 模板引擎 </tag>
            
            <tag> 服务端渲染 </tag>
            
            <tag> express生成器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(9)-express框架学习(3)-获取get和post请求的参数和托管静态资源</title>
      <link href="/2022/11/03/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/"/>
      <url>/2022/11/03/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/</url>
      
        <content type="html"><![CDATA[<h1 id="使用express框架获取get和post请求的参数"><a href="#使用express框架获取get和post请求的参数" class="headerlink" title="使用express框架获取get和post请求的参数"></a>使用<code>express</code>框架获取<code>get</code>和<code>post</code>请求的参数</h1><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong><code>获取get和post的请求参数.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// express框架 - 获取get和post的请求参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建app服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析post参数的两个内置中间件</span></span><br><span class="line"><span class="comment">// 通过express.json()这个中间件，解析表单中的JSON格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())<span class="comment">//解析post的请求题参数(json格式)</span></span><br><span class="line"><span class="comment">// 通过express.urlencoded()这个中间件，来解析表单中的url-encoded格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))<span class="comment">//解析post的请求题参数(encoded格式)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.发送请求get请求获取请求参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 现在我们可以直接使用express的内置语法来获取get请求的参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);<span class="comment">//使用req.query来获取get请求参数</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="string">&quot;ok&quot;</span>:<span class="number">1</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.发送post请求获取请求参数</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 现在我们可以直接使用express的内置语法来获取post请求的参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);<span class="comment">//使用req.body来获取post请求参数</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="string">&quot;ok&quot;</span>:<span class="number">1</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动! 端口3000正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a><strong><code>get</code>请求</strong></h4><ul><li><p><strong>发送请求</strong><br><img src="/../upload/nodejs/n4/2.gif" alt="image"></p></li><li><p><strong>终端输出结果</strong><br><img src="/../upload/nodejs/n4/4.png" alt="image"></p></li></ul><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a><code>post</code>请求</h4><ul><li><p><strong>发送请求(两种格式:<code>json</code>和<code>encoding</code>)</strong><br><img src="/../upload/nodejs/n4/3.gif" alt="image"></p></li><li><p><strong>终端输出结果</strong><br><img src="/../upload/nodejs/n4/5.png" alt="image"></p></li></ul><h1 id="托管静态资源-内置中间件"><a href="#托管静态资源-内置中间件" class="headerlink" title="托管静态资源(内置中间件)"></a>托管静态资源(内置中间件)</h1><ul><li><strong>通过 <code>Express</code> 内置的 <code>express.static</code> 可以方便地托管静态文件，例如图片、<code>CSS</code>、<code>JavaScript</code> 文件等。</strong></li><li><strong>将静态资源文件所在的目录作为参数传递给 <code>express.static</code> 中间件就可以提供静态资源文件的访问了。例如，假设在 <code>public</code> 目录放置了图片、<code>CSS</code> 和 <code>JavaScript</code> 文件，你就可以：</strong></li></ul><ol><li><strong>直接使用<code>express.static(&#39;文件夹名(目录名)&#39;)</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用app.use来使用这个内置的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>随后你就可以在浏览器中输入对应的<code>url</code>来访问对应的静态资源了</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切记,这种方法是不需要在url中填该静态资源的文件夹名的</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/images/kitten.jpg</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/css/style.css</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/js/app.js</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/images/bg.png</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/hello.html</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用注册中间件的方式:<code>express.static(&#39;/文件夹名(目录名)&#39;,&#39;文件夹名(目录名)&#39;)</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/static&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>现在，你就可以通过带有 “&#x2F;static” 前缀的地址来访问 public 目录下面的文件了。</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/static/images/kitten.jpg</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/static/css/style.css</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/static/js/app.js</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/static/images/bg.png</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/static/hello.html</span></span><br></pre></td></tr></table></figure><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><p><strong>路径关系</strong><br><img src="/../upload/nodejs/n4/6.png" alt="image"></p></li><li><p><strong><code>index.js</code>(调用)</strong></p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// express框架 - 托管静态资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建app服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析静态资源的内置中间件的两个用法</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))<span class="comment">//直接配置同目录下的文件名即可</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/uploads&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;uploads&#x27;</span>))<span class="comment">//可以配置成路由的模式</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动! 端口3000正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n4/4.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express框架 </tag>
            
            <tag> get </tag>
            
            <tag> post </tag>
            
            <tag> 托管静态资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(8)-express框架学习(2)-express中间件</title>
      <link href="/2022/11/03/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/"/>
      <url>/2022/11/03/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/</url>
      
        <content type="html"><![CDATA[<h1 id="express中间件"><a href="#express中间件" class="headerlink" title="express中间件"></a><code>express</code>中间件</h1><ul><li><p><strong><code>Express</code> 是一个自身功能极简，完全是由路由和中间件构成一个的 <code>web</code> 开发框架：从本质上来说，一个 <code>Express</code> 应用就是在调用各种中间件。</strong></p></li><li><p><strong>中间件（<code>Middleware</code>） 是一个函数，它可以访问请求对象（<code>request object (req)</code>）, 响应对象（<code>response object (res)</code>）, 和 web 应用中处于请求-响应循环流程中的中间件，一般被命名为 <code>next</code> 的变量。</strong></p></li><li><p><strong>中间件的功能包括：</strong></p><ul><li><strong>执行任何代码。</strong></li><li><strong>修改请求和响应对象。</strong></li><li><strong>终结请求-响应循环。</strong></li><li><strong>调用堆栈中的下一个中间件。</strong></li></ul></li><li><p><strong>如果当前中间件没有终结请求-响应循环，则必须调用 next() 方法将控制权交给下一个中间件，否则请求就会挂起。</strong></p></li><li><p><strong><code>Express</code> 应用可使用如下几种中间件：</strong></p><ul><li><strong>应用级中间件</strong></li><li><strong>路由级中间件</strong></li><li><strong>错误处理中间件</strong></li><li><strong>内置中间件</strong></li><li><strong>第三方中间件</strong></li></ul></li><li><p><strong>使用可选则挂载路径，可在应用级别或路由级别装载中间件。另外，你还可以同时装在一系列中间件函数，从而在一个挂载点上创建一个子中间件栈。</strong></p></li></ul><h2 id="1-应用级中间件"><a href="#1-应用级中间件" class="headerlink" title="1.应用级中间件"></a>1.应用级中间件</h2><ul><li><strong>应用级中间件绑定到 <code>app </code>对象 使用 <code>app.use()</code> 和 <code>app.METHOD()</code>， 其中， <code>METHOD</code> 是需要处理的 <code>HTTP</code> 请求的方法，例如 <code>GET, PUT, POST</code> 等等，全部小写。</strong></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// express中间件 - 应用级别中间件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    我们已经知道,中间件其实就是一个回调函数,express框架中存在很多中间件</span></span><br><span class="line"><span class="comment">    这里我们展示 应用级别中间件的使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用方法:</span></span><br><span class="line"><span class="comment">    应用级中间件一般是绑定到app.use()或app.Method()(app.get,app.post)中来使用的,</span></span><br><span class="line"><span class="comment">    里面传递两个参数(&#x27;path&#x27; , 回调函数)其中,path为可选的</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入 express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建中间件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addToken</span>(<span class="params">req, res, next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;检查Token&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.全局注册中间件(不传入path参数),use后面所有的请求都要经过这个中间件</span></span><br><span class="line"><span class="comment">// app.use(addToken)//发送两个请求过后控制台输出两次&quot;检查Token&quot;(证明调用了两次中间件)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.指定路径使用中间件(传入path参数),单独该路径才调用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/login&#x27;</span>,addToken)<span class="comment">//只有发送`/login`,是控制台才会出输出&quot;检查Token&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> , <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;你好! home!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span> , <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;你好! login!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动! 端口3000正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>全局调用(没有加入<code>path</code>参数)</strong><br><img src="/../upload/nodejs/n4/1.png" alt="image"></p></li><li><p><strong>指定调用(加入指定的<code>path</code>参数)</strong><br><img src="/../upload/nodejs/n4/2.png" alt="image"></p></li></ul><h2 id="2-路由级中间件"><a href="#2-路由级中间件" class="headerlink" title="2.路由级中间件"></a>2.路由级中间件</h2><ul><li><strong>路由级中间件和应用级中间件一样，只是它绑定的对象为 <code>express.Router()</code>。</strong></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong>创建路由(<code>router.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line"><span class="comment">// 1.引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.创建路由</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置路由(二级请求url地址)</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> , <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;你好! 首页!!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span> , <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;你好! home!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span> , <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;你好! login!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露路由</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><ul><li><strong>路由级中间件的调用(<code>路由级别中间件.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// express中间件 - 路由级别中间件</span></span><br><span class="line"><span class="comment">// 路由级中间件和应用级中间件是非常相似的，只是它绑定的对象为 express.Router()。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入 express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 3.引入路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router/router.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册应用级别中间件(设置为全局引用)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;验证Token&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由级别(控制一级匹配,先进入&#x27;/&#x27;,在进入路由)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动! 端口3000正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>浏览器中发送请求</strong><br><img src="/../upload/nodejs/n4/1.gif" alt="image"></p></li><li><p><strong>终端中显示</strong><br><img src="/../upload/nodejs/n4/3.png" alt="image"></p></li></ul><h2 id="3-错误级中间件"><a href="#3-错误级中间件" class="headerlink" title="3.错误级中间件"></a>3.错误级中间件</h2><ul><li><strong>错误处理中间件和其他中间件定义类似，只是要使用 4 个参数，而不是 3 个，其签名如下： <code>(err, req, res, next)</code>。</strong></li><li><strong>一般写在前所有中间件的最后面,用于捕获整个项目的错误,防止程序崩溃</strong></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong>这里就展示js文件,<code>router</code>是沿用上面的路由中间件的</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// express中间件 - 错误级别中间件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    错误处理中间件和其他中间件定义类似，只是要使用 4 个参数，</span></span><br><span class="line"><span class="comment">    而不是 3 个，其签名如下： (err, req, res, next)。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入 express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 3.引入路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router/router.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册应用级别中间件(设置为全局引用)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;验证Token&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由级别(控制一级匹配,先进入&#x27;/&#x27;,在进入路由)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误级别中间件(一般是放在中间件的最后面用于捕获项目中的错误)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err , req, res , next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 捕获错误的时候首先要将状态码改为404或者500</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;???&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;???&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动! 端口3000正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><strong>当访问到不存在的路由<code>url</code>时,就会在浏览器中报错,并且请求状态码为<code>404</code></strong></li></ul><h2 id="4-内置中间件"><a href="#4-内置中间件" class="headerlink" title="4.内置中间件"></a>4.内置中间件</h2><ul><li><p><strong>自 <code>Express 4.16.0</code> 版本开始，<code>Express</code> 内置了 3 个常用的中间件，极大的提高了 <code>Express</code> 项目的开发效率和体验</strong></p><ul><li><strong><code>express.static</code> 快速托管静态资源的内置中间件，例如： HTML 文件、图片、<code>CSS</code> 样式等（无兼容性）</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))<span class="comment">//public表示目标文件夹的名字</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;uploads&#x27;</span>))<span class="comment">//同上</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;files&#x27;</span>))<span class="comment">//同上</span></span><br></pre></td></tr></table></figure><ul><li><p><strong><code>express.json</code> 解析 <code>JSON</code> 格式的请求体数据[<code>post</code>]（</strong>有兼容性<strong>，仅在 <code>4.16.0+</code> 版本中可用）</strong></p></li><li><p><strong><code>express.urlencoded</code> 解析 <code>URL-encoded</code> 格式的请求体数据（</strong>有兼容性<strong>，仅在 <code>4.16.0+</code> 版本中可用）其实多用于解析<code>post</code>请求参数的</strong></p></li></ul></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建express的服务实例</span></span><br><span class="line"><span class="keyword">const</span> app= <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：除了错误级别的中间件，其他的中间件，必须在路由之前进行配置</span></span><br><span class="line"><span class="comment">// 通过express.json()这个中间件，解析表单中的JSON格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"><span class="comment">// 通过express.urlencoded()这个中间件，来解析表单中的url-encoded格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))<span class="comment">//其实就是解析post参数的</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//在服务器，可以使用req.body这个属性，来接收客户端发过来的请求体数据</span></span><br><span class="line">    <span class="comment">//默认情况下，如果不配置解析表单数据的中间件，则req.body默认等于undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/book&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 在服务器端，可以通过req.body来获取JSON格式的表单数据和url-encoded格式的数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;okk&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 调用app.listen方法,指定端口号并启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="static用法在后面的托管静态资源中会详细讲解"><a href="#static用法在后面的托管静态资源中会详细讲解" class="headerlink" title="static用法在后面的托管静态资源中会详细讲解"></a><code>static</code>用法在后面的托管静态资源中会详细讲解</h3><h2 id="5-第三方中间件"><a href="#5-第三方中间件" class="headerlink" title="5.第三方中间件"></a>5.第三方中间件</h2><ul><li><strong>这个其实就是引用第三方的中间件而已,安装所需功能的 node 模块，并在应用中加载，可以在应用级加载，也可以在路由级加载。</strong></li></ul><h3 id="实行流程"><a href="#实行流程" class="headerlink" title="实行流程"></a>实行流程</h3><ol><li><strong>安装第三方中间件</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i xxx</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用<code>require</code>导入中间件</strong></li><li><strong>调用<code>app.use()</code>注册并使用中间件</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express框架 </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(7)-express框架学习(1)-创建基本服务器以及基本路由</title>
      <link href="/2022/11/03/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/"/>
      <url>/2022/11/03/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/</url>
      
        <content type="html"><![CDATA[<h1 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a><code>express</code>框架</h1><ul><li><p><strong><a href="https://www.expressjs.com.cn/">官方文档</a></strong></p></li><li><p><strong><code>Express</code>是目前流行的基于<code>Node.js</code>运行环境的<code>Web</code>应用程序开发框架，它简洁且灵活，为<code>Web</code>应用程序提供了强大的功能。<code>Express</code>提供了一个轻量级模块，类似于<code>jQuery</code>（封装的工具库），它把<code>Node.js</code>的<code>HTTP</code>模块的功能封装在一个简单易用的接口中，用于扩展<code>HTTP</code>模块的功能，能够轻松地处理服务器的路由、响应、<code>Cookie</code>和<code>HTTP</code>请求的状态。</strong></p></li><li><p><strong>Express的优势：</strong></p><ol><li><strong>简洁的路由定义方式。</strong></li><li><strong>简化<code>HTTP</code>请求参数的处理。</strong></li><li><strong>提供中间件机制控制<code>HTTP</code>请求。</strong></li><li><strong>拥有大量第三方中间件。</strong></li><li><strong>支持多种模版引擎。</strong></li></ol></li></ul><h3 id="安装express框架"><a href="#安装express框架" class="headerlink" title="安装express框架"></a>安装<code>express</code>框架</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 项目初始化</span><br><span class="line">npm init -y</span><br><span class="line">// 安装</span><br><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><h2 id="创建最基本的服务器"><a href="#创建最基本的服务器" class="headerlink" title="创建最基本的服务器"></a>创建最基本的服务器</h2><ul><li><strong>index.js</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// express框架 - 创建最简单的服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建app服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.发送请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 不再需要独立设置响应头,能够自动解析要发送的东西,如接口数据和html片段等</span></span><br><span class="line">    <span class="comment">// 这里使用了res.send方法取代了write()和end()方法(但是也可以使用)</span></span><br><span class="line">    <span class="comment">// res.send(&#x27;你好! express!!&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送html片段</span></span><br><span class="line">    <span class="comment">// res.send(`</span></span><br><span class="line">    <span class="comment">//     &lt;html&gt;</span></span><br><span class="line">    <span class="comment">//         &lt;h1&gt;hello! express!&lt;/h1&gt;</span></span><br><span class="line">    <span class="comment">//     &lt;/html&gt;</span></span><br><span class="line">    <span class="comment">// `)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送接口数据</span></span><br><span class="line">    res.<span class="title function_">send</span>(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;lam&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="string">&#x27;100&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动! 端口3000正在监听...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h2><ul><li><strong>路由是指如何定义应用的端点（<code>URIs</code>）以及如何响应客户端的请求。</strong></li><li><strong>路由是由一个 <code>URI、HTTP</code> 请求（<code>GET、POST</code>等）和若干个句柄组成，它的结构如下： <code>app.METHOD(path, [callback...], callback)， app</code> 是 <code>express</code> 对象的一个实例， <code>METHOD</code> 是一个 <code>HTTP</code> 请求方法， <code>path</code> 是服务器上的路径， <code>callback</code> 是当路由匹配时要执行的函数。</strong></li></ul><h3 id="路由的请求路径支持三种方式-字符串模式-纯字符串以及正则表达式"><a href="#路由的请求路径支持三种方式-字符串模式-纯字符串以及正则表达式" class="headerlink" title="路由的请求路径支持三种方式:字符串模式,纯字符串以及正则表达式"></a>路由的请求路径支持三种方式:字符串模式,纯字符串以及正则表达式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.纯字符串[常用](&#x27;/home&#x27;, &#x27;/random.text&#x27;..等)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 不再需要独立设置响应头,能够自动解析要发送的东西,如接口数据和html片段等</span></span><br><span class="line">    <span class="comment">// 这里使用了res.send方法取代了write()和end()方法(但是也可以使用)</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;你好! express!!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.字符串模式</span></span><br><span class="line"><span class="comment">// 匹配 acd 和 abcd</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab?cd&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ab?cd&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 /ab/任何东西,如111,222,:id表示占位符,后面可以跟任何东西</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab/:id&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;aaaaaaa&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 abcd、abbcd、abbbcd等</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab+cd&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ab+cd&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab*cd&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ab*cd&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 /abe 和 /abcde</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab(cd)?e&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ab(cd)?e&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.正则表达式模式</span></span><br><span class="line"><span class="comment">// 匹配任何路径中含有 a 的路径：</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="regexp">/a/</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;/a/&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 fly结尾，</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="regexp">/.*fly$/</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;/.*fly$/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><ul><li><p><strong><code>express</code>路由可以为请求处理提供多个回调函数(我们姑且就可以将这些回调函数成为中间件)，其行为类似 中间件。唯一的区别是这些回调函数有可能调用 <code>next(&#39;route&#39;)</code> 方法而略过其他路由回调函数。可以利用该机制为路由定义前提条件，如果在现有路径上继续执行没有意义，则可将控制权交给剩下的路径。</strong></p></li><li><p><strong>使用多个回调函数处理路由（记得指定 <code>next</code> 对象）：</strong></p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/example/b&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response will be sent by the next function ...&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello from B!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>使用回调函数数组处理路由：</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cb0 = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CB0&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb1 = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CB1&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb2 = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello from C!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/example/c&#x27;</span>, [cb0, cb1, cb2])</span><br></pre></td></tr></table></figure><ul><li><strong>混合使用函数和函数数组处理路由：</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cb0 = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CB0&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> cb1 = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CB1&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, [cb0, cb1], <span class="function">(<span class="params">req, res, next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response will be sent by the next function ...&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello from D!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>这里结果:<code>CB0 =&gt; CB1 =&gt; response will be sent by the next function ...</code></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express框架 </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(6)-配置路由(原生理论)</title>
      <link href="/2022/11/01/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/"/>
      <url>/2022/11/01/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</url>
      
        <content type="html"><![CDATA[<h1 id="nodejs配置路由"><a href="#nodejs配置路由" class="headerlink" title="nodejs配置路由"></a><code>nodejs</code>配置路由</h1><ul><li><strong>这篇博客就使用原生的<code>node</code>来配置路由,涉及路由的基本跳转, 获取请求参数,页面路由和<code>api</code>接口路由的合并封装,直接上代码了</strong></li></ul><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h2><ul><li><strong>页面路由(<code>route.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置路由转向</span></span><br><span class="line"><span class="comment">// 引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs =<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染函数render</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">res,path,type=<span class="string">&quot;&quot;</span></span>)&#123;<span class="comment">//第三个参数为文件读取格式</span></span><br><span class="line">    <span class="comment">// 设置响应头(文件和文字的读取格式)</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">`<span class="subst">$&#123;type?type:<span class="string">&quot;text/html&quot;</span>&#125;</span>;charset=utf8`</span> &#125;)</span><br><span class="line">    res.<span class="title function_">write</span>(fs.<span class="title function_">readFileSync</span>(path), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1 : 将路由的转向设置成一个函数</span></span><br><span class="line"><span class="comment">// function route(res , url)&#123;</span></span><br><span class="line"><span class="comment">//     switch(url)&#123;</span></span><br><span class="line"><span class="comment">//         case &#x27;/login&#x27;:</span></span><br><span class="line"><span class="comment">//             render(res,&#x27;./static/login.html&#x27;)</span></span><br><span class="line"><span class="comment">//             break;</span></span><br><span class="line"><span class="comment">//         case &#x27;/home&#x27;:</span></span><br><span class="line"><span class="comment">//             render(res , &#x27;./static/home.html&#x27;)</span></span><br><span class="line"><span class="comment">//             break;</span></span><br><span class="line"><span class="comment">//         default : </span></span><br><span class="line"><span class="comment">//             render(res , &#x27;./static/404.html&#x27;)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2 : 将路由的转向设置成一个对象</span></span><br><span class="line"><span class="keyword">const</span> route = &#123;</span><br><span class="line">    <span class="string">&quot;/login&quot;</span>:<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">render</span>(res,<span class="string">&quot;./static/login.html&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;/home&quot;</span>:<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">render</span>(res,<span class="string">&quot;./static/home.html&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;/404&quot;</span>:<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html;charset=utf8&quot;</span> &#125;)</span><br><span class="line">        res.<span class="title function_">write</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./static/404.html&quot;</span>), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        res.<span class="title function_">end</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = route</span><br></pre></td></tr></table></figure><ul><li><strong><code>api</code>接口路由,<code>get,post</code>(<code>api.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// api接口路由 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建页面的渲染函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">res,data,type=<span class="string">&quot;&quot;</span></span>)&#123;<span class="comment">//接收3个参数()</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">`<span class="subst">$&#123;type?type:<span class="string">&quot;application/json&quot;</span>&#125;</span>;charset=utf8`</span> &#125;)</span><br><span class="line">    res.<span class="title function_">write</span>(data)</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// api接口路由的设置</span></span><br><span class="line"><span class="keyword">const</span> apiRouter = &#123;</span><br><span class="line">    <span class="string">&quot;/api/login&quot;</span>:<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;<span class="comment">//get请求</span></span><br><span class="line">        <span class="comment">// 获取url上的参数</span></span><br><span class="line">        <span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span>,<span class="string">&quot;http://127.0.0.1&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(myURL.<span class="property">searchParams</span>);</span><br><span class="line">        <span class="comment">// 设置登录判断</span></span><br><span class="line">        <span class="keyword">if</span>(myURL.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&quot;username&quot;</span>)===<span class="string">&quot;lam&quot;</span> &amp;&amp; myURL.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&quot;password&quot;</span>)===<span class="string">&quot;123&quot;</span>)&#123;</span><br><span class="line">            <span class="title function_">render</span>(res,<span class="string">`&#123;&quot;ok&quot;:1&#125;`</span>)<span class="comment">//登陆成功</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">render</span>(res,<span class="string">`&#123;&quot;ok&quot;:0&#125;`</span>)<span class="comment">//登陆失败</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;/api/loginpost&quot;</span>:<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;<span class="comment">//post请求</span></span><br><span class="line">        <span class="comment">//获取参数呢?(相较于get请求要复杂一点)</span></span><br><span class="line">        <span class="keyword">var</span> post = <span class="string">&quot;&quot;</span></span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="function"><span class="params">chunk</span>=&gt;</span>&#123;<span class="comment">//chunk数据(响应体数据,账号密码)写入</span></span><br><span class="line">            <span class="comment">// console.log(chunk)</span></span><br><span class="line">            post+=chunk<span class="comment">//一段一段的接收直到接收完成</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(post)<span class="comment">//输出我们接收到的数据(响应体)</span></span><br><span class="line">            post = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(post)</span><br><span class="line">            <span class="keyword">if</span>(post.<span class="property">username</span>===<span class="string">&quot;lam&quot;</span> &amp;&amp; post.<span class="property">password</span>===<span class="string">&quot;123&quot;</span>)&#123;</span><br><span class="line">                <span class="title function_">render</span>(res,<span class="string">`&#123;&quot;ok&quot;:1&#125;`</span>)<span class="comment">//登陆成功</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">render</span>(res,<span class="string">`&#123;&quot;ok&quot;:0&#125;`</span>)<span class="comment">//登陆失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = apiRouter</span><br></pre></td></tr></table></figure><ul><li><strong>服务器(<code>server.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先引入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Router</span> = &#123;&#125;<span class="comment">//创建路由器用于接收拼接好的页面和api接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//express  use</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">use</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="comment">// 路由的拼接(页面路由与api接口)</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Router</span>,obj)</span><br><span class="line">    <span class="comment">// 或者使用es6的拓展字符串...</span></span><br><span class="line">    <span class="comment">// return Router = &#123;...Router,...obj&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建和启动服务器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>)&#123;</span><br><span class="line">    http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取到url上的参数</span></span><br><span class="line">        <span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span>, <span class="string">&quot;http://127.0.0.1&quot;</span>)</span><br><span class="line">        <span class="comment">// console.log(myURL.pathname)</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//一定要使用try catch</span></span><br><span class="line">            <span class="title class_">Router</span>[myURL.<span class="property">pathname</span>](req,res)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title class_">Router</span>[<span class="string">&quot;/404&quot;</span>](req,res)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动,3000端口正在监听...&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露两种方法,路由的合并(注册)以及服务器的启动</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">start</span> = start</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">use</span> = use</span><br></pre></td></tr></table></figure><ul><li><strong>程序的启动文件(<code>index.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程序的入口index</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入所有的路由(页面以及api接口)</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&quot;./server&quot;</span>)<span class="comment">//引入服务器</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="built_in">require</span>(<span class="string">&quot;./route&quot;</span>)<span class="comment">//页面路由</span></span><br><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">&quot;./api&quot;</span>)<span class="comment">//api接口路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.注册路由(我们自己封装的函数,作路由拼接)</span></span><br><span class="line">server.<span class="title function_">use</span>(route)</span><br><span class="line">server.<span class="title function_">use</span>(api)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.调用函数启动服务器</span></span><br><span class="line">server.<span class="title function_">start</span>()</span><br></pre></td></tr></table></figure><ul><li><strong>这里就展示一个页面-登陆页面实现获取请求参数</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录-get<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;loginpost&quot;</span>&gt;</span>登录-post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取页面上的标签</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ologin = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#login&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ologinpost = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#loginpost&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#username&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> password = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#password&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注册点击事件</span></span></span><br><span class="line"><span class="language-javascript">        ologin.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(username.value,password.value)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用fetch发送http请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.get请求(url携带用户名和密码参数)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fetch</span>(<span class="string">`/api/login?username=<span class="subst">$&#123;username.value&#125;</span>&amp;password=<span class="subst">$&#123;password.value&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">text</span>())<span class="comment">//将返回的结果转变成字符串形式</span></span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)<span class="comment">//控制台输出渲染内容</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        ologinpost.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(username.value,password.value)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用fetch发送http请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.post请求(响应体携带用户名和密码参数)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fetch</span>(<span class="string">`/api/loginpost`</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="comment">//设置响应体内容</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>:username.<span class="property">value</span>,<span class="comment">//用户名</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">password</span>:password.<span class="property">value</span><span class="comment">//密码</span></span></span><br><span class="line"><span class="language-javascript">                &#125;),</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">headers</span>:&#123;<span class="comment">//设置响应头</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n3/1.gif" alt="image"></p><ul><li><strong>上面的<code>gif</code>可以看到,页面会随着<code>url</code>的改动而跳转, 登陆成功返回<code>&#123;&quot;ok&quot;:1&#125;</code>,失败返回<code>&#123;&quot;ok&quot;:0&#125;</code></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(5)-内置模块(4)-stream模块，zlib模块和path模块</title>
      <link href="/2022/10/31/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/"/>
      <url>/2022/10/31/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</url>
      
        <content type="html"><![CDATA[<h1 id="stream模块"><a href="#stream模块" class="headerlink" title="stream模块"></a><code>stream</code>模块</h1><ul><li><p><strong><a href="https://www.nodeapp.cn/stream.html">官方文档</a></strong></p></li><li><p><strong><code>stream</code>是<code>Node.js</code>中<code>fs</code>模块提供的又一个仅在服务区端可用的子模块，目的是支持“流”这种数据结构。</strong></p></li><li><p><strong>什么是流？流是一种抽象的数据结构。想象水流，当在水管中流动时，就可以从某个地方（例如自来水厂）源源不断地到达另一个地方（比如你家的洗手池）。我们也可以把数据看成是数据流，比如你敲键盘的时候，就可以把每个字符依次连起来，看成字符流。这个流是从键盘输入到应用程序，实际上它还对应着一个名字：标准输入流（<code>stdin</code>）。</strong></p></li><li><p><strong>数据流就是数据不是一次性全部返回或者一次性全部读取的,他是通过先读取(或者写入)一部分,再读取(或者写入)一部分,知道最后完成数据的全部操作的,因此<code>stream</code>模块更加适用于大型数据的读取或者写入操作</strong></p></li><li><p><strong>如果应用程序把字符一个一个输出到显示器上，这也可以看成是一个流，这个流也有名字：标准输出流（<code>stdout</code>）。流的特点是数据是有序的，而且必须依次读取，或者依次写入，不能像<code>Array</code>那样随机定位。</strong></p></li><li><p><strong>有些流用来读取数据，比如从文件读取数据时，可以打开一个文件流，然后从文件流中不断地读取数据。有些流用来写入数据，比如向文件写入数据时，只需要把数据不断地往文件流中写进去就可以了。</strong></p></li><li><p><strong>在<code>Node.js</code>中，流也是一个对象，我们只需要响应流的事件就可以了：<code>data</code>事件表示流的数据已经可以读取了，<code>end</code>事件表示这个流已经到末尾了，没有数据可以读取了，<code>error</code>事件表示出错了。</strong></p></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong>读取数据流(<code>readStream可读流.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:stream(文件流操作) - createReadStream(文件可读流)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建文件可读流(里面接受两个参数:要读取的文件路径,读取的格式)</span></span><br><span class="line"><span class="keyword">const</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./1.txt&#x27;</span> , <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.设置监听事件实现数据传输</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span> , <span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`数据正在传输:...`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.数据传输完成</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`数据传输完成!!`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.数据传输失败</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span> , <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`数据传输失败,失败信息为:<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要注意，`data`事件可能会有多次，每次传递的`chunk`是流的一部分数据。</span></span><br><span class="line"><span class="comment">要以流的形式写入文件，只需要不断调用`write()`方法，最后以`end()`结束：</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>写入数据流(<code>writeStream可写流.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:stream(文件流操作) - createWriteStream(文件可写流)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建文件可写流(里面接受两个参数:要写入的文件路径,写入的格式)</span></span><br><span class="line"><span class="keyword">const</span> wsl = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./2.txt&#x27;</span> , <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.掉用write实现数据的写入</span></span><br><span class="line">wsl.<span class="title function_">write</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">wsl.<span class="title function_">write</span>(<span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">wsl.<span class="title function_">write</span>(<span class="string">&#x27;333&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.最后调用end来结束文件的写入</span></span><br><span class="line">wsl.<span class="title function_">end</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    要注意，`data`事件可能会有多次，每次传递的`chunk`是流的一部分数据。</span></span><br><span class="line"><span class="comment">    要以流的形式写入文件，只需要不断调用`write()`方法，最后以`end()`结束：</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>管道连接读写数据流(<code>pipe管道连接流.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:stream(文件流操作) - pipe(文件可写流)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    pipe 顾名思义是管道的意思,这个方法能 可读流 和 可写流 连在一起</span></span><br><span class="line"><span class="comment">    更加简单的实现数据的读写复制,能将一个文件里面的内容很简单的就复制到另一个文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建可读流和可写流</span></span><br><span class="line"><span class="keyword">const</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./1.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">//创建可读流(数据的导出源)</span></span><br><span class="line"><span class="keyword">const</span> wsl = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./2.txt&#x27;</span> , <span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">//创建可写流(数据的导入源)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.使用pipe管道将两个源头接起来(读取到的 =&gt; pipe =&gt; 写入)</span></span><br><span class="line">rs.<span class="title function_">pipe</span>(wsl)<span class="comment">//实现将 1.txt 里面的内容写入到 2.txt 中去</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong><code>pipe</code> 就像可以把两个水管串成一个更长的水管一样，两个流也可以串起来。一个<code>Readable</code>流和一个<code>Writable</code>流串起来后，所有的数据自动从<code>Readable</code>流进入<code>Writable</code>流，这种操作叫<code>pipe</code>。</strong></li><li><strong>在<code>Node.js</code>中，<code>Readable</code>流有一个<code>pipe()</code>方法，就是用来干这件事的。</strong></li><li><strong>让我们用<code>pipe()</code>把一个文件流和另一个文件流串起来，这样源文件的所有数据就自动写入到目标文件里了，所以，这实际上是一个复制文件的程序</strong></li></ul><h1 id="zlib模块"><a href="#zlib模块" class="headerlink" title="zlib模块"></a><code>zlib</code>模块</h1><ul><li><strong><a href="https://www.nodeapp.cn/zlib.html">官方文档</a></strong></li></ul><h2 id="浏览器解析页面的大致流程如下"><a href="#浏览器解析页面的大致流程如下" class="headerlink" title="浏览器解析页面的大致流程如下:"></a>浏览器解析页面的大致流程如下:</h2><p><img src="/../upload/nodejs/n2/0.png" alt="image"></p><ul><li><strong>由此可见,如果文件过大从<code>webserver</code>到浏览器的传输时间就会很长所以我们可以先将文件压缩成<code>gzip</code>文件再进行传输。</strong></li></ul><h4 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:zlib(文件压缩)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    要知道浏览器的解析过程是:</span></span><br><span class="line"><span class="comment">    html源码 =(解析)&gt; WebServer =(传递)&gt; 浏览器 =(渲染)&gt; 渲染到页面上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    如果文件过大从webserver到浏览器的传输时间就会很长,导致页面出现延迟卡顿</span></span><br><span class="line"><span class="comment">    这就会很影响用户的实际使用体验,因此我们可以先将文件压缩成gzip文件再进行传输</span></span><br><span class="line"><span class="comment">    而压缩成gzip文件的方法就包含在zlib模块中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先导入相对应的模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)<span class="comment">//http模块用于创建服务器</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)<span class="comment">//fs模块用于操作文件</span></span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">&quot;zlib&quot;</span>)<span class="comment">//zlib模块用于压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建gzip压缩</span></span><br><span class="line"><span class="keyword">const</span> gzip = zlib.<span class="title function_">createGzip</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 4.创建文件的可读流</span></span><br><span class="line">    <span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&quot;./index.txt&quot;</span>)</span><br><span class="line">    <span class="comment">// 5.设置响应头文件</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-javascript;charset=utf-8&quot;</span>,<span class="string">&quot;Content-Encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span>&#125;)</span><br><span class="line">    <span class="comment">// 6.使用pipe管道将可读流与页面渲染连通起来,让文件能够输出到页面当中</span></span><br><span class="line">    readStream.<span class="title function_">pipe</span>(gzip).<span class="title function_">pipe</span>(res)<span class="comment">//res本身就是一个可写流</span></span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功,端口号3000正在监听....&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>使用<code>zlib</code>压缩前</strong><br><img src="/../upload/nodejs/n2/3.png" alt="image"></p></li><li><p><strong>使用<code>zlib</code>压缩后</strong><br><img src="/../upload/nodejs/n2/2.png" alt="image"></p></li></ul><h1 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a><code>path</code>模块</h1><ul><li><p><strong><a href="https://www.nodeapp.cn/path.html">官方文档</a></strong></p></li><li><p><strong><code>path</code> 模块是 <code>Node.js</code> 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。</strong></p></li><li><p><strong>例如:</strong></p><ul><li><strong><code>path.join()</code> 方法，用来将多个路径片段拼接成一个完整的路径字符串</strong></li><li><strong><code>path.basename()</code> 方法，用来从路径字符串中，将文件名解析出来</strong></li><li><strong><code>path.extname()</code>方法 获取文件的拓展名，即后缀名</strong></li></ul></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong><code>path.join()进行路径的拼接.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先导入相对应的模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：  ../ 会抵消前面的路径</span></span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../../&#x27;</span>, <span class="string">&#x27;./d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)<span class="comment">// a/b/e</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr)  <span class="comment">// \a\b\d\e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：今后凡是涉及到路径拼接的操作，都要使用 path.join() 方法进行处理。不要直接使用 + 进行字符串的拼接。</span></span><br><span class="line"><span class="comment">// fs.readFile(__dirname + &#x27;/files/1.txt&#x27;)</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./files.txt&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取失败！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取成功！&#x27;</span> + <span class="string">&#x27;\n&#x27;</span> + dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>结果展示:</strong><br><img src="/../upload/nodejs/n2/4.png" alt="image"></p></li><li><p><strong><code>path.basename()读取文件名.js</code></strong></p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 path.basename() 方法，可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名</span></span><br><span class="line"><span class="comment">//导入path模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法格式如下：</span></span><br><span class="line"><span class="comment">// path.basename(path[,ext])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数解读：</span></span><br><span class="line"><span class="comment">// path ： 必选参数，表示一个路径的字符串,一定是要字符串，最好有一个变量代替</span></span><br><span class="line"><span class="comment">// ext ： 可选参数，表示文件扩展名</span></span><br><span class="line"><span class="comment">// 返回: &lt;string&gt; 表示路径中的最后一部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = path.<span class="title function_">join</span>(__dirname , <span class="string">&#x27;./path路径模块初识.html&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newPath = path.<span class="title function_">basename</span>(a , <span class="string">&#x27;.html&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newPath);<span class="comment">//只有 path路径模块初识 ， 无后缀.html了</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>结果展示</strong><br><img src="/../upload/nodejs/n2/5.png" alt="image"></p></li><li><p><strong><code>path.extname()获取拓展名.js</code></strong></p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// path.extname() 只获取文件的拓展名，即后缀名</span></span><br><span class="line"><span class="comment">// 语法格式</span></span><br><span class="line"><span class="comment">// path.extname(path)</span></span><br><span class="line"><span class="comment">// 参数解析</span></span><br><span class="line"><span class="comment">// path &lt;string&gt;必选参数，表示一个路径的字符串</span></span><br><span class="line"><span class="comment">// 返回: &lt;string&gt; 返回得到的扩展名字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = path.<span class="title function_">join</span>(__dirname , <span class="string">&#x27;./path路径模块初识.html&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = path.<span class="title function_">extname</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">//.html 只有后缀名</span></span><br></pre></td></tr></table></figure><ul><li><strong>结果展示:</strong><br><img src="/../upload/nodejs/n2/6.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> 内置模块 </tag>
            
            <tag> stream模块 </tag>
            
            <tag> zlib模块 </tag>
            
            <tag> path模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(4)-内置模块(3)-fs文件操作模块</title>
      <link href="/2022/10/31/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/"/>
      <url>/2022/10/31/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<h1 id="fs文件操作模块"><a href="#fs文件操作模块" class="headerlink" title="fs文件操作模块"></a><code>fs</code>文件操作模块</h1><ul><li><strong><a href="https://www.nodeapp.cn/fs.html">官方文档</a></strong></li><li><strong><code>fs</code>模块：用来操作文件的模块，它提供了一系列的方法和属性，用来满足用户对文件的操作需求。</strong></li></ul><h2 id="异步操作-基本方法的使用"><a href="#异步操作-基本方法的使用" class="headerlink" title="异步操作(基本方法的使用):"></a>异步操作(基本方法的使用):</h2><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong><code>mkdir目录的创建.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:fs(文件操作模块) - mkdir(创建目录)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line"><span class="comment">// 该方法接收两个参数(创建的目录路径(绝对或者相对都可以) , 回调函数)</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./tx&#x27;</span> , <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err &amp;&amp; err.<span class="property">code</span> == <span class="string">&#x27;EEXIST&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;该文件夹已经存在!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件创建成功! 该文件夹为:&#x27;</span> , err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong><code>rename重命名目录.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:fs(文件操作模块) - rename(重命名目录)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line"><span class="comment">// 该方法接收三个参数(之前的目录路径(绝对或者相对都可以) , 重命名后的路径 , 回调函数)</span></span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;./tx&#x27;</span> , <span class="string">&#x27;./tx1&#x27;</span> , <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err &amp;&amp; err.<span class="property">code</span> == <span class="string">&#x27;EEXIST&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;该文件夹已经存在!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件重命名成功! 该文件夹为:&#x27;</span> , err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong><code>rmdir删除目录.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:fs(文件操作模块) - rmkdir(删除目录)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line"><span class="comment">// 该方法接收两个参数(删除的目录路径(绝对或者相对都可以) , 回调函数)</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./tx1&#x27;</span> , <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err &amp;&amp; err.<span class="property">code</span> == <span class="string">&#x27;ENOENT&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件夹不存在!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件删除成功!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注意: 如果文件夹下面有内容(文件)的话,是无法使用rmdir来删除目录的</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>writeFile创建写入文件.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:fs(文件操作模块) - writeFile(创建并写入文件)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line"><span class="comment">// 该方法接收三个参数(创建的文件的路径(绝对或者相对都可以) , 写入的内容 , 回调函数)</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./tx/a.txt&#x27;</span> , <span class="string">&#x27;hello! node&#x27;</span> , <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);<span class="comment">//输出为null即为没有错误表示成功</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注意: 这个方法的多次调用会覆盖掉原来的内容(新内容覆盖掉旧内容)</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>appendFile创建写入文件.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:fs(文件操作模块) - appendFile(创建并写入文件)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line"><span class="comment">// 该方法接收三个参数(创建的文件的路径(绝对或者相对都可以) , 写入的内容 , 回调函数)</span></span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;./tx/a.txt&#x27;</span> , <span class="string">&#x27;你好! 节点&#x27;</span> , <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);<span class="comment">//输出为null即为没有错误表示成功</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注意: 这个方法的多次调用不会覆盖掉原来的内容(相较于writeFile)</span></span><br></pre></td></tr></table></figure><ul><li><strong>readFile读取文件内容.js</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:fs(文件操作模块) - readFile(读取文件)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line"><span class="comment">// 该方法接收三个参数(创建的文件的路径(绝对或者相对都可以) , 读取的格式 , 回调函数)</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./tx/a.txt&#x27;</span> , <span class="string">&#x27;utf-8&#x27;</span> , <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`读取成功,内容为:<span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`读取失败! 错误内容为<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong><code>unlink删除文件.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:fs(文件操作模块) - unlink(删除文件)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line"><span class="comment">// 该方法接收两个参数(要删除的文件的路径(绝对或者相对都可以) , 回调函数)</span></span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&#x27;./tx/a.txt&#x27;</span> , <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`文件删除成功!`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`文件删除失败!! 错误内容为<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong><code>readdir查看目录.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:fs(文件操作模块) - readdir(查看目录)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line"><span class="comment">// 该方法接收两个参数(要查看的文件的路径(绝对或者相对都可以) , 回调函数)</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./tx&#x27;</span> , <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);<span class="comment">//输出常规,查看当前路径下的文件内容</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`查看失败!! 错误内容为<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong><code>stat查看路径下的内容详细情况.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:fs(文件操作模块) - stat(输出详细的目录情况)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line"><span class="comment">// 该方法接收两个参数(要查看的文件的路径(绝对或者相对都可以) , 回调函数)</span></span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;./tx&#x27;</span> , <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">isDirectory</span>());<span class="comment">//判断是否为目录 true</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">isFile</span>());<span class="comment">//判断是否为文件 false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`查看失败!! 错误内容为<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 里面有两个方法是值得我们去了解的:isFile() , isDirectory()</span></span><br></pre></td></tr></table></figure><h2 id="同步操作-基本方法的使用"><a href="#同步操作-基本方法的使用" class="headerlink" title="同步操作(基本方法的使用):"></a>同步操作(基本方法的使用):</h2><ul><li><strong>所有的方法与异步操作基本一致,只不过是添加了<code>Sync</code>后缀而已</strong></li></ul><h3 id="代码展示-这里就展示一个mkdirSync"><a href="#代码展示-这里就展示一个mkdirSync" class="headerlink" title="代码展示:(这里就展示一个mkdirSync)"></a>代码展示:(这里就展示一个<code>mkdirSync</code>)</h3><ul><li><strong><code>mkdirSync创建目录.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs内置模块:fs(文件操作模块) - mkdirSync(同步创建目录)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line"><span class="comment">// 该方法接收两个参数(创建的目录路径(绝对或者相对都可以) , 回调函数)</span></span><br><span class="line">fs.<span class="title function_">mkdirSync</span>(<span class="string">&#x27;./tx&#x27;</span> , <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;<span class="comment">//这是一个同步创建操作,前一步没执行完成会阻塞下一步代码执行</span></span><br><span class="line">    <span class="keyword">if</span>(err &amp;&amp; err.<span class="property">code</span> == <span class="string">&#x27;EEXIST&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;该文件夹已经存在!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件创建成功! 该文件夹为:&#x27;</span> , err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="在fs模块中，提供同步方法是为了方便使用。那我们到底是应该用异步方法还是同步方法呢？"><a href="#在fs模块中，提供同步方法是为了方便使用。那我们到底是应该用异步方法还是同步方法呢？" class="headerlink" title="在fs模块中，提供同步方法是为了方便使用。那我们到底是应该用异步方法还是同步方法呢？"></a>在<code>fs</code>模块中，提供同步方法是为了方便使用。那我们到底是应该用异步方法还是同步方法呢？</h2><ul><li><p><strong>由于<code>Node</code>环境执行的<code>JavaScript</code>代码是服务器端代码，所以，绝大部分需要在服务器运行期反复执行业务逻辑的代码，<em>必须使用异步代码</em>，否则，同步代码在执行时期，服务器将停止响应，因为<code>JavaScript</code>只有一个执行线程。</strong></p></li><li><p><strong>服务器启动时如果需要读取配置文件，或者结束时需要写入到状态文件时，可以使用同步代码，因为这些代码只在启动和结束时执行一次，不影响服务器正常运行时的异步执行。</strong></p></li></ul><h3 id="这里展示一个小案例"><a href="#这里展示一个小案例" class="headerlink" title="这里展示一个小案例:"></a>这里展示一个小案例:</h3><ul><li><strong>要求:删除目标目录(但是存在两种情况:若该目录是空目录的话可以直接删除,但是若该目录下存在其他文件的话就无法直接使用<code>rmdir</code>来删除了,必须先是删除该目录下的所有文件,确定该目录为空目录后再执行<code>rmdir</code>删除)</strong></li></ul><h4 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h4><ul><li><strong>首先是异步和同步的区别</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    因为fs内置模块中的rmdir方法是无法删除有内容的目录的,因此我们在调用rmdir方法之前</span></span><br><span class="line"><span class="comment">    首先要先判断该路径是否有内容,随后清除了该目录下的所有内容,在执行rmdir删除目录</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.判断要删除的目录下是否存在内容(文件,目录)</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./tx&#x27;</span>, <span class="function">(<span class="params">err , data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 做判断</span></span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;<span class="comment">//无错误输出该目录下的内容</span></span><br><span class="line">        <span class="comment">// console.log(data);</span></span><br><span class="line">        <span class="keyword">if</span>(!data)&#123;<span class="comment">// 3.若没有内容存在</span></span><br><span class="line">            fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./tx&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;<span class="comment">//直接执行目录的删除</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`目录删除成功!`</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">// 4.若存在内容</span></span><br><span class="line">            data.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;<span class="comment">// 遍历删除文件</span></span><br><span class="line">                fs.<span class="title function_">unlink</span>(<span class="string">`./tx/<span class="subst">$&#123;item&#125;</span>`</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;<span class="comment">//异步删除(存在问题)</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`文件删除成功!`</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// // 方法1: 使用unlinkSync(不是很推荐,因为node是单线程)</span></span><br><span class="line">                <span class="comment">// fs.unlinkSync(`./tx/$&#123;item&#125;`,(err)=&gt;&#123;//这里变成unlinkSync即可变成同步删除</span></span><br><span class="line">                <span class="comment">//     console.log(`文件删除成功!`);</span></span><br><span class="line">                <span class="comment">// &#125;)</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./tx&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;<span class="comment">//再执行目录的删除</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`目录删除成功!`</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`发生了错误!错误信息为:<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    但是这个方法存在缺陷,那就是这是一个异步编程的过程,文件删除的过程与路径删除的过程是分开的</span></span><br><span class="line"><span class="comment">    也就是说,当文件删除的过程过长时,目录的删除过程是不受影响的,这样就会导致错误的产生: 即</span></span><br><span class="line"><span class="comment">    该目录下的文件还没删除干净就执行删除目录,这是会报错的,因此我们应该将这个异步编程过程转变成</span></span><br><span class="line"><span class="comment">    同步编程过程,即先删除了该目录下的文件,再删除该目录,这样就不会有报错了!!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h4><ul><li><p><strong>异步删除的结果展示:</strong><br><img src="/../upload/nodejs/n2/1.png" alt="image"></p></li><li><p><strong>同步删除的结果展示:</strong><br><img src="/../upload/nodejs/n2/1.gif" alt="image"></p></li></ul><h4 id="使用promise嵌套异步解决方案-推荐使用"><a href="#使用promise嵌套异步解决方案-推荐使用" class="headerlink" title="使用promise嵌套异步解决方案(推荐使用)"></a>使用<code>promise</code>嵌套异步解决方案(推荐使用)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先以promise的形式导入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="property">promises</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原理版(forEach不改变原数组,使用map能改变原数组更方便)</span></span><br><span class="line"><span class="comment">// fs.readdir(&quot;./tx&quot;).then(async (data)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     // console.log(data)</span></span><br><span class="line"><span class="comment">//     let arr = []</span></span><br><span class="line"><span class="comment">//     data.forEach(item=&gt;&#123;</span></span><br><span class="line"><span class="comment">//         arr.push(fs.unlink(`./tx/$&#123;item&#125;`))</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">//     //Promise.all([])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     await Promise.all(arr)</span></span><br><span class="line"><span class="comment">//     await fs.rmdir(&quot;./tx&quot;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用promise来解决异步编程(超级简洁版)</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&quot;./tx&quot;</span>).<span class="title function_">then</span>(<span class="keyword">async</span> (data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>fs.<span class="title function_">unlink</span>(<span class="string">`./tx/<span class="subst">$&#123;item&#125;</span>`</span>)))<span class="comment">//使用映射</span></span><br><span class="line">    <span class="keyword">await</span> fs.<span class="title function_">rmdir</span>(<span class="string">&quot;./tx&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h4><p><img src="/../upload/nodejs/n2/2.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> 内置模块 </tag>
            
            <tag> fs模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(3)-内置模块(2)-url模块，querystring模块和event模块</title>
      <link href="/2022/10/27/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
      <url>/2022/10/27/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h1 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a><code>url</code>模块</h1><ul><li><p><strong><a href="https://www.nodeapp.cn/url.html">官方文档</a></strong></p></li><li><p><strong><code>url</code>模块是<code>nodejs</code>里面的一个简单的模块，可以把<code>url</code>网址解析为一个对象</strong></p></li><li><p><strong>该模块提供三个方法:</strong></p><ol><li><strong><code>url.parse(urlString,boolean,boolean)</code></strong></li><li><strong><code>url.format(urlObj)</code></strong></li><li><strong><code>url.resolve(from,to)</code></strong></li></ol></li></ul><h2 id="1-url-parse-urlString-boolean-boolean"><a href="#1-url-parse-urlString-boolean-boolean" class="headerlink" title="1.url.parse(urlString,boolean,boolean)"></a>1.<code>url.parse(urlString,boolean,boolean)</code></h2><ul><li><strong><code>parse</code>这个方法可以将一个<code>url</code>的字符串解析并返回一个<code>url</code>的对象</strong></li><li><strong>参数：<code>urlString</code>指传入一个<code>url</code>地址的字符串</strong></li><li><strong>第二个参数（可省）传入一个布尔值，默认为<code>false</code>，为<code>true</code>时，返回的<code>url</code>对象中，<code>query</code>的属性为一个对象。这样就方便我们读取前端传过来的<code>query</code>参数</strong></li><li><strong>第三个参数（可省）传入一个布尔值， 默认为<code>false</code>，<code>//foo/bar </code>形式的字符串将被解释成 <code>&#123; pathname: ‘//foo/bar’ &#125;</code>；如果设置成<code>true</code>，<code>//foo/bar</code> 形式的字符串将被解释成 <code>&#123; host: ‘foo’, pathname: ‘/bar’ &#125;</code></strong></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入url模块</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. parse 方法:将url转化为对象形式</span></span><br><span class="line"><span class="keyword">const</span> urlString = <span class="string">&#x27;https://www.baidu.com:443/ad/index.html?id=8&amp;name=mouse#tag=110&#x27;</span></span><br><span class="line"><span class="comment">//const parsedStr = url.parse(urlString)//不跟true参数</span></span><br><span class="line"><span class="keyword">const</span> parsedStr = url.<span class="title function_">parse</span>(urlString , <span class="literal">true</span>)<span class="comment">//跟上true参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsedStr)</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>当后面不跟<code>true</code>时</strong><br><img src="/../upload/nodejs/n1/6.png" alt="image"></p></li><li><p><strong>当后面跟上<code>true</code>时</strong><br><img src="/../upload/nodejs/n1/7.png" alt="image"></p></li></ul><h2 id="2-url-format-urlObj"><a href="#2-url-format-urlObj" class="headerlink" title="2. url.format(urlObj)"></a>2. url.format(urlObj)</h2><ul><li><p><strong><code>format</code>这个方法是将传入的<code>url</code>对象编程一个<code>url</code>字符串并返回</strong></p></li><li><p><strong>参数：<code>urlObj</code>指一个<code>url</code>对象</strong></p></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodeJS内置模块 : url模块</span></span><br><span class="line"><span class="comment">// 引入url模块</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.format 方法: 将传入的url对项变成一个字符串拼接的url并返回</span></span><br><span class="line"><span class="keyword">const</span> urlObject = &#123;</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&#x27;https:&#x27;</span>,</span><br><span class="line">    <span class="attr">slashes</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">auth</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;www.baidu.com:443&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&#x27;443&#x27;</span>,</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="attr">hash</span>: <span class="string">&#x27;#tag=110&#x27;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&#x27;?id=8&amp;name=mouse&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123; <span class="attr">id</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;mouse&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&#x27;/ad/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/ad/index.html?id=8&amp;name=mouse&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> parsedObj = url.<span class="title function_">format</span>(urlObject)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(parsedObj)</span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n1/8.png" alt="image"></p><h2 id="3-url-resolve-from-to"><a href="#3-url-resolve-from-to" class="headerlink" title="3. url.resolve(from,to)"></a>3. url.resolve(from,to)</h2><ul><li><strong><code>resolve</code>这个方法返回一个格式为”<code>from/to</code>“的字符串，对传入的两个参数用”&#x2F;“符号进行拼接，并返回</strong></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodeJS内置模块 : url模块</span></span><br><span class="line"><span class="comment">// 引入url模块</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.reslove 方法: 将传入的两个参数进行字符串的拼接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种情况: 后面的参数不加 &quot; / &quot; ,这时就看前面的参收结尾有没有加&quot;/&quot;,没有加就是替换,有加就是拼接</span></span><br><span class="line"><span class="keyword">var</span> a = url.<span class="title function_">resolve</span>(<span class="string">&#x27;/one/two/three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>)<span class="comment">//替换 , /one/two/four</span></span><br><span class="line"><span class="keyword">var</span> b = url.<span class="title function_">resolve</span>(<span class="string">&#x27;/one/two/three/&#x27;</span>, <span class="string">&#x27;one&#x27;</span>)<span class="comment">//拼接 , /one/two/three/one</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种情况: 后面的参数加 &quot; / &quot;, 就会替换掉域名以后的所有内容</span></span><br><span class="line"><span class="keyword">var</span> c = url.<span class="title function_">resolve</span>(<span class="string">&#x27;http://example.com/one/123/hsk&#x27;</span>, <span class="string">&#x27;/two&#x27;</span>)<span class="comment">//http://example.com/two</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a + <span class="string">&quot;,&quot;</span> + b + <span class="string">&quot;,&quot;</span> + c) </span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n1/9.png" alt="image"></p><h1 id="querystring模块"><a href="#querystring模块" class="headerlink" title="querystring模块"></a><code>querystring</code>模块</h1><ul><li><p><strong><a href="https://www.nodeapp.cn/querystring.html">官方文档</a></strong></p></li><li><p><strong>作用:对<code>http</code>请求所带的数据进行解析，可以把<code>querystring</code>参数解析为一个对象</strong></p></li><li><p><strong>该模块提供4个常用方法:</strong></p><ol><li><strong><code>querystring.parse(str,separator,eq,options)</code></strong></li><li><strong><code>querystring.stringify(obj,separator,eq,options)</code></strong></li><li><strong><code>querystring.escape(str)</code></strong></li><li><strong><code>querystring.unescape(str)</code></strong></li></ol></li></ul><p>​</p><h2 id="1-querystring-parse"><a href="#1-querystring-parse" class="headerlink" title="1. querystring.parse()"></a>1. <code>querystring.parse()</code></h2><ul><li><p><strong><code>parse</code>这个方法是将一个字符串反序列化为一个对象。</strong></p></li><li><p><strong>参数：</strong></p><ul><li><strong><code>str</code>: 指需要反序列化的字符串;</strong></li><li><strong><code>separator</code>（可省）指用于分割<code>str</code>这个字符串的字符或字符串，默认值为”<code>&amp;</code>“;</strong></li><li><strong><code>eq</code>（可省）指用于划分键和值的字符或字符串，默认值为”<code>=</code>“;</strong></li><li><strong><code>options</code>（可省）该参数是一个对象，里面可设置<code>maxKeys</code>和<code>decodeURIComponent</code>这两个属性：</strong></li></ul></li></ul><h3 id="代码展示-3"><a href="#代码展示-3" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodeJS内置模块 : querystring模块</span></span><br><span class="line"><span class="comment">// 引入querystring模块</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. parse 方法 将参数转变成对象形式(与stringify方法对立)</span></span><br><span class="line"><span class="keyword">var</span> qs = <span class="string">&#x27;x=3&amp;y=4&#x27;</span></span><br><span class="line"><span class="keyword">var</span> parsed = querystring.<span class="title function_">parse</span>(qs)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsed)</span><br></pre></td></tr></table></figure><ul><li><strong>这个方法相当于<code>url</code>模块的第二个参数设置为<code>true</code>，然后取<code>query</code>属性值</strong></li></ul><h2 id="2-querystring-stringify"><a href="#2-querystring-stringify" class="headerlink" title="2. querystring.stringify()"></a>2. <code>querystring.stringify()</code></h2><ul><li><strong><code>stringify</code>这个方法是将一个对象序列化成一个字符串，与<code>querystring.parse</code>相对。</strong></li><li><strong>参数:</strong><ul><li><strong><code>obj</code>: 指需要序列化的对象</strong></li><li><strong><code>separator</code>（可省）: 用于连接键值对的字符或字符串，默认值为”<code>&amp;</code>“;</strong></li><li><strong><code>eq</code>（可省）: 用于连接键和值的字符或字符串，默认值为”<code>=</code>“;</strong></li><li><strong><code>options</code>（可省）: 传入一个对象，该对象可设： <code>encodeURIComponent</code>这个属性：值的类型为<code>function</code>，可以将一个不安全的<code>url</code>字符串转换成百分比的形式，默认值为<code>querystring.esca</code></strong></li></ul></li></ul><h3 id="代码展示-4"><a href="#代码展示-4" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodeJS内置模块 : querystring模块</span></span><br><span class="line"><span class="comment">// 引入querystring模块</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. stringify 方法将对象形式的参数转变成序列化的url格式(与parse方法对立)</span></span><br><span class="line"><span class="keyword">var</span> qo = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> parsed = querystring.<span class="title function_">stringify</span>(qo)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsed)</span><br></pre></td></tr></table></figure><h2 id="3-querystring-escape-str"><a href="#3-querystring-escape-str" class="headerlink" title="3. querystring.escape(str)"></a>3. <code>querystring.escape(str)</code></h2><ul><li><strong><code>escape</code>可使传入的字符串进行编码</strong></li></ul><h3 id="代码展示-5"><a href="#代码展示-5" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodeJS内置模块 : querystring模块</span></span><br><span class="line"><span class="comment">// 引入querystring模块</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. escape 方法可使传入的字符串进行编码(与unescape方法对立)</span></span><br><span class="line"><span class="keyword">var</span> query=querystring.<span class="built_in">escape</span>(<span class="string">&quot;user=肥林&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(query)</span><br></pre></td></tr></table></figure><h2 id="4-querystring-unescape-str"><a href="#4-querystring-unescape-str" class="headerlink" title="4. querystring.unescape(str)"></a>4. <code>querystring.unescape(str)</code></h2><ul><li><strong><code>unescape</code>方法可将含有<code>%</code>的字符串进行解码</strong></li></ul><h3 id="代码展示-6"><a href="#代码展示-6" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodeJS内置模块 : querystring模块</span></span><br><span class="line"><span class="comment">// 引入querystring模块</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. unescape 方法可将含有%的字符串进行解码(与escape方法对立)</span></span><br><span class="line"><span class="keyword">var</span> query=querystring.<span class="built_in">unescape</span>(<span class="string">&quot;user%3D%E8%82%A5%E6%9E%97&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(query)</span><br></pre></td></tr></table></figure><h2 id="结果展示-4种方法"><a href="#结果展示-4种方法" class="headerlink" title="结果展示:(4种方法)"></a>结果展示:(4种方法)</h2><p><img src="/../upload/nodejs/n1/10.png" alt="image"></p><h1 id="event模块"><a href="#event模块" class="headerlink" title="event模块"></a><code>event</code>模块</h1><ul><li><strong><code>Events</code> 模块是Node最重要的模块，它提供了一个属性 <code>EventEmitter</code>，<code>EventEmitter</code> 的核心是事件发射与事件监听器。</strong></li><li><strong><code>Events</code> 模块是Node对 <strong>发布订阅模式</strong>（<code>publish/subscribe</code>）的实现。一个对象通过这个模块，向另一个对象传递消息。</strong></li><li><strong>该模块通过 <code>EventEmitter</code> 属性，提供了一个构造函数。该构造函数的实例具有 <code>on</code> 方法，可以用来监听指定事件，并触发回调函数。</strong></li><li><strong>任意对象都可以发布指定事件，被 <code>EventEmitter</code> 实例的on方法监听到。</strong></li></ul><h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a><strong>发布订阅模式</strong></h2><ul><li><strong>订阅方法</strong>：<code>on</code> 方法用来订阅事件，订阅是将方法对应成一种一对多的关系。</li><li><strong>发布方法</strong>：<code>emit</code> 用来执行订阅的事件。</li><li><strong>取消订阅</strong>：<code>off</code> 方法可以移除对应的事件监听。</li><li><strong>订阅一次</strong>：<code>once</code> 绑定事件当执行后自动删除订阅的事件。</li></ul><h3 id="简单的代码实现"><a href="#简单的代码实现" class="headerlink" title="简单的代码实现:"></a>简单的代码实现:</h3><ul><li><strong><code>event.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置模块: events模块</span></span><br><span class="line"><span class="comment">// 其实就是简单的消息订阅与发布模式(与Vue中的事件总线非常的相似)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现流程:</span></span><br><span class="line"><span class="comment">// 1.引入event模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.实例化event模块</span></span><br><span class="line"><span class="keyword">const</span> event = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.设置监听事件</span></span><br><span class="line">event.<span class="title function_">on</span>(<span class="string">&#x27;play&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;<span class="comment">//设置一个事件触发标志&#x27;play&#x27;,以及触发后的回调函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事件被触发了!&#x27;</span>,data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.触发事件(并将一些你想要传输的数据发送过去)</span></span><br><span class="line">event.<span class="title function_">emit</span>(<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;我想发送过去的数据&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n1/20.png" alt="image"></p><h3 id="小案例实现-结合get请求"><a href="#小案例实现-结合get请求" class="headerlink" title="小案例实现:(结合get请求)"></a>小案例实现:(结合<code>get</code>请求)</h3><h4 id="使用get向猫眼电影请求数据-以node为中间转换站解决跨域问题"><a href="#使用get向猫眼电影请求数据-以node为中间转换站解决跨域问题" class="headerlink" title="使用get向猫眼电影请求数据,以node为中间转换站解决跨域问题"></a>使用<code>get</code>向猫眼电影请求数据,以<code>node</code>为中间转换站解决跨域问题</h4><ul><li><strong>服务端(<code>get.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置模块: http模块 - get模块</span></span><br><span class="line"><span class="comment">// 应用场景: 前端页面通过以node为中间件来向猫眼电影的接口请求数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入http模块和url模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)<span class="comment">//相当于Vue里面的事件总线</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> event = <span class="literal">null</span><span class="comment">//要将event首先定义为null,方便后续变量回收</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 获取网页url参数种的pathname</span></span><br><span class="line">    <span class="keyword">var</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>,<span class="literal">true</span>)<span class="comment">//设置解析true</span></span><br><span class="line">    <span class="comment">// 设置cors请求头跨域问题</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span> , &#123;</span><br><span class="line">        <span class="comment">//设置文本渲染类型</span></span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span><br><span class="line">        <span class="comment">// 设置允许所有跨域请求的cors请求头</span></span><br><span class="line">        <span class="string">&quot;access-control-allow-origin&quot;</span>:<span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">switch</span>(urlObj.<span class="property">pathname</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/maoyan&#x27;</span>:</span><br><span class="line">            <span class="title function_">httpsget</span>()<span class="comment">//向后端请求数据</span></span><br><span class="line">            event = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>()<span class="comment">//实例化event对象</span></span><br><span class="line">            event.<span class="title function_">on</span>(<span class="string">&#x27;play&#x27;</span> , <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;<span class="comment">//建立事件监听器,监听play</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data);<span class="comment">//输出接收到的数据</span></span><br><span class="line">                res.<span class="title function_">end</span>(data)<span class="comment">//将数据发送给前端</span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> : </span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动,3000端口正在监听!!!&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置get请求,向猫眼电影请求数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">httpsget</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">&quot;&quot;</span><span class="comment">//创建数据接收变量</span></span><br><span class="line">    <span class="comment">// 使用https模块向猫眼电影的接口请求数据</span></span><br><span class="line">    https.<span class="title function_">get</span>(<span class="string">`https://i.maoyan.com/api/mmdb/movie/v3/list/hot.json?ct=%E6%B1%9F%E9%97%A8&amp;ci=277&amp;channelId=4`</span>,<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据接收流程如下:</span></span><br><span class="line">        <span class="comment">// 1.设置监听事件来监听数据的接收(数据接收阶段)</span></span><br><span class="line">        res.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;<span class="comment">//接收数据流</span></span><br><span class="line">            data += chunk</span><br><span class="line">        &#125;) </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.数据接收完成发送给前端(数据接收完成)</span></span><br><span class="line">        res.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>,<span class="function">()=&gt;</span>&#123;<span class="comment">//数据接收完毕</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">            event.<span class="title function_">emit</span>(<span class="string">&#x27;play&#x27;</span> , data)<span class="comment">//数据收集完成使用emit来触发事件</span></span><br><span class="line">            <span class="comment">// 切记异步编程不能使用return,使用return返回的是undefined</span></span><br><span class="line">            <span class="comment">// 可以使用promise来获取数据</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>前端页面(<code>get.html</code>)</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>get请求数据(node中间运送数据)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 服务端已设置好跨域,直接发送请求即可</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:3000/maoyan&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>())<span class="comment">//做json格式的转换,原数据格式为字符串</span></span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-4"><a href="#结果展示-4" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>服务端成功输出获取到的数据</strong><br><img src="/../upload/nodejs/n1/16.png" alt="image"></p></li><li><p><strong>前端网页数据也获取成功</strong><br><img src="/../upload/nodejs/n1/17.png" alt="image"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> 内置模块 </tag>
            
            <tag> url模块 </tag>
            
            <tag> querystring模块 </tag>
            
            <tag> event模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(2)-内置模块(1)-http模块及其扩展模块</title>
      <link href="/2022/10/27/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2022/10/27/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h1 id="内置模块-1-http模块"><a href="#内置模块-1-http模块" class="headerlink" title="内置模块(1): http模块"></a>内置模块(1): <code>http</code>模块</h1><ul><li><p><strong><a href="https://www.nodeapp.cn/http.html">官方文档</a></strong></p></li><li><p><strong><code>http</code> 模块是 <code>Node.js</code> 官方提供的用来创建 <code>web</code> 服务器的模块</strong></p></li><li><p><strong>通过 <code>http</code> 模块提供的 <code>http.createServer()</code> 方法，就能方便的把一台普通的电脑，变成一台 <code>Web</code> 服务器，从而对外提供 <code>Web</code> 资源服务。</strong></p></li><li><p><strong>在 <code>Node.js</code> 中，不需要使用 <code>IIS</code>、<code>Apache</code>（针对<code>php</code>） 等第三方 <code>web</code> 服务器软件（普通的电脑常常安装这些），而是基于 <code>Node.js</code> 提供的 <code>http</code> 模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供 <code>web</code> 服务</strong></p></li></ul><h2 id="基本使用-两种写法"><a href="#基本使用-两种写法" class="headerlink" title="基本使用:(两种写法)"></a>基本使用:(两种写法)</h2><ol><li><strong><code>server.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodeJS内置模块 : http模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入 http 内置模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 这里以一个函数为参数,用于接收浏览器传的参数,返回渲染的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// req:全称request,表示浏览器传来的参数</span></span><br><span class="line">    <span class="comment">// res:全程result,表示浏览器渲染的内容</span></span><br><span class="line">    <span class="comment">// res.write(&quot;Hello! Node-Server!&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应头(文本展示类型设置为html格式,以及中文显示)</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=utf-8&quot;</span>&#125;)</span><br><span class="line">    <span class="comment">// 服务器同样可以展示html标签</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">            &lt;strong&gt;你好! Node服务器&lt;/strong&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">end</span>()<span class="comment">//切记一定要用end()方法来结束代码!里面也可以传入字符串</span></span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;<span class="comment">//设置监听端口号以及服务器运行成功的回调函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动! 端口号为3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong><code>server.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=utf-8&quot;</span>&#125;)</span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;你好，世界&lt;/h1&gt;&quot;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动! 端口号为3000&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>终端内展示</strong><br><img src="/../upload/nodejs/n1/4.png" alt="image"></p></li><li><p><strong>网页展示</strong><br><img src="/../upload/nodejs/n1/5.png" alt="image"></p></li></ul><h2 id="小案例"><a href="#小案例" class="headerlink" title="小案例:"></a>小案例:</h2><ul><li><strong>要求: 输入对应的<code>url</code>参数,能进入对应的页面,没有该页面则返回404,状态码要与其保持一致</strong></li><li><strong><code>url</code>: <code>&#39;/home&#39;</code>对应首页 , <code>&#39;/list&#39;</code>对应详情页</strong></li></ul><h4 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h4><ul><li><strong>server.js</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodeJS内置模块 : http模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入 http 内置模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 这里以一个函数为参数,用于接收浏览器传的参数,返回渲染的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// req:全称request,表示浏览器传来的参数</span></span><br><span class="line">    <span class="comment">// res:全程result,表示浏览器渲染的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应头(文本展示类型设置为html格式)</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="title function_">renderStatus</span>(req.<span class="property">url</span>),&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=utf-8&quot;</span>&#125;)</span><br><span class="line">    <span class="comment">// 服务器同样可以展示html标签</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="title function_">renderHtml</span>(req.<span class="property">url</span>))</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">end</span>()<span class="comment">//切记一定要用end()方法来结束代码!里面也可以传入字符串</span></span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;<span class="comment">//设置监听端口号以及服务器运行成功的回调函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动! 端口号为3000&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// url渲染函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderHtml</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span> (url) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;html&gt;</span></span><br><span class="line"><span class="string">                &lt;strong&gt;你好! Node服务器!!!&lt;/strong&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/home&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;html&gt;</span></span><br><span class="line"><span class="string">                &lt;strong&gt;首页&lt;/strong&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/list&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;html&gt;</span></span><br><span class="line"><span class="string">                &lt;strong&gt;详情页&lt;/strong&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;html&gt;</span></span><br><span class="line"><span class="string">                &lt;strong&gt;404 not fount!!!&lt;/strong&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态渲染函数(响应码的设置)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderStatus</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&#x27;/home&#x27;</span>,<span class="string">&#x27;/list&#x27;</span>,<span class="string">&#x27;/&#x27;</span>]</span><br><span class="line">   <span class="keyword">return</span> arr.<span class="title function_">includes</span>(url)?<span class="number">200</span>:<span class="number">404</span><span class="comment">//判断是否包含对应的参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h4><p><img src="/../upload/nodejs/n1/1.gif" alt="image"></p><h2 id="http模块扩展-jsonp"><a href="#http模块扩展-jsonp" class="headerlink" title="http模块扩展-jsonp"></a><code>http</code>模块扩展-<code>jsonp</code></h2><h3 id="什么是jsonp"><a href="#什么是jsonp" class="headerlink" title="什么是jsonp?"></a>什么是<code>jsonp</code>?</h3><ul><li><strong>我们在发送<code>Ajax</code>请求的时候会受<code>同源策略</code>的影响而存在<code>跨域请求</code>的问题,不管是静态页面、动态页面、<code>web</code>服务，只要是跨域请求，一律都是不允许的</strong></li><li><strong>但是<code>web</code>页面调用<code>js</code>文件则不受跨域的影响（不仅如此，我们还发现凡是拥有“<code>src</code>”这个属性的标签都拥有跨域的能力，比如<code>&lt;\script&gt;</code>、<code>&lt;\img&gt;</code>、<code>&lt;\iframe&gt;</code>）。</strong></li><li><strong>于是可以判断，当前阶段如果想通过纯web端跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理。</strong></li><li><strong>恰巧我们知道有一种叫做<code>JSON</code>的纯字符数据格式可以简洁的描述复杂数据，更妙的是<code>JSON</code>还被<code>js</code>原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据。</strong></li><li><strong>这样，解决方案就呼之欲出了，<code>web</code>服务端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的<code>js</code>格式文件，显而易见，服务器之所以要动态生成<code>JSON</code>文件，目的就在于把客户端需要的数据装进去。久而久之就形成了一种非正式的传输协议: <code>JSONP(JSON with Padding)</code></strong></li></ul><h3 id="代码展示-这里结合url和http模块的使用"><a href="#代码展示-这里结合url和http模块的使用" class="headerlink" title="代码展示:(这里结合url和http模块的使用)"></a>代码展示:(这里结合<code>url</code>和<code>http</code>模块的使用)</h3><ul><li><strong>服务端(<code>json.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置模块: http模块 - jsonp解决跨域</span></span><br><span class="line"><span class="comment">// 应用场景: 前端页面请求固定的url并携带参数name,返回数据 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入http模块和url模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 获取网页url参数种的pathname</span></span><br><span class="line">    <span class="keyword">var</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>,<span class="literal">true</span>)<span class="comment">//设置解析true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(urlObj.<span class="property">query</span>);<span class="comment">//获取query参数</span></span><br><span class="line">    <span class="keyword">switch</span>(urlObj.<span class="property">pathname</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/lam&#x27;</span>:</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;urlObj.query.name&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">                name: <span class="string">&#x27;Cheung Pui Lam&#x27;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">                age: <span class="number">100</span></span></span></span><br><span class="line"><span class="subst"><span class="string">            &#125;)&#125;</span>)`</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> : </span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动,3000端口正在监听!!!&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>前端页面(<code>jsonp.html</code>)</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页请求页面资源(jsonp)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jsonp解决跨域问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 原理: 通过给页面添加script标签并且用其src属性来实现跨域请求</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.首先创建script标签</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> myScript = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.给新建的script标签添加src属性(携带name参数接收数据)</span></span></span><br><span class="line"><span class="language-javascript">        myScript.<span class="property">src</span> = <span class="string">&quot;http://localhost:3000/lam?name=lam&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.将该标签添加到页面当中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(myScript)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4.创建函数接收参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">lam</span>(<span class="params">obj</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>服务端展示</strong><br><img src="/../upload/nodejs/n1/11.png" alt="image"><br><img src="/../upload/nodejs/n1/12.png" alt="image"></p></li><li><p><strong>前端页面展示</strong><br><img src="/../upload/nodejs/n1/13.png" alt="image"></p></li></ul><h2 id="http模块扩展-cors"><a href="#http模块扩展-cors" class="headerlink" title="http模块扩展-cors"></a><code>http</code>模块扩展-<code>cors</code></h2><ul><li><strong><code>CORS</code>：全称”跨域资源共享”（<code>Cross-origin resource sharing</code>）。</strong></li><li><strong>我们可以设置三个响应头来实现跨域请求</strong><ol><li><strong>使用<code>res.writeHeader（“Access-Control-Allow-Origin”，&quot;*&quot;）</code></strong><ul><li><strong>表示允许任何域的请求，如果想要特定的话 <code>*</code> 换成特定 <code>url</code></strong></li></ul></li><li><strong>Access-Control-Allow-Headers</strong><ul><li><strong>因为<code>cors</code>仅支持客户端向服务端发送9个请求头，如果超过了就用<code>res.setHeader（“Access-Control-Allow-Headers”</code>，”添加需要的请求头”)</strong></li></ul></li><li><strong>Access-Control-Allow-Methods</strong><ul><li><strong>默认情况下只支持客户端发起<code>GET POST HEAD</code> ,如果要用其他的比如<code>PUT DELETE</code>就需要使用<code>res.setHeader``（“Access-Control-Allow-Methods”，&quot;*&quot;）</code> 添加<code>*</code>就是指添加所有的方法。</strong></li></ul></li></ol></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong>服务端(<code>cors.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置模块: http模块 - cors解决跨域</span></span><br><span class="line"><span class="comment">// 应用场景: 前端页面请求固定的url并携带参数name,返回数据 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入http模块和url模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 获取网页url参数种的pathname</span></span><br><span class="line">    <span class="keyword">var</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>,<span class="literal">true</span>)<span class="comment">//设置解析true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(urlObj.<span class="property">query</span>);<span class="comment">//获取query参数</span></span><br><span class="line">    <span class="comment">// 设置cors请求头跨域问题</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span> , &#123;</span><br><span class="line">        <span class="comment">//设置文本渲染类型</span></span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span><br><span class="line">        <span class="comment">// 设置允许所有跨域请求的cors请求头</span></span><br><span class="line">        <span class="string">&quot;access-control-allow-origin&quot;</span>:<span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">switch</span>(urlObj.<span class="property">pathname</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/lam&#x27;</span>:</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;Cheung Pui Lam&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">100</span></span><br><span class="line">            &#125;))</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> : </span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动,3000端口正在监听!!!&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>前端页面(<code>cros.html</code>)</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>cors解决跨域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 服务端已设置好跨域,直接发送请求即可(这里使用fetch来发送请求,axios也可以)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:3000/lam?name=lam&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>())</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>服务端</strong><br><img src="/../upload/nodejs/n1/11.png" alt="image"><br><img src="/../upload/nodejs/n1/14.png" alt="image"></p></li><li><p><strong>前端页面</strong><br><img src="/../upload/nodejs/n1/13.png" alt="image"></p></li></ul><h2 id="http模块扩展-get"><a href="#http模块扩展-get" class="headerlink" title="http模块扩展-get"></a><code>http</code>模块扩展-<code>get</code></h2><ul><li><strong>要知道<code>node</code>不仅可以作为服务端(后端返回数据),更能作为客户端(向另一个后端请求数据)。众所周知，前端页面向服务端发送请求是受<code>同源策略</code>影响的，即存在<code>跨域问题</code>，但是服务器与服务器之前是不受<code>同源策略</code>影响的，即服务器之间相互请求数据是没有<code>跨域问题</code>的，因此当我们向一个没有设置<code>允许跨域请求(&quot;access-control-allow-origin&quot;)</code>后端服务器请求数据时，是没有办法请求到数据的，但是我们可以通过<code>node</code>作为一个<code>中间件客户端</code>来时用，即前端向<code>node</code>请求数据，<code>node</code>向目标服务器请求数据后再返回给前端，这就能实现即便目标服务器没有设置允许跨域，我们同样能请求到数据。这就是<code>node</code>的一个非常的强大之处。</strong><br><img src="/../upload/nodejs/n1/15.png" alt="image"></li></ul><h3 id="代码展示："><a href="#代码展示：" class="headerlink" title="代码展示："></a>代码展示：</h3><ul><li><strong>服务端(<code>get.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置模块: http模块 - get模块</span></span><br><span class="line"><span class="comment">// 应用场景: 前端页面通过以node为中间件来向猫眼电影的接口请求数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入http模块和url模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 获取网页url参数种的pathname</span></span><br><span class="line">    <span class="keyword">var</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>,<span class="literal">true</span>)<span class="comment">//设置解析true</span></span><br><span class="line">    <span class="comment">// 设置cors请求头跨域问题</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span> , &#123;</span><br><span class="line">        <span class="comment">//设置文本渲染类型</span></span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span><br><span class="line">        <span class="comment">// 设置允许所有跨域请求的cors请求头</span></span><br><span class="line">        <span class="string">&quot;access-control-allow-origin&quot;</span>:<span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">switch</span>(urlObj.<span class="property">pathname</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/maoyan&#x27;</span>:</span><br><span class="line">            <span class="title function_">httpsget</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;<span class="comment">//将形参设置为函数便于携带数据</span></span><br><span class="line">                res.<span class="title function_">end</span>(data)</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> : </span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动,3000端口正在监听!!!&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置get请求,向猫眼电影请求数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">httpsget</span>(<span class="params">cd</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">&quot;&quot;</span><span class="comment">//创建数据接收变量</span></span><br><span class="line">    <span class="comment">// 使用https模块向猫眼电影的接口请求数据</span></span><br><span class="line">    https.<span class="title function_">get</span>(<span class="string">`https://i.maoyan.com/api/mmdb/movie/v3/list/hot.json?ct=%E6%B1%9F%E9%97%A8&amp;ci=277&amp;channelId=4`</span>,<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;111&#x27;+ res);//无法直接接收到数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据接收流程如下:</span></span><br><span class="line">        <span class="comment">// 1.设置监听事件来监听数据的接收(数据接收阶段)</span></span><br><span class="line">        res.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;<span class="comment">//接收数据流</span></span><br><span class="line">            data += chunk</span><br><span class="line">        &#125;) </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.数据接收完成发送给前端(数据接收完成)</span></span><br><span class="line">        res.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>,<span class="function">()=&gt;</span>&#123;<span class="comment">//数据接收完毕</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">            <span class="title function_">cd</span>(data)</span><br><span class="line">            <span class="comment">// 切记异步编程不能使用return,使用return返回的是undefined</span></span><br><span class="line">            <span class="comment">// 可以使用promise来获取数据</span></span><br><span class="line">            <span class="comment">// 后面学习到event模块可以解决</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>前端页面(<code>get.html</code>)</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>get请求数据(node中间运送数据)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 服务端已设置好跨域,直接发送请求即可</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:3000/maoyan&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>())<span class="comment">//做json格式的转换,原数据格式为字符串</span></span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-4"><a href="#结果展示-4" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>服务端成功输出获取到的数据</strong><br><img src="/../upload/nodejs/n1/16.png" alt="image"></p></li><li><p><strong>前端网页数据也获取成功</strong><br><img src="/../upload/nodejs/n1/17.png" alt="image"></p></li></ul><h2 id="http模块扩展-post"><a href="#http模块扩展-post" class="headerlink" title="http模块扩展-post"></a><code>http</code>模块扩展-<code>post</code></h2><ul><li><strong>与<code>get</code>很相似,不过与之不一样的是请求参数的携带的地方,<code>get</code>请求是写在<code>url</code>中的,而<code>post</code>请求是写在请求体中的,通过<code>req.write()</code>来写入</strong></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong>服务端(<code>post.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置模块: http模块 - post模块</span></span><br><span class="line"><span class="comment">// 应用场景: 前端页面通过以node为中间件来向小米优品的接口请求数据</span></span><br><span class="line"><span class="comment">// 与get相比,发送post请求需要给请求体携带上相对应的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.引入http模块和url模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req , res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 获取网页url参数种的pathname</span></span><br><span class="line">    <span class="keyword">var</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>,<span class="literal">true</span>)<span class="comment">//设置解析true</span></span><br><span class="line">    <span class="comment">// 设置cors请求头跨域问题</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span> , &#123;</span><br><span class="line">        <span class="comment">//设置文本渲染类型</span></span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span><br><span class="line">        <span class="comment">// 设置允许所有跨域请求的cors请求头</span></span><br><span class="line">        <span class="string">&quot;access-control-allow-origin&quot;</span>:<span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">switch</span>(urlObj.<span class="property">pathname</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/xiaomi&#x27;</span>:</span><br><span class="line">            <span class="title function_">httpspost</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;<span class="comment">//将形参设置为函数便于携带数据</span></span><br><span class="line">                res.<span class="title function_">end</span>(data)</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> : </span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动,3000端口正在监听!!!&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置get请求,向猫眼电影请求数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">httpspost</span>(<span class="params">cd</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">&quot;&quot;</span><span class="comment">//创建数据接收变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置请求对象</span></span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        <span class="attr">hostname</span>: <span class="string">&quot;m.xiaomiyoupin.com&quot;</span>,<span class="comment">//域名</span></span><br><span class="line">        <span class="attr">port</span>:<span class="string">&quot;443&quot;</span>,<span class="comment">//端口号</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/mtop/mf/resource/data/batchList&quot;</span>,<span class="comment">//路径</span></span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,<span class="comment">//请求方法</span></span><br><span class="line">        <span class="attr">headers</span>:&#123;<span class="comment">//设置请求头</span></span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span>,<span class="comment">//请求数据的格式</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用https模块向小米优品的接口请求数据</span></span><br><span class="line">    <span class="keyword">var</span> req = https.<span class="title function_">request</span>(options,<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据接收流程如下:</span></span><br><span class="line">        <span class="comment">// 1.设置监听事件来监听数据的接收(数据接收阶段)</span></span><br><span class="line">        res.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;<span class="comment">//接收数据流</span></span><br><span class="line">            data += chunk</span><br><span class="line">        &#125;) </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.数据接收完成发送给前端(数据接收完成)</span></span><br><span class="line">        res.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>,<span class="function">()=&gt;</span>&#123;<span class="comment">//数据接收完毕</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">            <span class="title function_">cd</span>(data)</span><br><span class="line">            <span class="comment">// 切记异步编程不能使用return,使用return返回的是undefined</span></span><br><span class="line">            <span class="comment">// 可以使用promise来获取数据</span></span><br><span class="line">            <span class="comment">// 后面学习到event模块可以解决</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置请求体的参数(一定要设置这个参数才能响应返回数据)</span></span><br><span class="line">    <span class="comment">// 相当于get请求url种携带的一些参数,不过post的这些参数是写在请求体里面的而已</span></span><br><span class="line">    req.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>([&#123;&#125;,[<span class="string">&quot;newer_popup_ad&quot;</span>,<span class="string">&quot;download_options&quot;</span>]]))</span><br><span class="line">    req.<span class="title function_">end</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>前端页面(<code>post.html</code>)</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>post请求数据(node中间运送数据)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 服务端已设置好跨域,直接发送请求即可</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:3000/xiaomi&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>())<span class="comment">//做json格式的转换,原数据格式为字符串</span></span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-5"><a href="#结果展示-5" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>服务端成功输出获取到的数据</strong><br><img src="/../upload/nodejs/n1/18.png" alt="image"></p></li><li><p><strong>前端网页数据也获取成功</strong><br><img src="/../upload/nodejs/n1/19.png" alt="image"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> 内置模块 </tag>
            
            <tag> http模块 </tag>
            
            <tag> get </tag>
            
            <tag> post </tag>
            
            <tag> jsonp </tag>
            
            <tag> cors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记(1)-模块化(暴露和引入)以及npm的基本使用</title>
      <link href="/2022/10/27/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
      <url>/2022/10/27/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="node的暴露和引入"><a href="#node的暴露和引入" class="headerlink" title="node的暴露和引入"></a><code>node</code>的暴露和引入</h1><ul><li><p><strong><a href="https://www.nodeapp.cn/">官方文档</a></strong></p></li><li><p><strong>为什么需要暴露, 在项目的开发过程中,我们不可能在在一个文件当中写上所有的<code>js</code>代码,一般是将<code>js</code>代码分解成一个一个独立的模块,随后在项目所要用到的地方引用即可, 这就涉及了模块化的<code>暴露</code>和<code>引入</code>了 !</strong></p></li><li><p><strong>要知道我们的<code>node</code>遵循的是<code>commonJs</code>语法,因此, 我们可以把公共的功能 抽离成为一个单独的 js 文件 作为一个模块，默认情况下面这个模块里面的方法或者属性，外面是没法访问的。如果要让外部可以访问模块里面的方法或者属性，就必须在模块里面通过 exports 或者 module.exports 暴露属性或者方法。</strong></p></li></ul><h2 id="commonJS规范的模块暴露和引入-node默认"><a href="#commonJS规范的模块暴露和引入-node默认" class="headerlink" title="commonJS规范的模块暴露和引入(node默认)"></a><code>commonJS</code>规范的模块暴露和引入(<code>node</code>默认)</h2><h3 id="commonJS暴露的两种方法"><a href="#commonJS暴露的两种方法" class="headerlink" title="commonJS暴露的两种方法:"></a><code>commonJS</code>暴露的两种方法:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;需要暴露的模块&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">xxx</span> = 模块里面的某个接口(方法,函数)</span><br></pre></td></tr></table></figure><h3 id="commonJS的引入"><a href="#commonJS的引入" class="headerlink" title="commonJS的引入"></a><code>commonJS</code>的引入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xxx = <span class="built_in">require</span>(<span class="string">&#x27;./模块的相对路径&#x27;</span>) <span class="comment">//切记 xxx(模块) 最后生成的是一个对象</span></span><br></pre></td></tr></table></figure><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong>文件目录如下(在不同的文件当中引入和暴露)</strong></li></ul><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># 模块化</span></span><br><span class="line">   └── 01-暴露和引入 # 项目文件夹</span><br><span class="line"><span class="code">       ├── index.js # 接收引入暴露的模块</span></span><br><span class="line"><span class="code">       └── module1.js # 暴露模块</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>index.js</code>(引入接收暴露过来的模块)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入 暴露的模块</span></span><br><span class="line"><span class="keyword">const</span> mokuai = <span class="built_in">require</span>(<span class="string">&#x27;./module1&#x27;</span>) <span class="comment">//切记 mokuai(模块) 最后生成的是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.输出暴露的模块, 由此可以看到,我们是以对象的形式接收暴露过来的模块的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mokuai);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.对象式引入模块时的调用方法</span></span><br><span class="line">mokuai.<span class="title function_">sayHi</span>()</span><br><span class="line">mokuai.<span class="title function_">add</span>(<span class="number">1</span> , <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li><strong><code>module1.js</code>(暴露模块的<code>js</code>文件)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node 模块化暴露的两种方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello! Node&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a , b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`相加结果为: <span class="subst">$&#123;a+b&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一:****************************************</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.单独引入某一个方法或对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = sayHi </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.对象式引入(推荐使用)</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    sayHi,</span><br><span class="line">    add</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二: (分别暴露) ******************************</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sayHi</span> = sayHi</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = add</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n1/1.png" alt="image"></p><h2 id="ES-JS规范的模块化暴露和引入-需要单独设置"><a href="#ES-JS规范的模块化暴露和引入-需要单独设置" class="headerlink" title="ES.JS规范的模块化暴露和引入(需要单独设置)"></a><code>ES.JS</code>规范的模块化暴露和引入(需要单独设置)</h2><ul><li><strong>从<code>node</code>版本13.2之后, 在舆论的压力下, <code>node</code>开始引入和支持<code>ES</code>的模块化语法了,蛋是一直是处于实验性阶段, 官方也不推荐使用</strong></li><li><strong>使用的前提条件是两者选其一:</strong><ul><li><strong>1. 在模块的<code>package.json</code>中添加 <code>&quot;type&quot; : &quot;module&quot;</code></strong></li><li><strong>2. 封装的模块使用<code>mjs</code>为后缀</strong></li></ul></li></ul><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程:"></a>使用流程:</h3><ul><li><strong>文件目录如下(在不同的文件当中引入和暴露)</strong></li></ul><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># 模块化</span></span><br><span class="line"><span class="code">    └── 02-ES模块化写法 # 项目文件夹</span></span><br><span class="line"><span class="code">        ├── index.js # 接收引入暴露的模块</span></span><br><span class="line"><span class="code">        └── module.js # 暴露模块</span></span><br></pre></td></tr></table></figure><ol><li><strong>首先使用创建<code>package.json</code>文件</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p><img src="/../upload/nodejs/n1/2.png" alt="image"></p><ol><li><strong>封装模块(<code>module.js</code>)</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES规范暴露模块(顺便做一个复习)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建方法(函数):</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello! Node&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a , b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`相加结果为: <span class="subst">$&#123;a+b&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    sayHi,</span><br><span class="line">    add</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.统一暴露</span></span><br><span class="line"><span class="keyword">export</span> &#123;sayHi,add&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add1</span>(<span class="params">a , b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`相加结果为: <span class="subst">$&#123;a+b&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>引入接收暴露过来的模块(<code>index.js</code>)</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES规范引入</span></span><br><span class="line"><span class="comment">// 1. 简便引入只能针对默认暴露</span></span><br><span class="line"><span class="comment">// import mokuai from &#x27;./module.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通用引入(所有暴露方法都能使用)</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mokuai <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 解构赋值引入</span></span><br><span class="line"><span class="keyword">import</span> &#123;sayHi , add&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mokuai);<span class="comment">//全局引入和简便引入的结果</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( sayHi, add);<span class="comment">//解构赋值引入的结果</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/nodejs/n1/3.png" alt="image"></p><h1 id="npm的基本使用-指令"><a href="#npm的基本使用-指令" class="headerlink" title="npm的基本使用(指令)"></a><code>npm</code>的基本使用(指令)</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init  <span class="comment">//初始化项目,编写 package.json 文件</span></span><br><span class="line">npm install 包名 –g  （uninstall,update） <span class="comment">//安装,卸载和更新包</span></span><br><span class="line">npm install 包名 --save-dev (uninstall,update) <span class="comment">//安装,卸载和更新包</span></span><br><span class="line">npm list -g (不加-g，列举当前目录下的安装包)</span><br><span class="line">npm info 包名（详细信息） npm info 包名 <span class="title function_">version</span>(获取最新版本)</span><br><span class="line">npm install md5@<span class="number">1</span>（安装指定版本）</span><br><span class="line">npm <span class="title function_">outdated</span>(  检查包是否已经过时)</span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json中的一些依赖问题</span></span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;    <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>  &#125;  ^ 表示 如果 直接npm install 将会 安md5</span><br><span class="line">    <span class="number">2.</span>*.*  最新版本</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;    <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;~2.1.0&quot;</span>  &#125;  ~ 表示 如果 直接npm install 将会 安装md5 <span class="number">2.1</span>.*  最新版本</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;    <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;*&quot;</span>  &#125;  * 表示 如果 直接npm install 将会 安装 md5  最新版本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es6 </tag>
            
            <tag> node.js </tag>
            
            <tag> commonJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(17)-webpack在Vue项目当中的应用(3)-两种模式的合并配置以及优化配置</title>
      <link href="/2022/10/13/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B017/"/>
      <url>/2022/10/13/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B017/</url>
      
        <content type="html"><![CDATA[<h1 id="两种模式的合并（合并开发和生产配置）"><a href="#两种模式的合并（合并开发和生产配置）" class="headerlink" title="两种模式的合并（合并开发和生产配置）"></a>两种模式的合并（合并开发和生产配置）</h1><ul><li><strong>好处：合并过后，我们就只需要 一个<code>webpack.config.js</code>文件即可,不在需要两个配置文件了(<code>webpack.dev.js</code>,<code>webpack.prod.js</code>)</strong></li></ul><h2 id="合并流程"><a href="#合并流程" class="headerlink" title="合并流程:"></a>合并流程:</h2><ol><li><strong>新建<code>webpack.config.js</code>文件</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js[合并配置]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);<span class="comment">//css压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);<span class="comment">//css压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);<span class="comment">//内置语法插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);<span class="comment">//图片压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;vue-loader&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">DefinePlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);<span class="comment">//webpack中专门用于定义环境变量的插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先判断该当前的环境变量(判断其是否为生产模式)</span></span><br><span class="line"><span class="keyword">const</span> isProduction = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyleLoaders</span> = (<span class="params">preProcessor</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 设置判断模式</span></span><br><span class="line">    isProduction ? <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span> : <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    preProcessor,</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出路径设置判断(生产模式设置输出路径, 开发模式:undefined)</span></span><br><span class="line">    <span class="attr">path</span>: isProduction ? path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>): <span class="literal">undefined</span> ,</span><br><span class="line">    <span class="comment">// 生产模式带哈希值,开发模式不带哈希值</span></span><br><span class="line">    <span class="attr">filename</span>: isProduction ? <span class="string">&quot;static/js/[name].[contenthash:10].js&quot;</span> : <span class="string">&quot;static/js/[name].js&quot;</span>,</span><br><span class="line">    <span class="comment">// 生产模式带哈希值,开发模式不带哈希值</span></span><br><span class="line">    <span class="attr">chunkFilename</span>: isProduction ? <span class="string">&quot;static/js/[name].[contenthash:10].chunk.js&quot;</span> : <span class="string">&quot;static/js/[name].chunk.js&quot;</span>,</span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&quot;static/js/[hash:10][ext][query]&quot;</span>,</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">cacheDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">cacheCompression</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="comment">// &quot;@babel/plugin-transform-runtime&quot; // presets中包含了</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// vue-loader不支持oneOf</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;vue-loader&quot;</span>, <span class="comment">// 内部会给vue文件注入HMR功能代码</span></span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 开启缓存</span></span><br><span class="line">          <span class="attr">cacheDirectory</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">            __dirname,</span><br><span class="line">            <span class="string">&quot;node_modules/.cache/vue-loader&quot;</span></span><br><span class="line">          ),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">      <span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">        __dirname,</span><br><span class="line">        <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">      ),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    isProduction &amp;&amp; <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>(&#123;<span class="comment">//生产模式才需要CopyPlugin</span></span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public&quot;</span>),</span><br><span class="line">          <span class="attr">to</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>),</span><br><span class="line">          <span class="attr">toType</span>: <span class="string">&quot;dir&quot;</span>,</span><br><span class="line">          <span class="attr">noErrorOnMissing</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [<span class="string">&quot;**/index.html&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">info</span>: &#123;</span><br><span class="line">            <span class="attr">minimized</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">    isProduction &amp;&amp; <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;<span class="comment">//生产模式才需要压缩css</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;static/css/[name].[contenthash:10].css&quot;</span>,</span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">&quot;static/css/[name].[contenthash:10].chunk.css&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>),<span class="comment">//过滤掉不需要使用的环境变量(根据模式的不同按需使用)</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 压缩的操作</span></span><br><span class="line">    <span class="comment">// minimize配置项</span></span><br><span class="line">    <span class="comment">// 指定 webpack 默认使用 terser-webpack-plugin 来压缩 JS 代码，或者使用其它在optimization.minimizer定义的插件。</span></span><br><span class="line">    <span class="attr">minimize</span>: isProduction,<span class="comment">//生产模式才需要压缩,设置判断条件,这个配置项默认是true。</span></span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserWebpackPlugin</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">minimizer</span>: &#123;</span><br><span class="line">          <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">              [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">              [</span><br><span class="line">                <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                      <span class="attr">params</span>: &#123;</span><br><span class="line">                        <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                      &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">runtimeChunk</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="function">(<span class="params">entrypoint</span>) =&gt;</span> <span class="string">`runtime~<span class="subst">$&#123;entrypoint.name&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.vue&quot;</span>, <span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//开发服务器</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span>, <span class="comment">// 解决vue-router刷新404问题</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断模式</span></span><br><span class="line">  <span class="attr">mode</span>: isProduction ? <span class="string">&quot;production&quot;</span> : <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: isProduction ? <span class="string">&quot;source-map&quot;</span> : <span class="string">&quot;cheap-module-source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>最大的改动就是,设置一个判断条件<code>isProduction</code>用于判断当前的状态(模式)</strong></li></ul><ol start="2"><li><strong>重新修改<code>package.json</code>中的运行指令</strong></li></ol><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=development webpack serve --config ./config/webpack.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production webpack --config ./config/webpack.config.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>运行指令进行项目的打包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开发模式</span></span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产模式</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h1 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h1><ul><li><strong><code>Vue</code>结合<code>ElementPlus</code>组件库进行使用</strong></li><li><strong><a href="https://element-plus.gitee.io/zh-CN/guide/quickstart.html">官方文档</a></strong></li></ul><h2 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h2><ol><li><strong>下载<code>ElementPlus</code></strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i element-plus</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>在<code>main.js</code>中全局引入</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是Vue3</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span><span class="comment">//引入 createApp</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部引入elementPlus</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建app并挂载到对应的元素上</span></span><br><span class="line"><span class="comment">// 调用elementPlus应在创建之后,挂载之前</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>).<span class="title function_">mount</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>随后直接在组件中引用即可(这里引用<code>el-button</code>[按键]展示)</strong></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span>hello! App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 直接引用ui组件库内的button组件即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 路由显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Home</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>运行打包指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开发模式打包</span></span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产模式打包</span></span><br><span class="line">npm run server</span><br></pre></td></tr></table></figure><h2 id="按需引入"><a href="#按需引入" class="headerlink" title="按需引入"></a>按需引入</h2><ul><li><strong>相较于全局引入,按需引入能够减小打包体积,但是步骤相较来讲会繁琐一点</strong></li><li><strong><a href="https://element-plus.gitee.io/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5">官方文档</a></strong></li></ul><ol><li><strong>下载包<code>ElementPlus</code>(下载过就不需要再下载了)</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i element-plus</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>安装<code>unplugin-vue-components</code> 和 <code>unplugin-auto-import</code>这两款插件</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>然后把下列代码插入到 <code>Webpack</code> 的配置文件中</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AutoImport</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-auto-import/webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Components</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-vue-components/webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>完整的<code>webpack.config.js</code>代码</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js[合并配置]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);<span class="comment">//css压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);<span class="comment">//css压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);<span class="comment">//内置语法插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);<span class="comment">//图片压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;vue-loader&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">DefinePlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);<span class="comment">//webpack中专门用于定义环境变量的插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// elementplus的按需加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AutoImport</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-auto-import/webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Components</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-vue-components/webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先判断该当前的环境变量(判断其是否为生产模式)</span></span><br><span class="line"><span class="keyword">const</span> isProduction = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyleLoaders</span> = (<span class="params">preProcessor</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 设置判断模式</span></span><br><span class="line">    isProduction ? <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span> : <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    preProcessor,</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出路径设置判断(生产模式设置输出路径, 开发模式:undefined)</span></span><br><span class="line">    <span class="attr">path</span>: isProduction ? path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>): <span class="literal">undefined</span> ,</span><br><span class="line">    <span class="comment">// 生产模式带哈希值,开发模式不带哈希值</span></span><br><span class="line">    <span class="attr">filename</span>: isProduction ? <span class="string">&quot;static/js/[name].[contenthash:10].js&quot;</span> : <span class="string">&quot;static/js/[name].js&quot;</span>,</span><br><span class="line">    <span class="comment">// 生产模式带哈希值,开发模式不带哈希值</span></span><br><span class="line">    <span class="attr">chunkFilename</span>: isProduction ? <span class="string">&quot;static/js/[name].[contenthash:10].chunk.js&quot;</span> : <span class="string">&quot;static/js/[name].chunk.js&quot;</span>,</span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&quot;static/js/[hash:10][ext][query]&quot;</span>,</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">cacheDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">cacheCompression</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="comment">// &quot;@babel/plugin-transform-runtime&quot; // presets中包含了</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// vue-loader不支持oneOf</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;vue-loader&quot;</span>, <span class="comment">// 内部会给vue文件注入HMR功能代码</span></span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 开启缓存</span></span><br><span class="line">          <span class="attr">cacheDirectory</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">            __dirname,</span><br><span class="line">            <span class="string">&quot;node_modules/.cache/vue-loader&quot;</span></span><br><span class="line">          ),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">      <span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">        __dirname,</span><br><span class="line">        <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">      ),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    isProduction &amp;&amp; <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>(&#123;<span class="comment">//生产模式才需要CopyPlugin</span></span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public&quot;</span>),</span><br><span class="line">          <span class="attr">to</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>),</span><br><span class="line">          <span class="attr">toType</span>: <span class="string">&quot;dir&quot;</span>,</span><br><span class="line">          <span class="attr">noErrorOnMissing</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [<span class="string">&quot;**/index.html&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">info</span>: &#123;</span><br><span class="line">            <span class="attr">minimized</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">    isProduction &amp;&amp; <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;<span class="comment">//生产模式才需要压缩css</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;static/css/[name].[contenthash:10].css&quot;</span>,</span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">&quot;static/css/[name].[contenthash:10].chunk.css&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//elementPlus的按需加载 </span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>),<span class="comment">//过滤掉不需要使用的环境变量(根据模式的不同按需使用)</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 压缩的操作</span></span><br><span class="line">    <span class="comment">// minimize配置项</span></span><br><span class="line">    <span class="comment">// 指定 webpack 默认使用 terser-webpack-plugin 来压缩 JS 代码，或者使用其它在optimization.minimizer定义的插件。</span></span><br><span class="line">    <span class="attr">minimize</span>: isProduction,<span class="comment">//生产模式才需要压缩,设置判断条件,这个配置项默认是true。</span></span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserWebpackPlugin</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">minimizer</span>: &#123;</span><br><span class="line">          <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">              [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">              [</span><br><span class="line">                <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                      <span class="attr">params</span>: &#123;</span><br><span class="line">                        <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                      &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">runtimeChunk</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="function">(<span class="params">entrypoint</span>) =&gt;</span> <span class="string">`runtime~<span class="subst">$&#123;entrypoint.name&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.vue&quot;</span>, <span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//开发服务器</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span>, <span class="comment">// 解决vue-router刷新404问题</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断模式</span></span><br><span class="line">  <span class="attr">mode</span>: isProduction ? <span class="string">&quot;production&quot;</span> : <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: isProduction ? <span class="string">&quot;source-map&quot;</span> : <span class="string">&quot;cheap-module-source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>随后在要使用到的组件当中引入对应的样式模块(这里展示<code>App.vue</code>)</strong></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span>hello! App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 直接引用ui组件库内的button组件即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 路由显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 按需引入elementPlus的样式组件(按需引入)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;<span class="title class_">ElButton</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Home</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">ElButton</span>,<span class="comment">//注册样式组件(按需引入)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li><strong>不需要在<code>main.js</code>中设置</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是Vue3</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span><span class="comment">//引入 createApp</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部引入elementPlus</span></span><br><span class="line"><span class="comment">// import ElementPlus from &#x27;element-plus&#x27;</span></span><br><span class="line"><span class="comment">// import &#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建app并挂载到对应的元素上</span></span><br><span class="line"><span class="comment">// 调用elementPlus应在创建之后,挂载之前</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">    .<span class="title function_">use</span>(router)</span><br><span class="line">    <span class="comment">// .use(ElementPlus)</span></span><br><span class="line">    .<span class="title function_">mount</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure><ol start="7"><li><strong>运行打包指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开发模式打包</span></span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产模式打包</span></span><br><span class="line">npm run server</span><br></pre></td></tr></table></figure><h3 id="结果展示-全局引入和按需引入都是一样的结果"><a href="#结果展示-全局引入和按需引入都是一样的结果" class="headerlink" title="结果展示(全局引入和按需引入都是一样的结果)"></a>结果展示(全局引入和按需引入都是一样的结果)</h3><p><img src="/../upload/webpack/w4/3.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> webpack项目篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(16)-webpack在Vue项目当中的应用(2)-生产模式</title>
      <link href="/2022/10/13/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B016/"/>
      <url>/2022/10/13/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B016/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack在Vue项目当中的应用-2-生产模式"><a href="#webpack在Vue项目当中的应用-2-生产模式" class="headerlink" title="webpack在Vue项目当中的应用(2)-生产模式"></a>webpack在Vue项目当中的应用(2)-生产模式</h1><ul><li><a href="https://vue-loader.vuejs.org/zh/">Vue-loader的官方文档</a></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用:"></a>基本使用:</h2><ol><li><strong>下载<code>vue-loader</code>(已下载过就不需要重新下载)</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D vue-loader vue-template-compiler</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>下载其他的依赖(<code>plugin</code> , <code>loader</code>等..)(已下载过就不需要重新下载)</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">什么插件没下就下什么插件</span><br><span class="line">npm i mini-css-extract-plugin css-minimizer-webpack-plugin terser-webpack-plugin image-minimizer-webpack-plugin -D</span><br><span class="line"></span><br><span class="line">npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D</span><br><span class="line"></span><br><span class="line">npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D</span><br><span class="line"></span><br><span class="line">npm i copy-webpack-plugin -D</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>配置<code>webpack.prod.js</code>文件</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);<span class="comment">//css压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);<span class="comment">//css压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);<span class="comment">//内置语法插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);<span class="comment">//图片压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;vue-loader&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">DefinePlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);<span class="comment">//webpack中专门用于定义环境变量的插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyleLoaders</span> = (<span class="params">preProcessor</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    preProcessor,</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/[name].[contenthash:10].js&quot;</span>,</span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&quot;static/js/[name].[contenthash:10].chunk.js&quot;</span>,</span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&quot;static/js/[hash:10][ext][query]&quot;</span>,</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">cacheDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">cacheCompression</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="comment">// &quot;@babel/plugin-transform-runtime&quot; // presets中包含了</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// vue-loader不支持oneOf</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;vue-loader&quot;</span>, <span class="comment">// 内部会给vue文件注入HMR功能代码</span></span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 开启缓存</span></span><br><span class="line">          <span class="attr">cacheDirectory</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">            __dirname,</span><br><span class="line">            <span class="string">&quot;node_modules/.cache/vue-loader&quot;</span></span><br><span class="line">          ),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">      <span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">        __dirname,</span><br><span class="line">        <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">      ),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public&quot;</span>),</span><br><span class="line">          <span class="attr">to</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>),</span><br><span class="line">          <span class="attr">toType</span>: <span class="string">&quot;dir&quot;</span>,</span><br><span class="line">          <span class="attr">noErrorOnMissing</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [<span class="string">&quot;**/index.html&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">info</span>: &#123;</span><br><span class="line">            <span class="attr">minimized</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;static/css/[name].[contenthash:10].css&quot;</span>,</span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">&quot;static/css/[name].[contenthash:10].chunk.css&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 压缩的操作</span></span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserWebpackPlugin</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">minimizer</span>: &#123;</span><br><span class="line">          <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">              [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">              [</span><br><span class="line">                <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                      <span class="attr">params</span>: &#123;</span><br><span class="line">                        <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                      &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">runtimeChunk</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="function">(<span class="params">entrypoint</span>) =&gt;</span> <span class="string">`runtime~<span class="subst">$&#123;entrypoint.name&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.vue&quot;</span>, <span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>配置<code>.eslintrc.js</code>文件</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Eslint语法检查</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="attr">node</span>: <span class="literal">true</span>,<span class="comment">//启用node的环境变量</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extends</span>: [<span class="string">&quot;plugin:vue/vue3-essential&quot;</span>, <span class="string">&quot;eslint:recommended&quot;</span>],<span class="comment">//继承vue3的官方规则和eslint默认的规则</span></span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">      <span class="attr">parser</span>: <span class="string">&quot;@babel/eslint-parser&quot;</span>,<span class="comment">//解析选项使用babel</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>配置<code>babel.config.js</code>文件</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">presets</span>: [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],<span class="comment">//预设使用vue团队的即可</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>随便配置点<code>Vue</code>代码</strong></li></ol><ul><li><strong><code>main.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是Vue3</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span><span class="comment">//引入 createApp</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建app并挂载到对应的元素上</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li><strong><code>router.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter , createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由懒加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="string">&#x27;../views/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="string">&#x27;../views/About&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 路由模式</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    <span class="comment">// 路由规则配置</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong><code>App.vue</code></strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span>hello! App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 路由显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Home</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.app</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li><strong>配置运行指令(再<code>package.json</code>中)</strong></li></ol><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=development webpack serve --config ./config/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production webpack --config ./config/webpack.prod.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol start="8"><li><strong>初始化项目以及运行指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包项目</span></span><br><span class="line">npm build</span><br></pre></td></tr></table></figure><h3 id="结果展示-可以成功运行"><a href="#结果展示-可以成功运行" class="headerlink" title="结果展示:(可以成功运行)"></a>结果展示:(可以成功运行)</h3><p><img src="/../upload/webpack/w4/2.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> webpack项目篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(15)-webpack在Vue项目当中的应用(1)-开发模式</title>
      <link href="/2022/10/13/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B015/"/>
      <url>/2022/10/13/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B015/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack在Vue项目当中的应用-开发模式"><a href="#webpack在Vue项目当中的应用-开发模式" class="headerlink" title="webpack在Vue项目当中的应用-开发模式"></a>webpack在Vue项目当中的应用-开发模式</h1><ul><li><strong><a href="https://vue-loader.vuejs.org/zh/">Vue-loader的官方文档</a></strong></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用:"></a>基本使用:</h2><ol><li><strong>下载<code>vue-loader</code></strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D vue-loader vue-template-compiler</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>下载其他的依赖(<code>plugin</code> , <code>loader</code>等..)</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">什么插件没下就下什么插件</span><br><span class="line">npm i vue-style-loader eslint-webpack-plugin html-webpack-plugin vue-loader webpack copy-webpack-plugin css-loader postcss-loader postcss-preset-env less-loader babel-loader webpack-cli webpack-dev-server -D</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>配置<code>webpack.dev.js</code>文件</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;vue-loader&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">DefinePlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);<span class="comment">//webpack中专门用于定义环境变量的插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装的一个获取样式的函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyleLoaders</span> = (<span class="params">preProcessor</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&quot;vue-style-loader&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//处理css兼容性问题</span></span><br><span class="line">      <span class="comment">//配合package.json中的browserslist来指定兼容性</span></span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    preProcessor,</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="literal">undefined</span>,<span class="comment">//开发模式没有输出 , 使用的是开发服务器</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/[name].js&quot;</span>,  </span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&quot;static/js/[name].chunk.js&quot;</span>,</span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&quot;static/js/[hash:10][ext][query]&quot;</span>, <span class="comment">// 本地资源命名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">cacheDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">cacheCompression</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="comment">// &quot;@babel/plugin-transform-runtime&quot; // presets中包含了</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// vue-loader不支持oneOf</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;vue-loader&quot;</span>, <span class="comment">// 内部会给vue文件注入HMR功能代码</span></span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 开启缓存</span></span><br><span class="line">          <span class="attr">cacheDirectory</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">            __dirname,</span><br><span class="line">            <span class="string">&quot;node_modules/.cache/vue-loader&quot;</span></span><br><span class="line">          ),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 语法检查插件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">      <span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">        __dirname,</span><br><span class="line">        <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">      ),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// html资源整合插件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public&quot;</span>),</span><br><span class="line">          <span class="attr">to</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>),</span><br><span class="line">          <span class="attr">toType</span>: <span class="string">&quot;dir&quot;</span>,</span><br><span class="line">          <span class="attr">noErrorOnMissing</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [<span class="string">&quot;**/index.html&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">info</span>: &#123;</span><br><span class="line">            <span class="attr">minimized</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="comment">// 解决页面警告</span></span><br><span class="line">    <span class="comment">//cross-env定义的环境变量是给打包工具使用的</span></span><br><span class="line">    <span class="comment">//DefinePlugin定义的环境变量是给源代码使用的,从而解决Vue3页面警告问题</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 压缩优化设置区域   </span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 代码分割</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">runtimeChunk</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="function">(<span class="params">entrypoint</span>) =&gt;</span> <span class="string">`runtime~<span class="subst">$&#123;entrypoint.name&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//webpack解析模块的加载选项问题</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.vue&quot;</span>, <span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>], <span class="comment">// 自动补全文件扩展名，让vue可以使用</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//开发服务器</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span>, <span class="comment">// 解决vue-router刷新404问题</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>配置<code>.eslintrc.js</code>文件</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Eslint语法检查</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="attr">node</span>: <span class="literal">true</span>,<span class="comment">//启用node的环境变量</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extends</span>: [<span class="string">&quot;plugin:vue/vue3-essential&quot;</span>, <span class="string">&quot;eslint:recommended&quot;</span>],<span class="comment">//继承vue3的官方规则和eslint默认的规则</span></span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">      <span class="attr">parser</span>: <span class="string">&quot;@babel/eslint-parser&quot;</span>,<span class="comment">//解析选项使用babel</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>配置<code>babel.config.js</code>文件</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">presets</span>: [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],<span class="comment">//预设使用vue团队的即可</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>随便配置点<code>Vue</code>代码</strong></li></ol><ul><li><strong><code>main.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是Vue3</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span><span class="comment">//引入 createApp</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建app并挂载到对应的元素上</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li><strong><code>router.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter , createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由懒加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="string">&#x27;../views/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="string">&#x27;../views/About&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 路由模式</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    <span class="comment">// 路由规则配置</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong><code>App.vue</code></strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span>hello! App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 路由显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Home</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.app</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li><strong>配置运行指令(再<code>package.json</code>中)</strong></li></ol><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=development webpack serve --config ./config/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production webpack --config ./config/webpack.prod.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol start="8"><li><strong>初始化项目以及运行指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包项目</span></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="结果展示-实现热模替换且其他功能运行成功"><a href="#结果展示-实现热模替换且其他功能运行成功" class="headerlink" title="结果展示:(实现热模替换且其他功能运行成功)"></a>结果展示:(实现热模替换且其他功能运行成功)</h3><p><img src="/../upload/webpack/w4/1.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> webpack项目篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(14)-高级篇(5)-优化代码运行性能篇(2)</title>
      <link href="/2022/10/12/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014/"/>
      <url>/2022/10/12/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Preload-amp-Prefetch"><a href="#1-Preload-amp-Prefetch" class="headerlink" title="1. Preload &amp; Prefetch"></a>1. <code>Preload</code> &amp; <code>Prefetch</code></h1><h2 id="为什么需要Preload-amp-Prefetch"><a href="#为什么需要Preload-amp-Prefetch" class="headerlink" title="为什么需要Preload &amp; Prefetch"></a>为什么需要<code>Preload</code> &amp; <code>Prefetch</code></h2><ul><li><strong>我们前面已经做了代码分割，同时会使用 <code>import</code> 动态导入语法来进行代码按需加载（我们也叫懒加载，比如路由懒加载就是这样实现的）。</strong></li><li><strong>但是加载速度还不够好，比如：是用户点击按钮时才加载这个资源的，如果资源体积很大，那么用户会感觉到明显卡顿效果。</strong></li><li><strong>我们想在浏览器空闲时间，加载后续需要使用的资源。我们就需要用上 <code>Preload</code> 或 <code>Prefetch</code> 技术。</strong></li></ul><h2 id="什么是Preload-amp-Prefetch"><a href="#什么是Preload-amp-Prefetch" class="headerlink" title="什么是Preload &amp; Prefetch"></a>什么是<code>Preload</code> &amp; <code>Prefetch</code></h2><ul><li><p><strong><code>Preload</code>：告诉浏览器立即加载资源。</strong></p></li><li><p><strong><code>Prefetch</code>：告诉浏览器在空闲时才开始加载资源。</strong></p></li></ul><h3 id="两者的共同点"><a href="#两者的共同点" class="headerlink" title="两者的共同点"></a>两者的共同点</h3><ul><li><strong>都只会加载资源，并不执行。</strong></li><li><strong>都有缓存。</strong></li></ul><h3 id="两者的不同点"><a href="#两者的不同点" class="headerlink" title="两者的不同点"></a>两者的不同点</h3><ul><li><strong><code>Preload</code>加载优先级高，<code>Prefetch</code>加载优先级低。</strong></li><li><strong><code>Preload</code>只能加载当前页面需要使用的资源，<code>Prefetch</code>可以加载当前页面资源，也可以加载下一个页面需要使用的资源。</strong></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>当前页面优先级高的资源用 <code>Preload</code> 加载。</strong></li><li><strong>下一个页面需要使用的资源用 <code>Prefetch</code> 加载。</strong></li></ul><h4 id="它们的问题：兼容性较差。"><a href="#它们的问题：兼容性较差。" class="headerlink" title="它们的问题：兼容性较差。"></a>它们的问题：兼容性较差。</h4><ul><li><strong>我们可以去 <a href="https://caniuse.com/">Can I Use</a> 网站查询 API 的兼容性问题。</strong></li><li><strong><code>Preload</code> 相对于 <code>Prefetch</code> 兼容性好一点。</strong></li></ul><h4 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a><a href="https://www.npmjs.com/package/@vue/preload-webpack-plugin">官方网站</a></h4><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li><strong>下载包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i @vue/preload-webpack-plugin -D</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置<code>webpack.prod.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 获取os内置模块</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入MiniCssExtractPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入CssMinimizerPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入Terser内置插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入图片压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入预加载插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PreloadWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;@vue/preload-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个函数用来获取样式处理的loader(提高代码复用率)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyleLoader</span>(<span class="params">pre</span>)&#123;<span class="comment">//pre为其他的loader,如less-loader</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// *************************************************************************</span></span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//将style-loder改成MiniCssExtractPlugin.loader</span></span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,<span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// postcss-loader处理css样式的兼容性问题(放在cssloder后面,lessloder前面)*****</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        pre,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)<span class="comment">//设置一个布尔值的filter来过滤掉undefined(存css样式不需要pre[即其他的loader])</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="comment">// 单入口</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 多入口</span></span><br><span class="line">    <span class="comment">// entry: &#123;</span></span><br><span class="line">    <span class="comment">//   main: &quot;./src/main.js&quot;,</span></span><br><span class="line">    <span class="comment">//   app: &quot;./src/app.js&quot;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>),<span class="comment">//相较于开发模式,生产模式需要输出</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件的输出名字(动态按需引入的js文件等)*******************************</span></span><br><span class="line">        <span class="attr">chunkFilename</span>: <span class="string">&#x27;static/js/[name].js&#x27;</span>,<span class="comment">//设置打包输出的其他文件命名</span></span><br><span class="line">        <span class="comment">// ***********************************************************************</span></span><br><span class="line">        </span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//需要输出就需要clean(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// oneOf配置, 每个文件只能被其中一个loader处理(第一个遇到的)************************</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// 1.处理css资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>()</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 2.处理less资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>(<span class="string">&quot;less-loader&quot;</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 3.处理图片资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>:&#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                                <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                                <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 4.处理字体资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 配置babel***********************************************</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                        <span class="comment">// Include/Exclude*******************************************</span></span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>:  path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含(两者只能用其一)</span></span><br><span class="line">                        <span class="comment">// **********************************************************</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            &#123;<span class="comment">//开启多线程编译打包***************************</span></span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            <span class="comment">//   *****************************************</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ],</span><br><span class="line">                          <span class="comment">// ********************************************************</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">                <span class="comment">// ****************************************************************************</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">            <span class="comment">// Include/Exclude******************</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="comment">// ********************************</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">              __dirname,</span><br><span class="line">              <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 开启多线程打包编译***************</span></span><br><span class="line">            threads, <span class="comment">// 开启多进程</span></span><br><span class="line">            <span class="comment">// *******************************</span></span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和输出路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预加载插件*************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PreloadWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">rel</span>: <span class="string">&quot;preload&quot;</span>, <span class="comment">// preload兼容性更好</span></span><br><span class="line">            <span class="attr">as</span>: <span class="string">&quot;script&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// rel: &#x27;prefetch&#x27; // prefetch兼容性更差</span></span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   *******************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// css压缩(新版本一般是放在下面的optimization中,压缩,优化均是)*********************</span></span><br><span class="line">        <span class="comment">// new CssMinimizerPlugin(),</span></span><br><span class="line">        <span class="comment">// ******************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启多线程需要重新手写 Terser 内置模块*********************************************</span></span><br><span class="line">    <span class="comment">// webpack5一般指定压缩地方为这里,上面也可以</span></span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="comment">// css压缩</span></span><br><span class="line">            <span class="comment">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),<span class="comment">//压缩css</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//js压缩   </span></span><br><span class="line">            <span class="comment">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;<span class="comment">//内置模块压缩js</span></span><br><span class="line">            <span class="attr">parallel</span>: threads <span class="comment">// 开启多进程</span></span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line">            <span class="comment">//图片压缩*******************************************</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">minimizer</span>: &#123;</span><br><span class="line">                <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                    [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">                    [</span><br><span class="line">                        <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="attr">plugins</span>: [</span><br><span class="line">                            <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                            &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                            <span class="attr">params</span>: &#123;</span><br><span class="line">                                <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">// *************************************************</span></span><br><span class="line">        ],</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 代码分割配置</span></span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">            <span class="comment">// 默认分割即可(spa单页面应用)</span></span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">            <span class="comment">// 以下是默认值</span></span><br><span class="line">            <span class="comment">// minSize: 20000, // 分割代码最小的大小</span></span><br><span class="line">            <span class="comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span><br><span class="line">            <span class="comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span><br><span class="line">            <span class="comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line">            <span class="comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span></span><br><span class="line">            <span class="comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class="line">            <span class="comment">// cacheGroups: &#123; // 组，哪些模块要打包到一个组</span></span><br><span class="line">            <span class="comment">//   defaultVendors: &#123; // 组名</span></span><br><span class="line">            <span class="comment">//     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">            <span class="comment">//     priority: -10, // 权重（越大越高）</span></span><br><span class="line">            <span class="comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">            <span class="comment">//   &#125;,</span></span><br><span class="line">            <span class="comment">//   default: &#123; // 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">            <span class="comment">//     minChunks: 2, // 这里的minChunks权重更大</span></span><br><span class="line">            <span class="comment">//     priority: -20,</span></span><br><span class="line">            <span class="comment">//     reuseExistingChunk: true,</span></span><br><span class="line">            <span class="comment">//   &#125;,</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,<span class="comment">//sourceMap生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果展示-这里展示preload-prefetch基本一致"><a href="#结果展示-这里展示preload-prefetch基本一致" class="headerlink" title="结果展示:(这里展示preload,prefetch基本一致)"></a>结果展示:(这里展示<code>preload</code>,<code>prefetch</code>基本一致)</h4><ul><li><p><strong>输出的<code>html</code>模板</strong><br><img src="/../upload/webpack/w3/15.png" alt="image"></p></li><li><p><strong>在浏览器开发工具中可以看到,浏览器一刷新,<code>sayhi.js</code>就加载了</strong><br><img src="/../upload/webpack/w3/10.gif" alt="image"></p></li></ul><h1 id="2-Core-js"><a href="#2-Core-js" class="headerlink" title="2. Core-js"></a>2. <code>Core-js</code></h1><h2 id="为什么需要Core-js"><a href="#为什么需要Core-js" class="headerlink" title="为什么需要Core-js?"></a>为什么需要<code>Core-js</code>?</h2><ul><li><strong>过去我们使用 <code>babel</code> 对 <code>js</code> 代码进行了兼容性处理，其中使用<code>@babel/preset-env </code>智能预设来处理兼容性问题。</strong></li><li><strong>它能将 <code>ES6</code> 的一些语法进行编译转换，比如箭头函数、点点点运算符等。但是如果是 <code>async</code> 函数、<code>promise</code> 对象、数组的一些方法（<code>includes</code>）等，它没办法处理。</strong></li><li><strong>所以此时我们 <code>js</code> 代码仍然存在兼容性问题，一旦遇到低版本浏览器会直接报错。所以我们想要将 <code>js</code> 兼容性问题彻底解决</strong></li></ul><h2 id="什么是Core-js"><a href="#什么是Core-js" class="headerlink" title="什么是Core-js"></a>什么是<code>Core-js</code></h2><ul><li><strong><code>core-js</code> 是专门用来做 ES6 以及以上 API 的 <code>polyfill</code>。</strong></li><li><strong><code>polyfill</code>翻译过来叫做垫片&#x2F;补丁。就是用社区上提供的一段代码，让我们在不兼容某些新特性的浏览器上，使用该新特性。</strong></li></ul><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li><strong>修改 <code>main.js</code>(添加<code>es7</code>新语法(<code>includes</code>))</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入js文件</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./js/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&#x27;./js/sum&#x27;</span></span><br><span class="line"><span class="comment">// 引入css资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// 引入less资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./less/index.less&#x27;</span></span><br><span class="line"><span class="comment">// 引入字体样式(切记是字体样式并非字体)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/iconfont.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">3</span> , <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮点击事件实现 按需加载 ,动态导入</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 动态导入 --&gt; 实现按需加载</span></span><br><span class="line">    <span class="comment">// 即使只被引用了一次，也会代码分割</span></span><br><span class="line">    <span class="comment">// 切记一定要使用import动态导入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// eslint会对动态导入语法报错，需要修改eslint配置文件</span></span><br><span class="line">    <span class="comment">// webpackChunkName: &quot;sayhi&quot;：这是webpack动态导入模块命名的方式</span></span><br><span class="line">    <span class="comment">// &quot;sayhi&quot;将来就会作为[name]的值显示。</span></span><br><span class="line">    <span class="title function_">import</span>( <span class="comment">/*webpackChunkName: &quot;sayhi&quot;*/</span> <span class="string">&quot;./js/sayhi.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否支持HMR功能</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/count.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/sum.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 es7 新语法 includes </span></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">includes</span>(<span class="number">1</span>)); </span><br></pre></td></tr></table></figure><ul><li><strong>此时 <code>Eslint</code> 会对 <code>includes</code>报错。</strong></li></ul><ol start="2"><li><p><strong>修改配置文件</strong></p><ul><li><strong>下载包</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i @babel/eslint-parser -D</span><br></pre></td></tr></table></figure><ul><li><strong>创建<code>.eslintrc.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 继承 Eslint 规则</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&quot;@babel/eslint-parser&quot;</span>, <span class="comment">// 支持最新的最终 ECMAScript 标准</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 启用浏览器中全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;import&quot;</span>], <span class="comment">// 解决动态导入import语法报错问题 --&gt; 实际使用eslint-plugin-import的规则解决的</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">6</span>, <span class="comment">// es6</span></span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">// es module</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 不能使用 var 定义变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用<code>core-js</code></strong></p></li></ol><ul><li><strong>下载包</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i core-js</span><br></pre></td></tr></table></figure><ul><li><strong>方法一: 手动全部引入(优点:方便快捷 , 缺点:打包生成的项目体积大)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全部引入 core.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入js文件</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./js/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&#x27;./js/sum&#x27;</span></span><br><span class="line"><span class="comment">// 引入css资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// 引入less资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./less/index.less&#x27;</span></span><br><span class="line"><span class="comment">// 引入字体样式(切记是字体样式并非字体)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/iconfont.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">3</span> , <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮点击事件实现 按需加载 ,动态导入</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 动态导入 --&gt; 实现按需加载</span></span><br><span class="line">    <span class="comment">// 即使只被引用了一次，也会代码分割</span></span><br><span class="line">    <span class="comment">// 切记一定要使用import动态导入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// eslint会对动态导入语法报错，需要修改eslint配置文件</span></span><br><span class="line">    <span class="comment">// webpackChunkName: &quot;sayhi&quot;：这是webpack动态导入模块命名的方式</span></span><br><span class="line">    <span class="comment">// &quot;sayhi&quot;将来就会作为[name]的值显示。</span></span><br><span class="line">    <span class="title function_">import</span>( <span class="comment">/*webpackChunkName: &quot;sayhi&quot;*/</span> <span class="string">&quot;./js/sayhi.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否支持HMR功能</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/count.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/sum.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 es7 新语法 includes </span></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">includes</span>(<span class="number">1</span>)); </span><br></pre></td></tr></table></figure><ul><li><strong>方法二: 手动按需引入(优点:项目体积小 , 缺点: 引入繁琐)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全部引入 core.js</span></span><br><span class="line"><span class="comment">// import &quot;core-js&quot;;</span></span><br><span class="line"><span class="comment">// 按需引入 core.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/es/array&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入js文件</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./js/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&#x27;./js/sum&#x27;</span></span><br><span class="line"><span class="comment">// 引入css资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// 引入less资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./less/index.less&#x27;</span></span><br><span class="line"><span class="comment">// 引入字体样式(切记是字体样式并非字体)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/iconfont.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">3</span> , <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮点击事件实现 按需加载 ,动态导入</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 动态导入 --&gt; 实现按需加载</span></span><br><span class="line">    <span class="comment">// 即使只被引用了一次，也会代码分割</span></span><br><span class="line">    <span class="comment">// 切记一定要使用import动态导入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// eslint会对动态导入语法报错，需要修改eslint配置文件</span></span><br><span class="line">    <span class="comment">// webpackChunkName: &quot;sayhi&quot;：这是webpack动态导入模块命名的方式</span></span><br><span class="line">    <span class="comment">// &quot;sayhi&quot;将来就会作为[name]的值显示。</span></span><br><span class="line">    <span class="title function_">import</span>( <span class="comment">/*webpackChunkName: &quot;sayhi&quot;*/</span> <span class="string">&quot;./js/sayhi.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否支持HMR功能</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/count.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/sum.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 es7 新语法 includes </span></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">includes</span>(<span class="number">1</span>)); </span><br></pre></td></tr></table></figure><ul><li><p><strong>自动按需引入(推荐使用)</strong></p><ul><li><p><strong>这种方法不需要在<code>main.js</code>中引入<code>core.js</code>,我们只需要在<code>babel.config.js</code>中的<code>presets</code>属性中设置相关项即可</strong></p></li><li><p><strong><a href="https://www.babeljs.cn/docs/babel-preset-env#corejs">官方文档</a></strong></p></li></ul></li><li><p><strong><code>babel.config.js</code></strong></p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 智能预设：能够编译ES6语法</span></span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      <span class="comment">// 按需加载core-js的polyfill</span></span><br><span class="line">      &#123; <span class="attr">useBuiltIns</span>: <span class="string">&quot;usage&quot;</span>, <span class="attr">corejs</span>: &#123; <span class="attr">version</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">proposals</span>: <span class="literal">true</span> &#125; &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>此时就会自动根据我们代码中使用的语法，来按需加载相应的 <code>polyfill</code> 了。</strong></li></ul><h1 id="3-PWA"><a href="#3-PWA" class="headerlink" title="3. PWA"></a>3. <code>PWA</code></h1><h2 id="为什么需要PWA"><a href="#为什么需要PWA" class="headerlink" title="为什么需要PWA"></a>为什么需要<code>PWA</code></h2><ul><li><strong>开发 <code>Web App</code> 项目，项目一旦处于网络离线情况，就没法访问了。</strong></li><li><strong>我们希望给项目提供离线体验。</strong></li></ul><h2 id="PWA是什么"><a href="#PWA是什么" class="headerlink" title="PWA是什么?"></a><code>PWA</code>是什么?</h2><ul><li><p><strong>渐进式网络应用程序(<code>progressive web application - PWA</code>)：是一种可以提供类似于 <code>native app</code>(原生应用程序) 体验的 <code>Web App</code> 的技术。</strong></p></li><li><p><strong>其中最重要的是，在 <code>离线(offline)</code> 时应用程序能够继续运行功能。</strong></p></li><li><p><strong>内部通过 <code>Service Workers</code> 技术实现的。</strong></p></li><li><p><strong><a href="https://webpack.docschina.org/guides/progressive-web-application/#adding-workbox">官方文档</a></strong></p></li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ol><li><strong>下载包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i workbox-webpack-plugin -D</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>修改配置文件</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 获取os内置模块</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入MiniCssExtractPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入CssMinimizerPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入Terser内置插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入图片压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入预加载插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PreloadWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;@vue/preload-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入离线缓存插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WorkboxPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;workbox-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个函数用来获取样式处理的loader(提高代码复用率)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyleLoader</span>(<span class="params">pre</span>)&#123;<span class="comment">//pre为其他的loader,如less-loader</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// *************************************************************************</span></span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//将style-loder改成MiniCssExtractPlugin.loader</span></span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,<span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// postcss-loader处理css样式的兼容性问题(放在cssloder后面,lessloder前面)*****</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        pre,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)<span class="comment">//设置一个布尔值的filter来过滤掉undefined(存css样式不需要pre[即其他的loader])</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="comment">// 单入口</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 多入口</span></span><br><span class="line">    <span class="comment">// entry: &#123;</span></span><br><span class="line">    <span class="comment">//   main: &quot;./src/main.js&quot;,</span></span><br><span class="line">    <span class="comment">//   app: &quot;./src/app.js&quot;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>),<span class="comment">//相较于开发模式,生产模式需要输出</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件的输出名字(动态按需引入的js文件等)*******************************</span></span><br><span class="line">        <span class="attr">chunkFilename</span>: <span class="string">&#x27;static/js/[name].js&#x27;</span>,<span class="comment">//设置打包输出的其他文件命名</span></span><br><span class="line">        <span class="comment">// ***********************************************************************</span></span><br><span class="line">        </span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//需要输出就需要clean(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// oneOf配置, 每个文件只能被其中一个loader处理(第一个遇到的)************************</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// 1.处理css资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>()</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 2.处理less资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>(<span class="string">&quot;less-loader&quot;</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 3.处理图片资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>:&#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                                <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                                <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 4.处理字体资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 配置babel***********************************************</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                        <span class="comment">// Include/Exclude*******************************************</span></span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>:  path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含(两者只能用其一)</span></span><br><span class="line">                        <span class="comment">// **********************************************************</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            &#123;<span class="comment">//开启多线程编译打包***************************</span></span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            <span class="comment">//   *****************************************</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ],</span><br><span class="line">                          <span class="comment">// ********************************************************</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">                <span class="comment">// ****************************************************************************</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">            <span class="comment">// Include/Exclude******************</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="comment">// ********************************</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">              __dirname,</span><br><span class="line">              <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 开启多线程打包编译***************</span></span><br><span class="line">            threads, <span class="comment">// 开启多进程</span></span><br><span class="line">            <span class="comment">// *******************************</span></span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和输出路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预加载插件*************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PreloadWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">rel</span>: <span class="string">&quot;preload&quot;</span>, <span class="comment">// preload兼容性更好</span></span><br><span class="line">            <span class="attr">as</span>: <span class="string">&quot;script&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// rel: &#x27;prefetch&#x27; // prefetch兼容性更差</span></span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   *******************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 离线缓存插件(使webapp能在离线的情况下使用基本功能)**********</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WorkboxPlugin</span>.<span class="title class_">GenerateSW</span>(&#123;</span><br><span class="line">            <span class="comment">// 这些选项帮助快速启用 ServiceWorkers</span></span><br><span class="line">            <span class="comment">// 不允许遗留任何“旧的” ServiceWorkers</span></span><br><span class="line">            <span class="attr">clientsClaim</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">skipWaiting</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// **********************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// css压缩(新版本一般是放在下面的optimization中,压缩,优化均是)*********************</span></span><br><span class="line">        <span class="comment">// new CssMinimizerPlugin(),</span></span><br><span class="line">        <span class="comment">// ******************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启多线程需要重新手写 Terser 内置模块*********************************************</span></span><br><span class="line">    <span class="comment">// webpack5一般指定压缩地方为这里,上面也可以</span></span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="comment">// css压缩</span></span><br><span class="line">            <span class="comment">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),<span class="comment">//压缩css</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//js压缩   </span></span><br><span class="line">            <span class="comment">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;<span class="comment">//内置模块压缩js</span></span><br><span class="line">            <span class="attr">parallel</span>: threads <span class="comment">// 开启多进程</span></span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line">            <span class="comment">//图片压缩*******************************************</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">minimizer</span>: &#123;</span><br><span class="line">                <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                    [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">                    [</span><br><span class="line">                        <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="attr">plugins</span>: [</span><br><span class="line">                            <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                            &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                            <span class="attr">params</span>: &#123;</span><br><span class="line">                                <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">// *************************************************</span></span><br><span class="line">        ],</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 代码分割配置</span></span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">            <span class="comment">// 默认分割即可(spa单页面应用)</span></span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">            <span class="comment">// 以下是默认值</span></span><br><span class="line">            <span class="comment">// minSize: 20000, // 分割代码最小的大小</span></span><br><span class="line">            <span class="comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span><br><span class="line">            <span class="comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span><br><span class="line">            <span class="comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line">            <span class="comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span></span><br><span class="line">            <span class="comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class="line">            <span class="comment">// cacheGroups: &#123; // 组，哪些模块要打包到一个组</span></span><br><span class="line">            <span class="comment">//   defaultVendors: &#123; // 组名</span></span><br><span class="line">            <span class="comment">//     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">            <span class="comment">//     priority: -10, // 权重（越大越高）</span></span><br><span class="line">            <span class="comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">            <span class="comment">//   &#125;,</span></span><br><span class="line">            <span class="comment">//   default: &#123; // 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">            <span class="comment">//     minChunks: 2, // 这里的minChunks权重更大</span></span><br><span class="line">            <span class="comment">//     priority: -20,</span></span><br><span class="line">            <span class="comment">//     reuseExistingChunk: true,</span></span><br><span class="line">            <span class="comment">//   &#125;,</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,<span class="comment">//sourceMap生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>修改<code>main.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全部引入 core.js</span></span><br><span class="line"><span class="comment">// import &quot;core-js&quot;;</span></span><br><span class="line"><span class="comment">// 按需引入 core.js</span></span><br><span class="line"><span class="comment">// import &quot;core-js/es/array&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入js文件</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./js/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&#x27;./js/sum&#x27;</span></span><br><span class="line"><span class="comment">// 引入css资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// 引入less资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./less/index.less&#x27;</span></span><br><span class="line"><span class="comment">// 引入字体样式(切记是字体样式并非字体)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/iconfont.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">3</span> , <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮点击事件实现 按需加载 ,动态导入</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 动态导入 --&gt; 实现按需加载</span></span><br><span class="line">    <span class="comment">// 即使只被引用了一次，也会代码分割</span></span><br><span class="line">    <span class="comment">// 切记一定要使用import动态导入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// eslint会对动态导入语法报错，需要修改eslint配置文件</span></span><br><span class="line">    <span class="comment">// webpackChunkName: &quot;sayhi&quot;：这是webpack动态导入模块命名的方式</span></span><br><span class="line">    <span class="comment">// &quot;sayhi&quot;将来就会作为[name]的值显示。</span></span><br><span class="line">    <span class="title function_">import</span>( <span class="comment">/*webpackChunkName: &quot;sayhi&quot;*/</span> <span class="string">&quot;./js/sayhi.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否支持HMR功能</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/count.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/sum.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 es7 新语法 includes </span></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">includes</span>(<span class="number">1</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置serviceWorker 使浏览器能在断网的情况下 webapp仍能使用基本功能</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      navigator.<span class="property">serviceWorker</span></span><br><span class="line">        .<span class="title function_">register</span>(<span class="string">&quot;/service-worker.js&quot;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">registration</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SW registered: &quot;</span>, registration);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">registrationError</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SW registration failed: &quot;</span>, registrationError);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>运行指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h4 id="此时如果通过-VSCode-访问打包后页面，在浏览器控制台出现-SW-registration-failed。"><a href="#此时如果通过-VSCode-访问打包后页面，在浏览器控制台出现-SW-registration-failed。" class="headerlink" title="此时如果通过 VSCode 访问打包后页面，在浏览器控制台出现 SW registration failed。"></a><strong>此时如果通过 VSCode 访问打包后页面，在浏览器控制台出现 <code>SW registration failed</code>。</strong></h4><ul><li><p><strong>因为我们打开的访问路径是：<code>http://127.0.0.1:5500/dist/index.html</code>。此时页面会去请求 <code>service-worker.js</code> 文件，请求路径是：<code>http://127.0.0.1:5500/service-worker.js</code>，这样找不到会 404。</strong></p></li><li><p><strong>实际 <code>service-worker.js</code> 文件路径是：<code>http://127.0.0.1:5500/dist/service-worker.js</code>。</strong></p></li></ul><ol start="5"><li><strong>解决路径问题</strong></li></ol><ul><li><strong>下载包</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i serve -g</span><br></pre></td></tr></table></figure><p><strong><code>serve</code> 也是用来启动开发服务器来部署代码查看效果的。</strong></p><ul><li><strong>运行指令</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">serve dist</span><br></pre></td></tr></table></figure><p><strong>此时通过 <code>serve</code> 启动的服务器我们 <code>service-worker</code> 就能注册成功了。</strong></p><h3 id="结果展示-离线后仍然可以进行基本输出"><a href="#结果展示-离线后仍然可以进行基本输出" class="headerlink" title="结果展示:(离线后仍然可以进行基本输出)"></a>结果展示:(离线后仍然可以进行基本输出)</h3><p><img src="/../upload/webpack/w3/11.gif" alt="image"></p><h1 id="webpack高级篇总结"><a href="#webpack高级篇总结" class="headerlink" title="webpack高级篇总结"></a><code>webpack</code>高级篇总结</h1><p>我们从 4 个角度对 <code>webpack</code> 和代码进行了优化：</p><ol><li>提升开发体验</li></ol><ul><li>使用 <code>Source Map</code> 让开发或上线时代码报错能有更加准确的错误提示。</li></ul><ol><li>提升 webpack 提升打包构建速度</li></ol><ul><li>使用 <code>HotModuleReplacement</code> 让开发时只重新编译打包更新变化了的代码，不变的代码使用缓存，从而使更新速度更快。</li><li>使用 <code>OneOf</code> 让资源文件一旦被某个 loader 处理了，就不会继续遍历了，打包速度更快。</li><li>使用 <code>Include/Exclude</code> 排除或只检测某些文件，处理的文件更少，速度更快。</li><li>使用 <code>Cache</code> 对 eslint 和 babel 处理的结果进行缓存，让第二次打包速度更快。</li><li>使用 <code>Thead</code> 多进程处理 eslint 和 babel 任务，速度更快。（需要注意的是，进程启动通信都有开销的，要在比较多代码处理时使用才有效果）</li></ul><ol><li>减少代码体积</li></ol><ul><li>使用 <code>Tree Shaking</code> 剔除了没有使用的多余代码，让代码体积更小。</li><li>使用 <code>@babel/plugin-transform-runtime</code> 插件对 babel 进行处理，让辅助代码从中引入，而不是每个文件都生成辅助代码，从而体积更小。</li><li>使用 <code>Image Minimizer</code> 对项目中图片进行压缩，体积更小，请求速度更快。（需要注意的是，如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。）</li></ul><ol><li>优化代码运行性能</li></ol><ul><li>使用 <code>Code Split</code> 对代码进行分割成多个 js 文件，从而使单个文件体积更小，并行加载 js 速度更快。并通过 import 动态导入语法进行按需加载，从而达到需要使用时才加载该资源，不用时不加载资源。</li><li>使用 <code>Preload / Prefetch</code> 对代码进行提前加载，等未来需要使用时就能直接使用，从而用户体验更好。</li><li>使用 <code>Network Cache</code> 能对输出资源文件进行更好的命名，将来好做缓存，从而用户体验更好。</li><li>使用 <code>Core-js</code> 对 js 进行兼容性处理，让我们代码能运行在低版本浏览器。</li><li>使用 <code>PWA</code> 能让代码离线也能访问，从而提升用户体验。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> webpack高级篇 </tag>
            
            <tag> Preload &amp; Prefetch </tag>
            
            <tag> Core-js </tag>
            
            <tag> PWA </tag>
            
            <tag> webpack高级篇总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(13)-高级篇(4)-优化代码运行性能篇(1)-Code Split</title>
      <link href="/2022/10/12/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013/"/>
      <url>/2022/10/12/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013/</url>
      
        <content type="html"><![CDATA[<h1 id="Code-Split-多入口-amp-单入口"><a href="#Code-Split-多入口-amp-单入口" class="headerlink" title="Code Split(多入口 &amp; 单入口)"></a><code>Code Split</code>(多入口 &amp; 单入口)</h1><h2 id="为什么需要Code-Split"><a href="#为什么需要Code-Split" class="headerlink" title="为什么需要Code Split"></a>为什么需要<code>Code Split</code></h2><ul><li><p><strong>打包代码时会将所有 <code>js</code> 文件打包到一个文件中，体积太大了。我们如果只要渲染首页，就应该只加载首页的 <code>js</code> 文件，其他文件不应该加载。</strong></p></li><li><p><strong>所以我们需要将打包生成的文件进行代码分割，生成多个 <code>js</code> 文件，渲染哪个页面就只加载某个 <code>js</code> 文件，这样加载的资源就少，速度就更快。</strong></p></li></ul><h2 id="Code-Split是什么"><a href="#Code-Split是什么" class="headerlink" title="Code Split是什么"></a><code>Code Split</code>是什么</h2><h3 id="代码分割（Code-Split）主要做了两件事："><a href="#代码分割（Code-Split）主要做了两件事：" class="headerlink" title="代码分割（Code Split）主要做了两件事："></a>代码分割（<code>Code Split</code>）主要做了两件事：</h3><ol><li><p><strong>分割文件：将打包生成的文件进行分割，生成多个 js 文件。</strong></p></li><li><p><strong>按需加载：需要哪个文件就加载哪个文件。</strong></p></li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li><strong>代码分割实现方式有不同的方式，为了更加方便体现它们之间的差异，我们会分别创建新的文件来演示</strong></li></ul><h3 id="1-Code-Split-多入口"><a href="#1-Code-Split-多入口" class="headerlink" title="1. Code Split - 多入口"></a>1. <code>Code Split</code> - 多入口</h3><ol><li><strong>文件目录</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── public</span><br><span class="line">├── src</span><br><span class="line">|   ├── app.js</span><br><span class="line">|   └── main.js</span><br><span class="line">├── package.json</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>初始化工程以及下载包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">npm i webpack webpack-cli html-webpack-plugin -D</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>新建文件</strong></li></ol><ul><li><p><strong>内容无关紧要，主要观察打包输出的结果</strong></p></li><li><p><strong><code>app.js</code></strong></p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello! app&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong><code>main.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello! main&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>配置<code>webpack.config.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 单入口</span></span><br><span class="line">  <span class="comment">// entry: &#x27;./src/main.js&#x27;,</span></span><br><span class="line">  <span class="comment">// 多入口</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;<span class="comment">//两个入口文件</span></span><br><span class="line">    <span class="attr">main</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&quot;./src/app.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;<span class="comment">//输出文件使用webpack命名语法以解决命名冲突问题</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="comment">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span></span><br><span class="line">    <span class="comment">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span></span><br><span class="line">    <span class="comment">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span></span><br><span class="line">    <span class="comment">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">clear</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  因为无css,style样式故省略 loader 的配置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="comment">//</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,<span class="comment">//指定输出html的结构模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式和开发模式均可</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>运行指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><ul><li><p><strong>此时在 <code>dist</code> 目录我们能看到输出了两个 <code>js</code> 文件。</strong><br><img src="/../upload/webpack/w3/4.png" alt="image"></p></li><li><p><strong>浏览器也能成功运行</strong><br><img src="/../upload/webpack/w3/5.png" alt="image"></p></li></ul><h4 id="总结：配置了几个入口，至少输出几个-js-文件。"><a href="#总结：配置了几个入口，至少输出几个-js-文件。" class="headerlink" title="总结：配置了几个入口，至少输出几个 js 文件。"></a>总结：配置了几个入口，至少输出几个 <code>js</code> 文件。</h4><h3 id="2-Code-Split-提取重复代码"><a href="#2-Code-Split-提取重复代码" class="headerlink" title="2. Code Split - 提取重复代码"></a>2. <code>Code Split</code> - 提取重复代码</h3><ul><li><p><strong>如果多入口文件中都引用了同一份代码，我们不希望这份代码被打包到两个文件中，导致代码重复，体积更大。</strong></p></li><li><p><strong>我们需要提取多入口的重复代码，只打包生成一个 <code>js</code> 文件，其他文件引用它就好。</strong></p></li></ul><ol><li><strong>修改文件</strong></li></ol><ul><li><strong><code>app.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello! app&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><ul><li><strong><code>main.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello! main&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><ul><li><strong><code>math.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>修改配置文件<code>webpack.config.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 单入口</span></span><br><span class="line">  <span class="comment">// entry: &#x27;./src/main.js&#x27;,</span></span><br><span class="line">  <span class="comment">// 多入口</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;<span class="comment">//两个入口文件</span></span><br><span class="line">    <span class="attr">main</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&quot;./src/app.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;<span class="comment">//输出文件使用webpack命名语法以解决命名冲突问题</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="comment">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span></span><br><span class="line">    <span class="comment">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span></span><br><span class="line">    <span class="comment">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span></span><br><span class="line">    <span class="comment">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/[name].js&quot;</span>,</span><br><span class="line">    <span class="comment">// clear: true,</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  因为无css,style样式故省略 loader 的配置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="comment">//</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,<span class="comment">//指定输出html的结构模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式和开发模式均可</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代码压缩优化区域   </span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 代码分割配置*******************************************************************************************</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">      <span class="comment">// 以下是默认值</span></span><br><span class="line">      <span class="comment">// minSize: 20000, // 分割代码最小的大小</span></span><br><span class="line">      <span class="comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span><br><span class="line">      <span class="comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span><br><span class="line">      <span class="comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line">      <span class="comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span></span><br><span class="line">      <span class="comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class="line">      <span class="comment">// cacheGroups: &#123; // 组，哪些模块要打包到一个组</span></span><br><span class="line">      <span class="comment">//   defaultVendors: &#123; // 组名</span></span><br><span class="line">      <span class="comment">//     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">      <span class="comment">//     priority: -10, // 权重（越大越高）</span></span><br><span class="line">      <span class="comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">      <span class="comment">//   &#125;,</span></span><br><span class="line">      <span class="comment">//   default: &#123; // 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">      <span class="comment">//     minChunks: 2, // 这里的minChunks权重更大</span></span><br><span class="line">      <span class="comment">//     priority: -20,</span></span><br><span class="line">      <span class="comment">//     reuseExistingChunk: true,</span></span><br><span class="line">      <span class="comment">//   &#125;,</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      <span class="comment">// 修改配置</span></span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="comment">// 组，哪些模块要打包到一个组</span></span><br><span class="line">        <span class="comment">// defaultVendors: &#123; // 组名</span></span><br><span class="line">        <span class="comment">//   test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">        <span class="comment">//   priority: -10, // 权重（越大越高）</span></span><br><span class="line">        <span class="comment">//   reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">          <span class="comment">// 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">          <span class="attr">minSize</span>: <span class="number">0</span>, <span class="comment">// 我们定义的文件体积太小了，所以要改打包的最小文件体积</span></span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// *********************************************************************************************</span></span><br><span class="line">  &#125;,   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="实际开发中-组的配置使用用默认即可-这里因为是项目的体积太小-想要看到效果故意重新设置的"><a href="#实际开发中-组的配置使用用默认即可-这里因为是项目的体积太小-想要看到效果故意重新设置的" class="headerlink" title="实际开发中,组的配置使用用默认即可,这里因为是项目的体积太小,想要看到效果故意重新设置的!"></a>实际开发中,组的配置使用用默认即可,这里因为是项目的体积太小,想要看到效果故意重新设置的!</h4><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>提取重复代码前的打包</strong><br><img src="/../upload/webpack/w3/6.jpg" alt="image"><br><img src="/../upload/webpack/w3/7.jpg" alt="image"></p></li><li><p><strong>使用提取重复代码打包后</strong><br><img src="/../upload/webpack/w3/8.png" alt="image"><br><img src="/../upload/webpack/w3/9.png" alt="image"></p></li></ul><h2 id="3-Code-Split-多入口按需加载动态导入"><a href="#3-Code-Split-多入口按需加载动态导入" class="headerlink" title="3. Code Split - 多入口按需加载动态导入"></a>3. <code>Code Split</code> - 多入口按需加载动态导入</h2><h3 id="为什么需要按需加载呢"><a href="#为什么需要按需加载呢" class="headerlink" title="为什么需要按需加载呢?"></a>为什么需要按需加载呢?</h3><ul><li><strong>试想一下这样的场景,我们在加载一个页面时,该页面内容存在一个按钮, 但是我们一进入页面时,并不需要加载该按钮的交互(<code>js</code>),我们只需要加载页面的交互即可,当我们点击按钮时,再加载对应的<code>js</code>,这岂不是更好?</strong></li><li><strong>这就涉及了按需加载,动态导入了,想要实现按需加载，动态导入模块。就需要额外配置</strong></li></ul><ol><li><strong>设置一个新的<code>js</code>文件(<code>sayhi.js</code>)用于动态导入</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi! 按需加载成功!!!&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>将<code>sayhi.js</code>在<code>main.js</code>中导入</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello! main&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 动态导入 --&gt; 实现按需加载</span></span><br><span class="line">    <span class="comment">// 即使只被引用了一次，也会代码分割</span></span><br><span class="line">    <span class="comment">// 切记一定要使用import动态导入</span></span><br><span class="line">    <span class="title function_">import</span>(<span class="string">&quot;./sayhi.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>给<code>index.html</code>模板设置一个按钮</strong></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Code Split<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello! Code Split<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击弹出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>运行指令执行打包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><ul><li><strong>我们可以发现，一旦通过 <code>import</code> 动态导入语法导入模块，模块就被代码分割，同时也能按需加载了。</strong></li></ul><h4 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h4><p><img src="/../upload/webpack/w3/8.gif" alt="image"></p><ul><li><strong>由此我们可以看到,只有当我们点击了按钮,才会加载<code>396.js</code>资源</strong><br><img src="/../upload/webpack/w3/11.png" alt="image"></li></ul><h3 id="4-Code-Split-单入口"><a href="#4-Code-Split-单入口" class="headerlink" title="4. Code Split - 单入口"></a>4. <code>Code Split</code> - 单入口</h3><ul><li><strong>开发时我们可能是单页面应用（SPA），只有一个入口（单入口）。那么我们需要这样配置(生产模式)：(<code>webpack.config.pro.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 获取os内置模块</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入MiniCssExtractPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入CssMinimizerPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入Terser内置插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入图片压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个函数用来获取样式处理的loader(提高代码复用率)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyleLoader</span>(<span class="params">pre</span>)&#123;<span class="comment">//pre为其他的loader,如less-loader</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// *************************************************************************</span></span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//将style-loder改成MiniCssExtractPlugin.loader</span></span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,<span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// postcss-loader处理css样式的兼容性问题(放在cssloder后面,lessloder前面)*****</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        pre,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)<span class="comment">//设置一个布尔值的filter来过滤掉undefined(存css样式不需要pre[即其他的loader])</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="comment">// 单入口</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 多入口</span></span><br><span class="line">    <span class="comment">// entry: &#123;</span></span><br><span class="line">    <span class="comment">//   main: &quot;./src/main.js&quot;,</span></span><br><span class="line">    <span class="comment">//   app: &quot;./src/app.js&quot;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>),<span class="comment">//相较于开发模式,生产模式需要输出</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//需要输出就需要clean(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// oneOf配置, 每个文件只能被其中一个loader处理(第一个遇到的)************************</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// 1.处理css资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>()</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 2.处理less资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>(<span class="string">&quot;less-loader&quot;</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 3.处理图片资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>:&#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                                <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                                <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 4.处理字体资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 配置babel***********************************************</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                        <span class="comment">// Include/Exclude*******************************************</span></span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>:  path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含(两者只能用其一)</span></span><br><span class="line">                        <span class="comment">// **********************************************************</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            &#123;<span class="comment">//开启多线程编译打包***************************</span></span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            <span class="comment">//   *****************************************</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ],</span><br><span class="line">                          <span class="comment">// ********************************************************</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">                <span class="comment">// ****************************************************************************</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">            <span class="comment">// Include/Exclude******************</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="comment">// ********************************</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">              __dirname,</span><br><span class="line">              <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 开启多线程打包编译***************</span></span><br><span class="line">            threads, <span class="comment">// 开启多进程</span></span><br><span class="line">            <span class="comment">// *******************************</span></span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和输出路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// css压缩************************************************************************</span></span><br><span class="line">        <span class="comment">// new CssMinimizerPlugin(),</span></span><br><span class="line">        <span class="comment">// ******************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启多线程需要重新手写 Terser 内置模块*********************************************</span></span><br><span class="line">    <span class="comment">// webpack5一般指定压缩地方为这里,上面也可以</span></span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="comment">// css压缩</span></span><br><span class="line">            <span class="comment">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),<span class="comment">//压缩css</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//js压缩   </span></span><br><span class="line">            <span class="comment">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;<span class="comment">//内置模块压缩js</span></span><br><span class="line">            <span class="attr">parallel</span>: threads <span class="comment">// 开启多进程</span></span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line">            <span class="comment">//图片压缩*******************************************</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">minimizer</span>: &#123;</span><br><span class="line">                <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                    [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">                    [</span><br><span class="line">                        <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="attr">plugins</span>: [</span><br><span class="line">                            <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                            &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                            <span class="attr">params</span>: &#123;</span><br><span class="line">                                <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">// *************************************************</span></span><br><span class="line">        ],</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 代码分割配置</span></span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">            <span class="comment">// 默认分割即可(spa单页面应用)</span></span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">            <span class="comment">// 以下是默认值</span></span><br><span class="line">            <span class="comment">// minSize: 20000, // 分割代码最小的大小</span></span><br><span class="line">            <span class="comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span><br><span class="line">            <span class="comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span><br><span class="line">            <span class="comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line">            <span class="comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span></span><br><span class="line">            <span class="comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class="line">            <span class="comment">// cacheGroups: &#123; // 组，哪些模块要打包到一个组</span></span><br><span class="line">            <span class="comment">//   defaultVendors: &#123; // 组名</span></span><br><span class="line">            <span class="comment">//     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">            <span class="comment">//     priority: -10, // 权重（越大越高）</span></span><br><span class="line">            <span class="comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">            <span class="comment">//   &#125;,</span></span><br><span class="line">            <span class="comment">//   default: &#123; // 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">            <span class="comment">//     minChunks: 2, // 这里的minChunks权重更大</span></span><br><span class="line">            <span class="comment">//     priority: -20,</span></span><br><span class="line">            <span class="comment">//     reuseExistingChunk: true,</span></span><br><span class="line">            <span class="comment">//   &#125;,</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,<span class="comment">//sourceMap生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="这里存在一个小问题-就是eslint是不识别import动态导入语法的-需要我们为其添加plugins-插件-来解决语法问题"><a href="#这里存在一个小问题-就是eslint是不识别import动态导入语法的-需要我们为其添加plugins-插件-来解决语法问题" class="headerlink" title="这里存在一个小问题,就是eslint是不识别import动态导入语法的,需要我们为其添加plugins(插件)来解决语法问题"></a>这里存在一个小问题,就是<code>eslint</code>是不识别<code>import</code>动态导入语法的,需要我们为其添加<code>plugins</code>(插件)来解决语法问题</h4><p><img src="/../upload/webpack/w3/12.png" alt="image"></p><h4 id="因此我们需要在项目的Eslint配置文件当中设置以下代码-eslintrc-js的完整代码"><a href="#因此我们需要在项目的Eslint配置文件当中设置以下代码-eslintrc-js的完整代码" class="headerlink" title="因此我们需要在项目的Eslint配置文件当中设置以下代码:(.eslintrc.js的完整代码)"></a>因此我们需要在项目的<code>Eslint</code>配置文件当中设置以下代码:(<code>.eslintrc.js</code>的完整代码)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 继承 Eslint的默认规则</span></span><br><span class="line">    <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">      <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 启用浏览器中全局变量(这样就可以使用console.log等输出)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">      <span class="attr">ecmaVersion</span>: <span class="number">6</span>, <span class="comment">//es6语法</span></span><br><span class="line">      <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">//es模块化</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">      <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 不能使用 var 定义变量(0:关闭规则,1:开启规则(警告),2:开启(错误))</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使其支持 import 的动态导入语法**********************</span></span><br><span class="line">    <span class="attr">plugins</span>: [<span class="string">&quot;import&quot;</span>],<span class="comment">//使其支持 import 动态导入语法</span></span><br><span class="line">    <span class="comment">// **************************************************</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/webpack/w3/9.gif" alt="image"></p><h3 id="5-Code-Split-给模块命名"><a href="#5-Code-Split-给模块命名" class="headerlink" title="5.Code Split - 给模块命名"></a>5.<code>Code Split</code> - 给模块命名</h3><ul><li><strong>以往我们没有给模块命名时 , 打包生成的模块多是以数字组合 , 没有逻辑 , 那么如何给 模块 命名呢?</strong><br><img src="/../upload/webpack/w3/13.png" alt="image"></li></ul><h4 id="给动态导入的文件命名"><a href="#给动态导入的文件命名" class="headerlink" title="给动态导入的文件命名"></a>给动态导入的文件命名</h4><ol><li><strong>修改配置项 <code>main.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入js文件</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./js/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&#x27;./js/sum&#x27;</span></span><br><span class="line"><span class="comment">// 引入css资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// 引入less资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./less/index.less&#x27;</span></span><br><span class="line"><span class="comment">// 引入字体样式(切记是字体样式并非字体)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/iconfont.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">3</span> , <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮点击事件实现 按需加载 ,动态导入</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 动态导入 --&gt; 实现按需加载</span></span><br><span class="line">    <span class="comment">// 即使只被引用了一次，也会代码分割</span></span><br><span class="line">    <span class="comment">// 切记一定要使用import动态导入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// eslint会对动态导入语法报错，需要修改eslint配置文件 , 向上翻阅本博客查找</span></span><br><span class="line">    <span class="comment">// webpackChunkName: &quot;sayhi&quot;：这是webpack动态导入模块命名的方式</span></span><br><span class="line">    <span class="comment">// &quot;sayhi&quot;将来就会作为[name]的值显示。</span></span><br><span class="line">    <span class="title function_">import</span>( <span class="comment">/*webpackChunkName: &quot;sayhi&quot;*/</span> <span class="string">&quot;./js/sayhi.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否支持HMR功能</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/count.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/sum.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>在输出的<code>webpack.config.pro.js</code>中设置<code>chunkFilename</code>属性</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 获取os内置模块</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入MiniCssExtractPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入CssMinimizerPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入Terser内置插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入图片压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个函数用来获取样式处理的loader(提高代码复用率)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyleLoader</span>(<span class="params">pre</span>)&#123;<span class="comment">//pre为其他的loader,如less-loader</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// *************************************************************************</span></span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//将style-loder改成MiniCssExtractPlugin.loader</span></span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,<span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// postcss-loader处理css样式的兼容性问题(放在cssloder后面,lessloder前面)*****</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        pre,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)<span class="comment">//设置一个布尔值的filter来过滤掉undefined(存css样式不需要pre[即其他的loader])</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="comment">// 单入口</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 多入口</span></span><br><span class="line">    <span class="comment">// entry: &#123;</span></span><br><span class="line">    <span class="comment">//   main: &quot;./src/main.js&quot;,</span></span><br><span class="line">    <span class="comment">//   app: &quot;./src/app.js&quot;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>),<span class="comment">//相较于开发模式,生产模式需要输出</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件的输出名字(动态按需引入的js文件等)*******************************</span></span><br><span class="line">        <span class="attr">chunkFilename</span>: <span class="string">&#x27;static/js/[name].js&#x27;</span>,<span class="comment">//设置打包输出的其他文件命名</span></span><br><span class="line">        <span class="comment">// ***********************************************************************</span></span><br><span class="line">        </span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//需要输出就需要clean(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// oneOf配置, 每个文件只能被其中一个loader处理(第一个遇到的)************************</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// 1.处理css资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>()</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 2.处理less资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>(<span class="string">&quot;less-loader&quot;</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 3.处理图片资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>:&#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                                <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                                <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 4.处理字体资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 配置babel***********************************************</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                        <span class="comment">// Include/Exclude*******************************************</span></span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>:  path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含(两者只能用其一)</span></span><br><span class="line">                        <span class="comment">// **********************************************************</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            &#123;<span class="comment">//开启多线程编译打包***************************</span></span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            <span class="comment">//   *****************************************</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ],</span><br><span class="line">                          <span class="comment">// ********************************************************</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">                <span class="comment">// ****************************************************************************</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">            <span class="comment">// Include/Exclude******************</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="comment">// ********************************</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">              __dirname,</span><br><span class="line">              <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 开启多线程打包编译***************</span></span><br><span class="line">            threads, <span class="comment">// 开启多进程</span></span><br><span class="line">            <span class="comment">// *******************************</span></span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和输出路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// css压缩************************************************************************</span></span><br><span class="line">        <span class="comment">// new CssMinimizerPlugin(),</span></span><br><span class="line">        <span class="comment">// ******************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启多线程需要重新手写 Terser 内置模块*********************************************</span></span><br><span class="line">    <span class="comment">// webpack5一般指定压缩地方为这里,上面也可以</span></span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="comment">// css压缩</span></span><br><span class="line">            <span class="comment">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),<span class="comment">//压缩css</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//js压缩   </span></span><br><span class="line">            <span class="comment">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;<span class="comment">//内置模块压缩js</span></span><br><span class="line">            <span class="attr">parallel</span>: threads <span class="comment">// 开启多进程</span></span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line">            <span class="comment">//图片压缩*******************************************</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">minimizer</span>: &#123;</span><br><span class="line">                <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                    [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">                    [</span><br><span class="line">                        <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="attr">plugins</span>: [</span><br><span class="line">                            <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                            &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                            <span class="attr">params</span>: &#123;</span><br><span class="line">                                <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">// *************************************************</span></span><br><span class="line">        ],</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 代码分割配置</span></span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">            <span class="comment">// 默认分割即可(spa单页面应用)</span></span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">            <span class="comment">// 以下是默认值</span></span><br><span class="line">            <span class="comment">// minSize: 20000, // 分割代码最小的大小</span></span><br><span class="line">            <span class="comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span><br><span class="line">            <span class="comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span><br><span class="line">            <span class="comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line">            <span class="comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span></span><br><span class="line">            <span class="comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class="line">            <span class="comment">// cacheGroups: &#123; // 组，哪些模块要打包到一个组</span></span><br><span class="line">            <span class="comment">//   defaultVendors: &#123; // 组名</span></span><br><span class="line">            <span class="comment">//     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">            <span class="comment">//     priority: -10, // 权重（越大越高）</span></span><br><span class="line">            <span class="comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">            <span class="comment">//   &#125;,</span></span><br><span class="line">            <span class="comment">//   default: &#123; // 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">            <span class="comment">//     minChunks: 2, // 这里的minChunks权重更大</span></span><br><span class="line">            <span class="comment">//     priority: -20,</span></span><br><span class="line">            <span class="comment">//     reuseExistingChunk: true,</span></span><br><span class="line">            <span class="comment">//   &#125;,</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,<span class="comment">//sourceMap生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h4><p><img src="/../upload/webpack/w3/14.png" alt="image"></p><h3 id="6-Code-Split-统一命名配置"><a href="#6-Code-Split-统一命名配置" class="headerlink" title="6. Code Split - 统一命名配置"></a>6. <code>Code Split</code> - 统一命名配置</h3><ul><li><p><strong>资源加载的命名多是用的<code>hash</code>,因此我们可以统一的卸载<code>output</code>区域内,使用<code>assetModuleFilename</code>属性来统一命名图片,字体等资源</strong></p></li><li><p><strong>入口文件<code>main.js</code>和其他动态引入的打包文件命名区分,我们可以在命名路径后面添加<code>.chunk</code>来加以区分,如<code>chunkFilename: &quot;static/js/[name].chunk.js&quot;</code> 对比 <code>filename: &quot;static/js/[name].js&quot;,</code></strong></p></li></ul><h4 id="webpack-config-prod-js源码展示-片段-除去引入的资源和plugins等"><a href="#webpack-config-prod-js源码展示-片段-除去引入的资源和plugins等" class="headerlink" title="webpack.config.prod.js源码展示(片段,除去引入的资源和plugins等)"></a><code>webpack.config.prod.js</code>源码展示(片段,除去引入的资源和<code>plugins</code>等)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">   <span class="comment">//命名********************************************************************************** </span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/[name].js&quot;</span>, <span class="comment">// 入口文件打包输出资源命名方式</span></span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&quot;static/js/[name].chunk.js&quot;</span>, <span class="comment">// 动态导入输出资源命名方式</span></span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&quot;static/media/[name].[hash][ext]&quot;</span>, <span class="comment">// 图片、字体等资源命名方式（注意用hash）</span></span><br><span class="line">    <span class="comment">//*************************************************************************************</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">            <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">              <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">              </span><br><span class="line">            <span class="comment">//省略命名导出,在output中统一导出  </span></span><br><span class="line">            <span class="comment">// generator: &#123;</span></span><br><span class="line">            <span class="comment">//   // 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">            <span class="comment">//   // 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">            <span class="comment">//   // [hash:8]: hash值取8位</span></span><br><span class="line">            <span class="comment">//   // [ext]: 使用之前的文件扩展名</span></span><br><span class="line">            <span class="comment">//   // [query]: 添加之前的query参数</span></span><br><span class="line">            <span class="comment">//   filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">              </span><br><span class="line">            <span class="comment">//省略命名导出,在output中统一导出  </span></span><br><span class="line">            <span class="comment">// generator: &#123;</span></span><br><span class="line">            <span class="comment">//   filename: &quot;static/media/[hash:8][ext][query]&quot;,</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">          &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> Code Split </tag>
            
            <tag> webpack高级篇&#39; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(12)-高级篇(3)-减小代码体积篇</title>
      <link href="/2022/10/12/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012/"/>
      <url>/2022/10/12/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012/</url>
      
        <content type="html"><![CDATA[<h1 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a><code>Tree Shaking</code></h1><h2 id="为什么需要Tree-Shaking"><a href="#为什么需要Tree-Shaking" class="headerlink" title="为什么需要Tree Shaking"></a>为什么需要<code>Tree Shaking</code></h2><ul><li><p><strong>开发时我们定义了一些工具函数库，或者引用第三方工具函数库或组件库。例如<code>elementUI</code>等….</strong></p></li><li><p><strong>如果没有特殊处理的话我们打包时会引入整个库，但是实际上可能我们可能只用上极小部分的功能。</strong></p></li><li><p><strong>这样将整个库都打包进来，体积就太大了。</strong></p></li></ul><h2 id="Tree-Shaking是什么"><a href="#Tree-Shaking是什么" class="headerlink" title="Tree Shaking是什么?"></a><code>Tree Shaking</code>是什么?</h2><ul><li><p><strong><code>Tree Shaking</code> 是一个术语(<code>webpack</code>中的术语)，通常用于描述移除 JavaScript 中的没有使用上的代码。</strong></p></li><li><p><strong>注意：它依赖 <code>ES Module</code>。</strong></p></li></ul><h2 id="如何使用Tree-Shaking"><a href="#如何使用Tree-Shaking" class="headerlink" title="如何使用Tree Shaking"></a>如何使用<code>Tree Shaking</code></h2><ul><li><strong><code>Webpack</code> 已经默认开启了这个功能，无需其他配置。</strong></li></ul><h1 id="Babel处理重复的辅助代码"><a href="#Babel处理重复的辅助代码" class="headerlink" title="Babel处理重复的辅助代码"></a><code>Babel</code>处理重复的辅助代码</h1><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么?"></a>为什么?</h2><ul><li><p><strong><code>Babel</code> 为编译的每个文件都插入了辅助代码，使代码体积过大！</strong></p></li><li><p><strong><code>Babel</code> 对一些公共方法使用了非常小的辅助代码，比如 <code>_extend</code>。默认情况下会被添加到每一个需要它的文件中。</strong></p></li><li><p><strong>你可以将这些辅助代码作为一个独立模块，来避免重复引入。</strong></p></li></ul><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><ul><li><strong><code>@babel/plugin-transform-runtime</code>: 禁用了 <code>Babel</code> 自动对每个文件的 <code>runtime</code> 注入，而是引入 <code>@babel/plugin-transform-runtime</code> 并且使所有辅助代码从这里引用。</strong></li></ul><h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><h3 id="1-下载包"><a href="#1-下载包" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i @babel/plugin-transform-runtime -D</span><br></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 获取os内置模块</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="comment">// 引入Terser内置插件</span></span><br><span class="line"><span class="comment">// const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出(因为存在开发服务器,不存在输出)，不需要指定输出目录</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果(开发服务器)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// oneOf配置, 每个文件只能被其中一个loader处理(第一个遇到的)***********************************</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// 1.处理css资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                            <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 2.处理less资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                            <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                            <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                        ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 3.处理图片资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>:&#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                                <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                                <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 4.处理字体资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 配置babel**********************************************************</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Include/Exclude*******************************************</span></span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>:  path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含(两者只能用其一)</span></span><br><span class="line">                        <span class="comment">// **********************************************************</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            &#123;<span class="comment">//开启多线程编译打包***************************</span></span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            <span class="comment">//   *****************************************</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                                <span class="comment">//cache缓存**********************************</span></span><br><span class="line">                                <span class="attr">options</span>: &#123;</span><br><span class="line">                                    <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                                    <span class="attr">cacheCompression</span>: <span class="literal">false</span>, <span class="comment">// 缓存文件不要压缩</span></span><br><span class="line">                                    </span><br><span class="line">                                    <span class="comment">// 减小babel编译时生成的重复辅助代码**************************</span></span><br><span class="line">                                    <span class="attr">plugins</span>: [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>], <span class="comment">// 减少代码体积</span></span><br><span class="line">                                    <span class="comment">// *********************************************************</span></span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="comment">// ******************************************</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                          ],</span><br><span class="line">                          <span class="comment">// ********************************************************</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// *******************************************************************</span></span><br><span class="line">                ]</span><br><span class="line">                <span class="comment">// ********************************************************************************</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Include/Exclude******************</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="comment">// ********************************</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// cache缓存设置*******************</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录(eslint缓存存放的路径)</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">              __dirname,</span><br><span class="line">              <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// ******************************</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启多线程打包编译***************</span></span><br><span class="line">            threads, <span class="comment">// 开启多进程</span></span><br><span class="line">            <span class="comment">// *******************************</span></span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置开发服务器: 不会输出任何资源, 在内存中的编译打包的*******************************</span></span><br><span class="line">        <span class="attr">devServer</span>: &#123;</span><br><span class="line">            <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">            <span class="attr">port</span>: <span class="string">&quot;5000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">            <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">            <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 关闭HMR功能（默认开启,只能用于开发环境，生产环境不需要了）</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span>,<span class="comment">//开发模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-source-map&quot;</span>,<span class="comment">//sourceMap开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="3-图片压缩-Image-Minimizer"><a href="#3-图片压缩-Image-Minimizer" class="headerlink" title="3. 图片压缩(Image Minimizer)"></a>3. 图片压缩(<code>Image Minimizer</code>)</h1><h2 id="为什么需要图片压缩"><a href="#为什么需要图片压缩" class="headerlink" title="为什么需要图片压缩?"></a>为什么需要图片压缩?</h2><ul><li><p><strong>开发如果项目中引用了较多图片(本地图片)，那么图片体积会比较大，将来请求速度比较慢。</strong></p></li><li><p><strong>我们可以对图片进行压缩，减少图片体积。</strong></p></li></ul><h3 id="注意：如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。"><a href="#注意：如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。" class="headerlink" title="注意：如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。"></a><strong>注意：如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。</strong></h3><h2 id="图片压缩是什么"><a href="#图片压缩是什么" class="headerlink" title="图片压缩是什么?"></a>图片压缩是什么?</h2><ul><li><strong><code>image-minimizer-webpack-plugin</code>: 用来压缩图片的插件</strong></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h2><h3 id="1-下载包-1"><a href="#1-下载包-1" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i image-minimizer-webpack-plugin imagemin -D</span><br></pre></td></tr></table></figure><ul><li><strong>还有剩下包需要下载，有两种模式：</strong></li></ul><h3 id="2-无损压缩"><a href="#2-无损压缩" class="headerlink" title="2. 无损压缩"></a>2. 无损压缩</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D</span><br></pre></td></tr></table></figure><h3 id="3-有损压缩"><a href="#3-有损压缩" class="headerlink" title="3. 有损压缩"></a>3. 有损压缩</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D</span><br></pre></td></tr></table></figure><ul><li><strong><a href="https://baike.baidu.com/item/%E6%97%A0%E6%8D%9F%E3%80%81%E6%9C%89%E6%8D%9F%E5%8E%8B%E7%BC%A9">有损&#x2F;无损压缩的区别</a></strong></li></ul><h3 id="4-配置webpack-prod-js-一般是生产模式-以无损压缩为例"><a href="#4-配置webpack-prod-js-一般是生产模式-以无损压缩为例" class="headerlink" title="4. 配置webpack.prod.js(一般是生产模式,以无损压缩为例)"></a>4. 配置<code>webpack.prod.js</code>(一般是生产模式,以无损压缩为例)</h3><ul><li><strong>查看<a href="https://webpack.docschina.org/plugins/image-minimizer-webpack-plugin/">ImageMinimizerWebpackPlugin官方文档</a>实施其他配置项的配置</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 获取os内置模块</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入MiniCssExtractPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入CssMinimizerPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入Terser内置插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入图片压缩插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个函数用来获取样式处理的loader(提高代码复用率)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyleLoader</span>(<span class="params">pre</span>)&#123;<span class="comment">//pre为其他的loader,如less-loader</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// *************************************************************************</span></span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//将style-loder改成MiniCssExtractPlugin.loader</span></span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,<span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// postcss-loader处理css样式的兼容性问题(放在cssloder后面,lessloder前面)*****</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        pre,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)<span class="comment">//设置一个布尔值的filter来过滤掉undefined(存css样式不需要pre[即其他的loader])</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>),<span class="comment">//相较于开发模式,生产模式需要输出</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//需要输出就需要clean(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// oneOf配置, 每个文件只能被其中一个loader处理(第一个遇到的)************************</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// 1.处理css资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>()</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 2.处理less资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>(<span class="string">&quot;less-loader&quot;</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 3.处理图片资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>:&#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                                <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                                <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 4.处理字体资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 配置babel***********************************************</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                        <span class="comment">// Include/Exclude*******************************************</span></span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>:  path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含(两者只能用其一)</span></span><br><span class="line">                        <span class="comment">// **********************************************************</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            &#123;<span class="comment">//开启多线程编译打包***************************</span></span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            <span class="comment">//   *****************************************</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ],</span><br><span class="line">                          <span class="comment">// ********************************************************</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">                <span class="comment">// ****************************************************************************</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">            <span class="comment">// Include/Exclude******************</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="comment">// ********************************</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">              __dirname,</span><br><span class="line">              <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 开启多线程打包编译***************</span></span><br><span class="line">            threads, <span class="comment">// 开启多进程</span></span><br><span class="line">            <span class="comment">// *******************************</span></span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和输出路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// css压缩************************************************************************</span></span><br><span class="line">        <span class="comment">// new CssMinimizerPlugin(),</span></span><br><span class="line">        <span class="comment">// ******************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启多线程需要重新手写 Terser 内置模块*********************************************</span></span><br><span class="line">    <span class="comment">// webpack5一般指定压缩地方为这里,上面也可以</span></span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="comment">// css压缩</span></span><br><span class="line">            <span class="comment">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),<span class="comment">//压缩css</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//js压缩   </span></span><br><span class="line">            <span class="comment">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;<span class="comment">//内置模块压缩js</span></span><br><span class="line">            <span class="attr">parallel</span>: threads <span class="comment">// 开启多进程</span></span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line">            <span class="comment">//图片压缩*******************************************</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">minimizer</span>: &#123;</span><br><span class="line">                <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                    [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">                    [</span><br><span class="line">                        <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="attr">plugins</span>: [</span><br><span class="line">                            <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                            &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                            <span class="attr">params</span>: &#123;</span><br><span class="line">                                <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">// *************************************************</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="comment">// **********************************************************************************</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,<span class="comment">//sourceMap生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> webpack高级篇&#39; </tag>
            
            <tag> Tree Shaking </tag>
            
            <tag> Babel处理重复代码 </tag>
            
            <tag> 图片压缩(Image Minimizer) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(11)-高级篇(2)-提升打包构建速度篇</title>
      <link href="/2022/10/12/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011/"/>
      <url>/2022/10/12/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011/</url>
      
        <content type="html"><![CDATA[<h1 id="HotModuleReplacement-热模替换"><a href="#HotModuleReplacement-热模替换" class="headerlink" title="HotModuleReplacement(热模替换)"></a><code>HotModuleReplacement</code>(热模替换)</h1><ul><li><p><strong>开发时我们修改了其中一个模块代码，<code>Webpack</code> 默认会将所有模块全部重新打包编译，速度很慢。</strong></p></li><li><p><strong>所以我们需要做到修改某个模块代码，就只有这个模块代码需要重新打包编译，其他模块不变，这样打包速度就能很快。</strong></p></li></ul><h2 id="什么是HotModuleReplacement-热模替换"><a href="#什么是HotModuleReplacement-热模替换" class="headerlink" title="什么是HotModuleReplacement(热模替换)"></a>什么是<code>HotModuleReplacement</code>(热模替换)</h2><ul><li><strong><code>HotModuleReplacement</code>（<code>HMR</code>&#x2F;热模块替换）：在程序运行中，替换、添加或删除模块，而无需重新加载整个页面。</strong></li></ul><h3 id="使用热模替换前-开发服务器-x3D-gt-hot-false"><a href="#使用热模替换前-开发服务器-x3D-gt-hot-false" class="headerlink" title="使用热模替换前:(开发服务器 &#x3D;&gt; hot:false)"></a>使用热模替换前:(开发服务器 &#x3D;&gt; <code>hot:false</code>)</h3><p><img src="/../upload/webpack/w3/4.gif" alt="image"></p><ul><li><strong>关闭热模替换后,每一次改动样式代码,页面重新加载</strong></li></ul><h3 id="使用热模替换前-开发服务器-x3D-gt-hot-true"><a href="#使用热模替换前-开发服务器-x3D-gt-hot-true" class="headerlink" title="使用热模替换前:(开发服务器 &#x3D;&gt; hot:true)"></a>使用热模替换前:(开发服务器 &#x3D;&gt; <code>hot:true</code>)</h3><p><strong>修改样式过后页面不再刷新就能实现变换</strong></p><ul><li><strong>开启热模替换后,每一次改动样式代码,页面不会重新加载,只会重新加载相对应的修改过后的模块并在控制台输出</strong></li></ul><h2 id="热模替换的使用-hot配置"><a href="#热模替换的使用-hot配置" class="headerlink" title="热模替换的使用(hot配置)"></a>热模替换的使用(<code>hot</code>配置)</h2><h3 id="样式的基本配置"><a href="#样式的基本配置" class="headerlink" title="样式的基本配置"></a>样式的基本配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置开发服务器: 不会输出任何资源, 在内存中的编译打包的*******************************</span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;5000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 关闭HMR功能（默认开启,只能用于开发环境，生产环境不需要了）</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// *****************************************************************************</span></span><br></pre></td></tr></table></figure><ul><li><strong>此时<code> css</code> 样式经过 <code>style-loader</code> 处理，已经具备 <code>HMR</code> 功能了(默认开启)。 但是 <code>js</code> 还不行。</strong></li></ul><h3 id="js的基本配置"><a href="#js的基本配置" class="headerlink" title="js的基本配置"></a><code>js</code>的基本配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"><span class="comment">// 引入资源，Webpack才会对其打包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/iconfont.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./less/index.less&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sass/index.sass&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sass/index.scss&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styl/index.styl&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line"><span class="keyword">const</span> result2 = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否支持HMR功能</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/count.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/sum.js&quot;</span>);<span class="comment">//开启对应路径中js的热模替换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>此时我们改动对应的<code>js</code>代码,浏览器同样不会重新加载,只会输出更改过后的模块</strong></p><ul><li><strong><code>count.js</code></strong></li></ul></li></ul><p><img src="/../upload/webpack/w3/6.gif" alt="image"></p><ul><li><strong><code>sum.js</code></strong><br><img src="/../upload/webpack/w3/7.gif" alt="image"></li></ul><h2 id="上面这样写会很麻烦，所以实际开发我们会使用其他-loader-来解决。"><a href="#上面这样写会很麻烦，所以实际开发我们会使用其他-loader-来解决。" class="headerlink" title="上面这样写会很麻烦，所以实际开发我们会使用其他 loader 来解决。"></a>上面这样写会很麻烦，所以实际开发我们会使用其他 <code>loader</code> 来解决。</h2><ul><li><strong>比如：<a href="https://github.com/vuejs/vue-loader">vue-loader</a> , <a href="https://github.com/gaearon/react-hot-loader">react-hot-loader</a>, 这样在我们的实际开发中,就不需要再<code>main.js</code>中一点一点的写, 方便我们项目的开发</strong></li></ul><h1 id="OneOf"><a href="#OneOf" class="headerlink" title="OneOf"></a><code>OneOf</code></h1><h2 id="为什么需要OneOf"><a href="#为什么需要OneOf" class="headerlink" title="为什么需要OneOf"></a>为什么需要<code>OneOf</code></h2><ul><li><strong>打包时每个文件都会经过所有 <code>loader</code> 处理，虽然因为 <code>test</code> 正则原因实际没有处理上，但是都要过一遍。比较慢。</strong></li><li><strong>也就是说,当一个<code>css</code>文件进来的时候, 这个文件会经过所有的<code>loader</code>,尽管你第一个<code>loader</code>就是处理<code>css</code>样式的,但是它还会继续的向下进行判断,这样就会导致打包时间被延长了,因为它做了很多无用功</strong></li><li><strong>我们希望打包的时候,在文件经过其第一个处理该文件类型的<code>loader</code>时,进行打包,不需要再向下过其他的<code>loader</code>,这时就需要<code>OneOf</code>了。</strong></li></ul><h2 id="什么是OneOf"><a href="#什么是OneOf" class="headerlink" title="什么是OneOf"></a>什么是<code>OneOf</code></h2><ul><li><strong>顾名思义就是只能匹配上一个 <code>loader</code>, 剩下的就不匹配了。</strong></li></ul><h2 id="使用方法-开发模式和生产模式均可使用"><a href="#使用方法-开发模式和生产模式均可使用" class="headerlink" title="使用方法:(开发模式和生产模式均可使用)"></a>使用方法:(开发模式和生产模式均可使用)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出(因为存在开发服务器,不存在输出)，不需要指定输出目录</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果(开发服务器)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// oneOf配置, 每个文件只能被其中一个loader处理(第一个遇到的)***********************************</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// 1.处理css资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                            <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 2.处理less资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                            <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                            <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                        ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 3.处理图片资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>:&#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                                <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                                <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 4.处理字体资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 配置babel**************************************************</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// **********************************************************</span></span><br><span class="line">                ]</span><br><span class="line">                <span class="comment">// ***********************************************************************</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   **************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置开发服务器: 不会输出任何资源, 在内存中的编译打包的*******************************</span></span><br><span class="line">        <span class="attr">devServer</span>: &#123;</span><br><span class="line">            <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">            <span class="attr">port</span>: <span class="string">&quot;5000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">            <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">            <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 关闭HMR功能（默认开启,只能用于开发环境，生产环境不需要了）</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// *****************************************************************************</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span>,<span class="comment">//开发模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-source-map&quot;</span>,<span class="comment">//sourceMap开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Include-amp-Exclude"><a href="#Include-amp-Exclude" class="headerlink" title="Include&amp;Exclude"></a><code>Include</code>&amp;<code>Exclude</code></h1><h2 id="为什么需要Include-Exclude"><a href="#为什么需要Include-Exclude" class="headerlink" title="为什么需要Include/Exclude"></a>为什么需要<code>Include/Exclude</code></h2><ul><li><strong>开发时我们需要使用第三方的库或插件，所有文件都下载到 <code>node_modules</code> 中了。而这些文件是不需要编译可以直接使用的。</strong></li><li><strong>所以我们在对<code> js</code> 文件处理时，要排除 <code>node_modules</code> 下面的文件。</strong></li></ul><h2 id="什么是Include-amp-Exclude"><a href="#什么是Include-amp-Exclude" class="headerlink" title="什么是Include&amp;Exclude"></a>什么是<code>Include</code>&amp;<code>Exclude</code></h2><ul><li><p><strong>include</strong></p><ul><li><strong>包含，只处理 <code>xxx</code> 文件</strong></li></ul></li><li><p><strong><code>exclude</code></strong></p><ul><li><strong>排除，除了 <code>xxx</code> 文件以外其他文件都处理</strong></li></ul></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出(因为存在开发服务器,不存在输出)，不需要指定输出目录</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果(开发服务器)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// oneOf配置, 每个文件只能被其中一个loader处理(第一个遇到的)***********************************</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// 1.处理css资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                            <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 2.处理less资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                            <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                            <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                        ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 3.处理图片资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>:&#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                                <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                                <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 4.处理字体资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 配置babel**********************************************************</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Include/Exclude*******************************************</span></span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>:  path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含(两者只能用其一)</span></span><br><span class="line">                        <span class="comment">// **********************************************************</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// *****************************************************************</span></span><br><span class="line">                ]</span><br><span class="line">                <span class="comment">// ***************************************************************************</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Include/Exclude******************</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="comment">// ********************************</span></span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置开发服务器: 不会输出任何资源, 在内存中的编译打包的*******************************</span></span><br><span class="line">        <span class="attr">devServer</span>: &#123;</span><br><span class="line">            <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">            <span class="attr">port</span>: <span class="string">&quot;5000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">            <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">            <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 关闭HMR功能（默认开启,只能用于开发环境，生产环境不需要了）</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span>,<span class="comment">//开发模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-source-map&quot;</span>,<span class="comment">//sourceMap开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>生产模式也是如此</strong></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><ul><li><strong>一般来讲,在项目当中我么们只需要针对<code>js</code>文件做处理,也就是<code>Babel</code>和<code>ESLint</code>, 样式是不需要做<code>Include</code>&amp;<code>Exclude</code>处理的,为什么呢? 因为在开发的时候我们很少去引入第三方的样式, 一般都是我们自己写样式, 因此我们就自然就不需要去排除它了, 其次,尽管我们引入了如<code>Bootstrap</code>这样的第三方样式,但是我们最终是希望它和我们最终的样式打包到一起的, 因此我们仍然是要处理的, 所以就不存在什么包含和非包含了</strong></li></ul><h1 id="Cache缓存"><a href="#Cache缓存" class="headerlink" title="Cache缓存"></a><code>Cache</code>缓存</h1><h2 id="为什么需要Cache缓存"><a href="#为什么需要Cache缓存" class="headerlink" title="为什么需要Cache缓存?"></a>为什么需要<code>Cache</code>缓存?</h2><ul><li><strong>每次打包时 <code>js</code> 文件都要经过 <code>Eslint</code> 检查 和 <code>Babel</code> 编译，要知道, 打包其实所用的事件大部分是用在<code>js</code>的编译上面, 诸如<code>css</code>等这些样式上的打包速度是很快的, 因此我们对打包速度进行一些优化多数是在<code>js</code>的打包中。</strong></li><li><strong>我们可以缓存之前的 <code>Eslint</code> 检查 和 <code>Babel</code> 编译结果，这样第二次打包时速度就会更快了。</strong></li></ul><h2 id="什么是Cache"><a href="#什么是Cache" class="headerlink" title="什么是Cache"></a>什么是<code>Cache</code></h2><ul><li><strong>对 <code>Eslint</code> 检查 和 <code>Babel</code> 编译结果进行缓存。</strong></li><li><strong>作用就是在我们第二次打包项目的时候不需要再对整个项目的<code>js</code>问价你重新打包, 只需要打包更改过后的即可</strong></li></ul><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用:"></a>基本使用:</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出(因为存在开发服务器,不存在输出)，不需要指定输出目录</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果(开发服务器)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// oneOf配置, 每个文件只能被其中一个loader处理(第一个遇到的)********************</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// 1.处理css资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                            <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 2.处理less资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                            <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                            <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                        ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 3.处理图片资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>:&#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                                <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                                <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 4.处理字体资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 配置babel*****************************************</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Include/Exclude************************</span></span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>:  path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含(两者只能用其一)</span></span><br><span class="line">                        <span class="comment">// **************************************</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//cache缓存********************************</span></span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                            <span class="attr">cacheCompression</span>: <span class="literal">false</span>, <span class="comment">// 缓存文件不要压缩</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="comment">// ***************************************</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// ************************************************</span></span><br><span class="line">                ]</span><br><span class="line">                <span class="comment">// ***************************************************************</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Include/Exclude******************</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="comment">// ********************************</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// cache缓存设置*******************</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录(eslint缓存存放的路径)</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">              __dirname,</span><br><span class="line">              <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// ******************************</span></span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置开发服务器: 不会输出任何资源, 在内存中的编译打包的*******************************</span></span><br><span class="line">        <span class="attr">devServer</span>: &#123;</span><br><span class="line">            <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">            <span class="attr">port</span>: <span class="string">&quot;5000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">            <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">            <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 关闭HMR功能（默认开启,只能用于开发环境，生产环境不需要了）</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span>,<span class="comment">//开发模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-source-map&quot;</span>,<span class="comment">//sourceMap开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="生成的文件-cache"><a href="#生成的文件-cache" class="headerlink" title="生成的文件.cache"></a>生成的文件<code>.cache</code></h3><p><img src="/../upload/webpack/w3/3.png" alt="image"></p><h1 id="Thead"><a href="#Thead" class="headerlink" title="Thead"></a><code>Thead</code></h1><h2 id="为什么需要Thead"><a href="#为什么需要Thead" class="headerlink" title="为什么需要Thead"></a>为什么需要<code>Thead</code></h2><ul><li><strong>当项目越来越庞大时，打包速度越来越慢，甚至于需要一个下午才能打包出来代码。这个速度是比较慢的。</strong></li><li><strong>我们想要继续提升打包速度，其实就是要提升 js 的打包速度，因为其他文件都比较少。</strong></li><li><strong>而对<code> js</code> 文件处理主要就是 <code>eslint</code> 、<code>babel</code>、<code>Terser</code>(内置的,一般不需要我们去配置) 三个工具，所以我们要提升它们的运行速度。</strong></li><li><strong>我们可以开启多进程同时处理 <code>js</code> 文件，这样速度就比之前的单进程打包更快了。</strong></li></ul><h2 id="什么是Thrad"><a href="#什么是Thrad" class="headerlink" title="什么是Thrad"></a>什么是<code>Thrad</code></h2><ul><li><strong>多进程打包：开启电脑的多个进程同时干一件事，速度更快。</strong></li><li><strong>需要注意：请仅在特别耗时的操作中使用，因为每个进程启动就有大约为 <code>600ms </code>左右开销。因此如果项目体积过小的话反而会拖慢打包速度</strong></li></ul><h2 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用:"></a>基本使用:</h2><ul><li><strong>首先我们要获取我们的<code>cpu</code>数量,我们启动进程的数量就是我们 <code>CPU</code> 的核数。</strong></li></ul><ol><li><strong>如何获取 CPU 的核数，因为每个电脑都不一样。</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs核心模块，直接使用</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="comment">// cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>下载包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i thread-loader -D</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>使用(这里展示生产模式, 开发模式不需要压缩,即不需要配置<code>Terser</code>)</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 获取os内置模块</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入MiniCssExtractPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入CssMinimizerPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入Terser内置插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个函数用来获取样式处理的loader(提高代码复用率)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyleLoader</span>(<span class="params">pre</span>)&#123;<span class="comment">//pre为其他的loader,如less-loader</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// *************************************************************************</span></span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//将style-loder改成MiniCssExtractPlugin.loader</span></span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,<span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// postcss-loader处理css样式的兼容性问题(放在cssloder后面,lessloder前面)*****</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        pre,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)<span class="comment">//设置一个布尔值的filter来过滤掉undefined(存css样式不需要pre[即其他的loader])</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>),<span class="comment">//相较于开发模式,生产模式需要输出</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//需要输出就需要clean(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// oneOf配置, 每个文件只能被其中一个loader处理(第一个遇到的)************************</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// 1.处理css资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>()</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 2.处理less资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>(<span class="string">&quot;less-loader&quot;</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 3.处理图片资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>:&#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                                <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                                <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 4.处理字体资源</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 配置babel***********************************************</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                        <span class="comment">// Include/Exclude*******************************************</span></span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>:  path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含(两者只能用其一)</span></span><br><span class="line">                        <span class="comment">// **********************************************************</span></span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            &#123;<span class="comment">//开启多线程编译打包***************************</span></span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            <span class="comment">//   *****************************************</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                              <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                              <span class="attr">options</span>: &#123;</span><br><span class="line">                                <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// ********************************************************</span></span><br><span class="line">                ]</span><br><span class="line">                <span class="comment">// ****************************************************************************</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">            <span class="comment">// Include/Exclude******************</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="comment">// ********************************</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">              __dirname,</span><br><span class="line">              <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 开启多线程打包编译***************</span></span><br><span class="line">            threads, <span class="comment">// 开启多进程</span></span><br><span class="line">            <span class="comment">// *******************************</span></span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和输出路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// css压缩************************************************************************</span></span><br><span class="line">        <span class="comment">// new CssMinimizerPlugin(),</span></span><br><span class="line">        <span class="comment">// ******************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启多线程需要重新手写 Terser 内置模块*********************************************</span></span><br><span class="line">    <span class="comment">// webpack5一般指定压缩地方为这里,上面也可以</span></span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">          <span class="comment">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),<span class="comment">//压缩css</span></span><br><span class="line">          <span class="comment">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;<span class="comment">//内置模块压缩js</span></span><br><span class="line">            <span class="attr">parallel</span>: threads <span class="comment">// 开启多进程</span></span><br><span class="line">          &#125;)</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,<span class="comment">//sourceMap生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> webpack高级篇&#39; </tag>
            
            <tag> HotModuleReplacement </tag>
            
            <tag> OneOf </tag>
            
            <tag> Include &amp; Exclude </tag>
            
            <tag> Cache缓存 </tag>
            
            <tag> Thead </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(10)-高级篇(1)-提升开发体验篇[SourceMap]</title>
      <link href="/2022/10/12/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010/"/>
      <url>/2022/10/12/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要SourceMap"><a href="#为什么需要SourceMap" class="headerlink" title="为什么需要SourceMap"></a>为什么需要<code>SourceMap</code></h1><ul><li><p><strong>开发时我们运行的代码是经过 <code>webpack</code> 编译后的，例如下面这个样子：</strong><br><img src="/../upload/webpack/w1/1.png" alt="image"></p></li><li><p><strong>经过<code>webpack</code>压缩过后, 所有 css 和 js 合并成了一个文件，并且多了其他代码。此时如果代码运行出错那么提示代码错误位置我们是看不懂的。一旦将来开发代码文件很多，那么很难去发现错误出现在哪里。</strong></p><ul><li><strong>这里故意设置<code>sum.js</code>出错(<code>调用两次 return 致使代码出现问题</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的加法函数[es6语法,数组的累加器方法(reduce)]</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sum</span> (...args)&#123;</span><br><span class="line">    <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">p , c</span>) =&gt;</span> p + c , <span class="number">0</span>)();<span class="comment">//这里调用两次return导致代码出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>此时浏览器的控制台报告错误如下:</strong></li></ul></li></ul><p><img src="/../upload/webpack/w3/1.gif" alt="image"></p><ul><li><p><strong>由此可见,我们看到控制台报错是编译后的,并非源码</strong></p></li><li><p><strong>因此,我们需要更加准确的错误提示，来帮助我们更好的开发代码。</strong></p></li></ul><h1 id="什么是SourceMap"><a href="#什么是SourceMap" class="headerlink" title="什么是SourceMap"></a>什么是<code>SourceMap</code></h1><ul><li><strong><code>SourceMap</code>（源代码映射）是一个用来生成源代码与构建后代码一一映射的文件的方案。</strong></li><li><strong>它会生成一个 <code>xxx.map</code> 文件，里面包含源代码和构建后代码每一行、每一列的映射关系。当构建后代码出错了，会通过 <code>xxx.map</code> 文件，从构建后代码出错位置找到映射后源代码出错位置，从而让浏览器提示源代码文件出错位置，帮助我们更快的找到错误根源。</strong></li></ul><h1 id="SourceMap怎么用"><a href="#SourceMap怎么用" class="headerlink" title="SourceMap怎么用"></a><code>SourceMap</code>怎么用</h1><ul><li><strong>通过查看<a href="https://webpack.docschina.org/configuration/devtool/">Webpack DevTool 文档</a>可知，SourceMap 的值有很多种情况.</strong></li></ul><h2 id="实际开发时我们只需要关注两种情况即可："><a href="#实际开发时我们只需要关注两种情况即可：" class="headerlink" title="实际开发时我们只需要关注两种情况即可："></a>实际开发时我们只需要关注两种情况即可：</h2><h3 id="开发模式使用-cheap-module-source-map"><a href="#开发模式使用-cheap-module-source-map" class="headerlink" title="开发模式使用: cheap-module-source-map"></a>开发模式使用: <code>cheap-module-source-map</code></h3><ul><li><strong>优点：打包编译速度快，只包含行映射</strong></li><li><strong>缺点：没有列映射</strong></li><li><strong>开发模式的源码配置如下:(<code>webpack.dev.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出(因为存在开发服务器,不存在输出)，不需要指定输出目录</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果(开发服务器)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置开发服务器: 不会输出任何资源, 在内存中的编译打包的*******************************</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">        <span class="attr">port</span>: <span class="string">&quot;5000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span>,<span class="comment">//开发模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-source-map&quot;</span>,<span class="comment">//sourceMap开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="生产模式使用：source-map"><a href="#生产模式使用：source-map" class="headerlink" title="生产模式使用：source-map"></a>生产模式使用：<code>source-map</code></h3><ul><li><strong>优点：包含行&#x2F;列映射</strong></li><li><strong>缺点：打包编译速度更慢</strong></li><li><strong>生产模式的源码配置如下:(<code>webpack.pro.js</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出(因为存在开发服务器,不存在输出)，不需要指定输出目录</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果(开发服务器)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,<span class="comment">//sourceMap生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="开发模式结果展示"><a href="#开发模式结果展示" class="headerlink" title="开发模式结果展示:"></a>开发模式结果展示:</h3><p><img src="/../upload/webpack/w3/2.gif" alt="image"></p><h3 id="生产模式结果展示"><a href="#生产模式结果展示" class="headerlink" title="生产模式结果展示:"></a>生产模式结果展示:</h3><ul><li><p><strong>这里我们就可以看到<code>xxx.map</code>映射文件输出</strong><br><img src="/../upload/webpack/w3/2.png" alt="image"></p></li><li><p><strong>浏览器控制台输出报错</strong><br><img src="/../upload/webpack/w3/3.gif" alt="image"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> SourceMap </tag>
            
            <tag> webpack高级篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(9)-css处理和html 压缩</title>
      <link href="/2022/10/10/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/"/>
      <url>/2022/10/10/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/</url>
      
        <content type="html"><![CDATA[<h1 id="1-提取-Css-成单独文件-MiniCssExtractPlugin"><a href="#1-提取-Css-成单独文件-MiniCssExtractPlugin" class="headerlink" title="1. 提取 Css 成单独文件(MiniCssExtractPlugin)"></a>1. 提取 <code>Css</code> 成单独文件(<code>MiniCssExtractPlugin</code>)</h1><ul><li><p><strong><code>Css</code> 文件目前被打包到 <code>js</code> 文件中，当 <code>js</code> 文件加载时，会创建一个 <code>style</code> 标签来生成样式</strong></p></li><li><p><strong>这样对于网站来说，会出现闪屏现象，用户体验不好</strong></p></li><li><p><strong>我们应该是单独的 <code>Css</code> 文件，通过 <code>link</code> 标签加载性能才好</strong></p></li></ul><h4 id="闪屏现象如下"><a href="#闪屏现象如下" class="headerlink" title="闪屏现象如下:"></a>闪屏现象如下:</h4><p><img src="/../upload/webpack/w2/1.gif" alt="image"></p><h4 id="这时我们就用到一个插件MiniCssExtractPlugin该插件会将-CSS-提取到单独的文件中，为每个包含-CSS-的-JS-文件创建一个-CSS-文件，并且支持-CSS-和-SourceMaps-的按需加载。"><a href="#这时我们就用到一个插件MiniCssExtractPlugin该插件会将-CSS-提取到单独的文件中，为每个包含-CSS-的-JS-文件创建一个-CSS-文件，并且支持-CSS-和-SourceMaps-的按需加载。" class="headerlink" title="这时我们就用到一个插件MiniCssExtractPlugin该插件会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载。"></a>这时我们就用到一个插件<code>MiniCssExtractPlugin</code>该插件会将 <code>CSS</code> 提取到单独的文件中，为每个包含 <code>CSS</code> 的 <code>JS</code> 文件创建一个 <code>CSS</code> 文件，并且支持 <code>CSS</code> 和 <code>SourceMaps</code> 的按需加载。</h4><ul><li><strong><a href="https://webpack.docschina.org/plugins/mini-css-extract-plugin/">官方文档</a></strong></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h2><h4 id="1-下载包"><a href="#1-下载包" class="headerlink" title="1.下载包"></a>1.下载包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure><h4 id="2-配置webpack-prod-js-将所有的style-loder改成MiniCssExtractPlugin-loader"><a href="#2-配置webpack-prod-js-将所有的style-loder改成MiniCssExtractPlugin-loader" class="headerlink" title="2.配置webpack.prod.js(将所有的style-loder改成MiniCssExtractPlugin.loader)"></a>2.配置<code>webpack.prod.js</code>(将所有的<code>style-loder</code>改成<code>MiniCssExtractPlugin.loader</code>)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入MiniCssExtractPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>),<span class="comment">//相较于开发模式,生产模式需要输出</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//需要输出就需要clean(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="comment">// *************************************************************************</span></span><br><span class="line">                    <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//将style-loder改成MiniCssExtractPlugin.loader</span></span><br><span class="line">                    <span class="comment">// ************************************************************************</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="comment">// *************************************************************************</span></span><br><span class="line">                    <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//将style-loder改成MiniCssExtractPlugin.loader</span></span><br><span class="line">                    <span class="comment">// ************************************************************************</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                    <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                    <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                    <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                    <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 4.处理字体资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                  <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置babel**********************************************************</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// *******************************************************************</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和输出路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span><span class="comment">//生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-运行指令"><a href="#3-运行指令" class="headerlink" title="3. 运行指令"></a>3. 运行指令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">npx webpack --config ./config/webpack.prod.js</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/webpack/w2/8.png" alt="image"></p><h1 id="2-Css-兼容性处理"><a href="#2-Css-兼容性处理" class="headerlink" title="2.Css 兼容性处理"></a>2.<code>Css</code> 兼容性处理</h1><ul><li><p><strong>之前我们使用<code>babel</code>来处理<code>js</code>的样式兼容性问题,但是<code>css</code>样式同样是存在兼容性问题的,这里我们选择<code>postcss-loader</code>来处理</strong></p></li><li><p><strong><a href="https://webpack.docschina.org/loaders/postcss-loader#root">官方文档</a></strong></p></li></ul><h2 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法:"></a>使用方法:</h2><h3 id="1-下载包-1"><a href="#1-下载包-1" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i postcss-loader postcss postcss-preset-env -D</span><br></pre></td></tr></table></figure><h3 id="2-配置webpack-prod-js-封装loader函数"><a href="#2-配置webpack-prod-js-封装loader函数" class="headerlink" title="2. 配置webpack.prod.js(封装loader函数)"></a>2. 配置<code>webpack.prod.js</code>(封装<code>loader</code>函数)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入MiniCssExtractPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*   封装loader函数   */</span></span><br><span class="line"><span class="comment">// 设置一个函数用来获取样式处理的loader(提高代码复用率)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyleLoader</span>(<span class="params">pre</span>)&#123;<span class="comment">//pre为其他的loader,如less-loader</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// *************************************************************************</span></span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//将style-loder改成MiniCssExtractPlugin.loader</span></span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,<span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// postcss-loader处理css样式的兼容性问题(放在cssloder后面,lessloder前面)*****</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        pre,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)<span class="comment">//设置一个布尔值的filter来过滤掉undefined(存css样式不需要pre[即其他的loader])</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>),<span class="comment">//相较于开发模式,生产模式需要输出</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//需要输出就需要clean(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>(<span class="string">&quot;less-loader&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                    <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                    <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                    <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                    <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 4.处理字体资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                  <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置babel**********************************************************</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// *******************************************************************</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和输出路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span><span class="comment">//生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-控制兼容性"><a href="#3-控制兼容性" class="headerlink" title="3. 控制兼容性"></a>3. 控制兼容性</h3><ul><li><strong>我们可以在 <code>package.json</code> 文件中添加 <code>browserslist</code> 来控制样式的兼容性做到什么程度。</strong></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ie &gt;= 8&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>想要知道更多的 <code>browserslist</code> 配置，查看<a href="https://github.com/browserslist/browserslist">browserslist 文档</a></strong></p></li><li><p><strong>以上为了测试兼容性所以设置兼容浏览器 ie8 以上。</strong></p></li><li><p><strong>实际开发中我们一般不考虑旧版本浏览器了，所以我们可以这样设置：</strong></p></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="comment">//(以下三者取的是交集)</span></span><br><span class="line">      <span class="string">&quot;last 2 version&quot;</span><span class="punctuation">,</span> <span class="comment">//只需要浏览器最近的两个版本</span></span><br><span class="line">      <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span> <span class="comment">//覆盖市面上99%的浏览器</span></span><br><span class="line">      <span class="string">&quot;not dead&quot;</span><span class="comment">//浏览器发展过程中遗弃的版本不要</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="3-Css-压缩"><a href="#3-Css-压缩" class="headerlink" title="3.Css 压缩"></a>3.<code>Css </code>压缩</h1><ul><li><strong><a href="https://webpack.docschina.org/plugins/css-minimizer-webpack-plugin/#root">官方文档</a></strong></li></ul><h2 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法:"></a>使用方法:</h2><ol><li><strong>下载包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i css-minimizer-webpack-plugin -D</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置<code>webpack.prod.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入MiniCssExtractPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入CssMinimizerPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个函数用来获取样式处理的loader(提高代码复用率)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyleLoader</span>(<span class="params">pre</span>)&#123;<span class="comment">//pre为其他的loader,如less-loader</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// *************************************************************************</span></span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//将style-loder改成MiniCssExtractPlugin.loader</span></span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,<span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// postcss-loader处理css样式的兼容性问题(放在cssloder后面,lessloder前面)*****</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ************************************************************************</span></span><br><span class="line">        pre,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)<span class="comment">//设置一个布尔值的filter来过滤掉undefined(存css样式不需要pre[即其他的loader])</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>),<span class="comment">//相较于开发模式,生产模式需要输出</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//需要输出就需要clean(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>(<span class="string">&quot;less-loader&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                    <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                    <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                    <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                    <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 4.处理字体资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                  <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置babel**********************************************************</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// *******************************************************************</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和输出路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// css压缩************************************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">        <span class="comment">// ******************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span><span class="comment">//生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>运行指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">npx webpack --config ./config/webpack.prod.js</span><br></pre></td></tr></table></figure><h1 id="4-html-压缩"><a href="#4-html-压缩" class="headerlink" title="4. html 压缩"></a>4. html 压缩</h1><ul><li><strong>默认生产模式已经开启了：html 压缩和 js 压缩, 不需要额外进行配置</strong></li></ul><h1 id="5-webpack的基础总结"><a href="#5-webpack的基础总结" class="headerlink" title="5. webpack的基础总结:"></a>5. webpack的基础总结:</h1><ol><li><strong>两种开发模式</strong></li></ol><ul><li><strong>开发模式：代码能编译自动化运行</strong></li><li><strong>生产模式：代码编译优化输出</strong></li></ul><ol><li><strong><code>Webpack</code> 基本功能</strong></li></ol><ul><li><strong>开发模式：可以编译 <code>ES Module</code> 语法</strong></li><li><strong>生产模式：可以编译 <code>ES Module</code> 语法，压缩 <code>js</code> 代码</strong></li></ul><ol><li><strong><code>Webpack</code> 配置文件</strong></li></ol><ul><li><strong>5 个核心概念</strong><ul><li><code>entry</code></li><li><code>output</code></li><li><code>loader</code></li><li><code>plugins</code></li><li><code>mode</code></li></ul></li><li><strong><code>devServer</code> 配置</strong></li></ul><ol><li><strong><code>Webpack</code> 脚本指令用法</strong></li></ol><ul><li><strong><code>webpack</code> 直接打包输出</strong></li><li><strong><code>webpack serve</code> 启动开发服务器，内存编译打包没有输出</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> css处理 </tag>
            
            <tag> html压缩 </tag>
            
            <tag> webpack基础总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(8)-开发服务器(devServer)以及生产模式的介绍</title>
      <link href="/2022/10/10/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/"/>
      <url>/2022/10/10/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/</url>
      
        <content type="html"><![CDATA[<h1 id="开发服务器-amp-自动化"><a href="#开发服务器-amp-自动化" class="headerlink" title="开发服务器&amp;自动化"></a>开发服务器<code>&amp;</code>自动化</h1><ul><li><p><strong>我们每一次写完代码或者更新代码都要手动的输入<code>webpack</code>指令来重新打包才能编译代码,这样太麻烦了,我们希望一切都能够自动化实现,页面或者打包资源能够随着我们源码的改动而重新执行打包最后渲染到页面上,这时我们就需要<code>开发服务器</code>了</strong></p></li><li><p><strong>开发服务器:顾名思义,<a href="https://www.npmjs.com/package/webpack-dev-server">webpack-dev-server</a> 是 <code>Webpack</code> 官方支持的基于 <code>CLI</code> 的工具,它的作用: 当代码发生变化时，只重新打包变化的代码，自动更新到页面，但是打包的资源存放到内存中，并不会打包到项目的指定位置(<code>即没有输出,不会输出打包好的资源到dist中</code>), 随后自动刷新浏览器。</strong></p></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h2><ul><li><strong>下载包</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><ul><li><strong>配置<code>webpack.config.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;dist&quot;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                    <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                    <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                    <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                    <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 4.处理字体资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                  <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置babel**********************************************************</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// *******************************************************************</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置开发服务器: 不会输出任何资源, 在内存中的编译打包的*******************************</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">        <span class="attr">port</span>: <span class="string">&quot;5000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">//开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>运行指令</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack serve</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><ul><li><strong>运行指令发生了变化, 并且当你使用开发服务器时，所有代码都会在内存中编译打包，并不会输出到 dist 目录下。</strong></li><li><strong>开发时我们只关心代码能运行，有效果即可，至于代码被编译成什么样子，我们并不需要知道。</strong></li></ul><h1 id="生产模式的介绍"><a href="#生产模式的介绍" class="headerlink" title="生产模式的介绍"></a>生产模式的介绍</h1><ul><li><p><strong>生产模式是开发完成代码后，我们需要得到代码将来部署上线。</strong></p></li><li><p><strong>这个模式下我们主要对代码进行优化，让其运行性能更好。</strong></p><ul><li><strong>优化主要从两个角度出发:</strong><ol><li><strong>优化代码运行性能</strong></li><li><strong>优化代码打包速度</strong></li></ol></li></ul></li></ul><h2 id="生产模式准备"><a href="#生产模式准备" class="headerlink" title="生产模式准备:"></a>生产模式准备:</h2><ul><li><strong>我们分别准备两个配置文件来放不同的配置(<code>webpack.dev.js</code>[开发模式配置文件]和<code>webpack.prod.js</code>[生产模式配置文件])</strong></li></ul><h3 id="1-文件目录"><a href="#1-文件目录" class="headerlink" title="1. 文件目录"></a>1. 文件目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── webpack-test (项目根目录)</span><br><span class="line">    ├── config (Webpack配置文件目录)</span><br><span class="line">    │    ├── webpack.dev.js(开发模式配置文件)</span><br><span class="line">    │    └── webpack.prod.js(生产模式配置文件)</span><br><span class="line">    ├── node_modules (下载包存放目录)</span><br><span class="line">    ├── src (项目源码目录，除了html其他都在src里面)</span><br><span class="line">    │    └── 略</span><br><span class="line">    ├── public (项目html文件)</span><br><span class="line">    │    └── index.html</span><br><span class="line">    ├── .eslintrc.js(Eslint配置文件)</span><br><span class="line">    ├── babel.config.js(Babel配置文件)</span><br><span class="line">    └── package.json (包的依赖管理配置文件)</span><br></pre></td></tr></table></figure><h3 id="2-修改-webpack-dev-js"><a href="#2-修改-webpack-dev-js" class="headerlink" title="2. 修改 webpack.dev.js"></a>2. 修改 <code>webpack.dev.js</code></h3><ul><li><strong>因为文件目录变了，所以所有绝对路径需要回退一层目录才能找到对应的文件(给输出或检查的路径添加上<code>../</code>)</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出(因为存在开发服务器,不存在输出)，不需要指定输出目录</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果(开发服务器)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                    <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                    <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                    <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                    <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 4.处理字体资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                  <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置babel**********************************************************</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// *******************************************************************</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置开发服务器: 不会输出任何资源, 在内存中的编译打包的*******************************</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">        <span class="attr">port</span>: <span class="string">&quot;5000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// **********************************************************************************</span></span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">//开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>运行开发模式的指令：(过于麻烦,后面可以设置运行指令来简化)</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack serve --config ./config/webpack.dev.js</span><br></pre></td></tr></table></figure><h3 id="3-修改-webpack-prod-js"><a href="#3-修改-webpack-prod-js" class="headerlink" title="3. 修改 webpack.prod.js"></a>3. 修改 <code>webpack.prod.js</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;../dist&quot;</span>),<span class="comment">//相较于开发模式,生产模式需要输出</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//需要输出就需要clean(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                    <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                    <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                    <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                    <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 4.处理字体资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                  <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置babel**********************************************************</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// *******************************************************************</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产模式不需要开发服务器(devServer)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;production&quot;</span><span class="comment">//生产模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>运行生产模式的指令：</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack --config ./config/webpack.prod.js</span><br></pre></td></tr></table></figure><h3 id="4-配置运行指令-简化指令"><a href="#4-配置运行指令-简化指令" class="headerlink" title="4. 配置运行指令(简化指令)"></a>4. 配置运行指令(简化指令)</h3><ul><li><strong>为了方便运行不同模式的指令，我们将指令定义在 <code>package.json</code> 中 <code>scripts</code> 里面</strong></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx webpack serve --config ./config/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx webpack --config ./config/webpack.prod.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="以后启动指令："><a href="#以后启动指令：" class="headerlink" title="以后启动指令："></a>以后启动指令：</h4><ul><li><strong>开发模式：<code>npm start</code> 或 <code>npm run dev</code></strong></li><li><strong>生产模式：<code>npm run build</code></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> 开发服务器 </tag>
            
            <tag> devServer </tag>
            
            <tag> 生产模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(7)-处理html资源</title>
      <link href="/2022/10/10/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/"/>
      <url>/2022/10/10/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/</url>
      
        <content type="html"><![CDATA[<h1 id="处理-Html-资源-HtmlWebpackPlugin"><a href="#处理-Html-资源-HtmlWebpackPlugin" class="headerlink" title="处理 Html 资源(HtmlWebpackPlugin)"></a>处理 <code>Html</code> 资源(<code>HtmlWebpackPlugin</code>)</h1><ul><li><p><strong>现阶段的每一次打包成功过后，我们都是手动引入的打包生成的<code>js</code>资源,但问题是,将来我们打包输出的<code>js</code>资源的名字是不固定的(<code>即不一定叫main.js</code>)并且后续我们打包生成的<code>js</code>资源也许是多个<code>js</code>文件甚至是多个<code>css</code>文件,因此我们不可能在<code>index.html</code>中一个一个的引入,这样太麻烦了并且不同的资源之间还可能存在不同的依赖关系,引错了还可能会报错,因此我们就需要自动引入打包好的资源,这是最方便的</strong></p></li><li><p><strong><a href="https://webpack.docschina.org/plugins/html-webpack-plugin/#root">webpack官方文档</a></strong></p></li><li><p><strong>这个插件将为你生成一个 <code>HTML5</code> 文件(路径:<code>dist/index.html</code>)， 在 <code>body</code> 中使用 <code>script</code> 标签引入你所有 <code>webpack</code>(打包) 生成的资源,如果你有多个 <code>webpack</code> 入口，他们都会在已生成 <code>HTML</code> 文件中的 <code>&lt;script&gt;</code> 标签内引入。如果在 <code>webpack</code> 的输出中有任何 <code>CSS</code> 资源（例如，使用 <a href="https://webpack.docschina.org/plugins/mini-css-extract-plugin/">MiniCssExtractPlugin</a> 提取的 <code>CSS</code>），那么这些资源也会在 <code>HTML</code> 文件 <code>&lt;head&gt;</code> 元素中的 <code>&lt;link&gt;</code> 标签内引入。</strong></p></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h2><ol><li><strong>安装包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置<code>webpack.config.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入HtmlWebpackPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;dist&quot;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                    <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                    <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                    <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                    <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 4.处理字体资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                  <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置babel**********************************************************</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// *******************************************************************</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin配置*******************************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public/index.html&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">        <span class="comment">//   ****************************************************************************</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">//开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>修改 <code>src</code>中的<code> index.html</code>(关闭手动引入)</strong></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello webpack!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- less样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用字体图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-aixin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-bianji&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-Dyanjing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-caidan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 手动引入(麻烦且存在不同资源之间的依赖问题) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&quot;../dist/static/js/main.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动引入(通过插件实现:HtmlWebpackPlugin) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>重新打包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/webpack/w2/7.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> HtmlWebpackPlugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(6)-Babel的基本使用</title>
      <link href="/2022/10/10/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/"/>
      <url>/2022/10/10/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初识Babel"><a href="#1-初识Babel" class="headerlink" title="1. 初识Babel"></a>1. 初识<code>Babel</code></h1><ul><li><p><strong><code>Babel</code>是一个<code>JavaScript</code> 编译器。主要用于将 ES6 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中</strong></p></li><li><p><strong>它在<code>webpack</code>中主要是已<code>loader</code>的形式使用的</strong></p></li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件:"></a>配置文件:</h2><ul><li><p><strong>配置文件由很多种写法：</strong></p><ul><li><p><strong><code>babel.config.*</code>：新建文件，位于项目根目录</strong></p><ul><li><strong><code>babel.config.js</code>(常用)</strong></li><li><strong><code>babel.config.json</code></strong></li></ul></li><li><p><strong><code>.babelrc.*</code>：新建文件，位于项目根目录</strong></p><ul><li><strong><code>.babelrc</code></strong></li><li><strong><code>.babelrc.js</code></strong></li><li><strong><code>.babelrc.json</code></strong></li></ul></li></ul></li><li><p><strong><code>package.json</code> 中 <code>babel</code>：不需要创建文件，在原有文件基础上写</strong></p></li></ul><p><strong><code>Babel</code> 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</strong></p><h2 id="具体配置"><a href="#具体配置" class="headerlink" title="具体配置:"></a>具体配置:</h2><ul><li><strong>我们以 <code>babel.config.js</code> 配置文件为例：</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 预设</span></span><br><span class="line">  <span class="attr">presets</span>: [],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong><code>presets</code> 预设</strong><ul><li><strong>简单理解：就是一组 Babel 插件, 扩展 Babel 功能</strong><ul><li><strong><code>@babel/preset-env</code>: 一个智能预设，允许您使用最新的 JavaScript。</strong></li><li><strong><code>@babel/preset-react</code>：一个用来编译 React jsx 语法的预设</strong></li><li><strong><code>@babel/preset-typescript</code>：一个用来编译 TypeScript 语法的预设</strong></li></ul></li></ul></li></ul><h1 id="在-Webpack-中使用"><a href="#在-Webpack-中使用" class="headerlink" title="在 Webpack 中使用"></a>在 <code>Webpack</code> 中使用</h1><ol><li><strong>首先下载包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>定义 Babel 配置文件(在根目录下新建<code>babel.config.js</code>)</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//智能预设,使其能够编译ES6的语法</span></span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>配置<code>webpack.config.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"><span class="comment">// 引入eslint</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;dist&quot;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                    <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                    <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                    <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                    <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 4.处理字体资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                  <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置babel**********************************************************</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="comment">//检查匹配以js结尾的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// *******************************************************************</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">//开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>随后进行项目的打包</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><p><strong>没有使用<code>babel</code>打包输出的<code>dist</code></strong><br><img src="/../upload/webpack/w2/5.png" alt="image"></p></li><li><p><strong>使用<code>babel</code>打包输出的<code>dist</code></strong><br><img src="/../upload/webpack/w2/6.png" alt="image"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> Babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(5)-Eslint语法检查</title>
      <link href="/2022/10/10/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/"/>
      <url>/2022/10/10/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初识Eslint"><a href="#1-初识Eslint" class="headerlink" title="1.初识Eslint"></a>1.初识<code>Eslint</code></h1><ul><li><p><strong><a href="http://eslint.cn/">ESLint</a> 是一个代码检查工具，用来检查你的代码是否符合指定的规范（例如： &#x3D; 的前后必须有一个空格）。</strong></p></li><li><p><strong>使用<code>ESLint</code>的好处在于：多人协作时代码风格统一</strong></p></li><li><p><strong><code>EsLint</code>其实就是一个在<code>webpack</code>中配置的一个插件</strong></p></li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><strong>我们使用 <code>Eslint</code>，关键是写 <code>Eslint</code> 配置文件，里面写上各种 <code>rules</code> 规则，将来运行 <code>Eslint</code> 时就会以写的规则对代码进行检查</strong></li></ul><h3 id="配置文件的多种写法"><a href="#配置文件的多种写法" class="headerlink" title="配置文件的多种写法"></a>配置文件的多种写法</h3><ul><li><strong><code>.eslintrc.*</code>：新建文件，位于项目根目录</strong></li><li><strong><code>.eslintrc</code></strong></li><li><strong><code>.eslintrc.js</code>(常用)</strong></li><li><strong><code>.eslintrc.json</code>(常用)</strong></li><li><strong>区别在于配置格式不一样</strong></li><li><strong><code>package.json</code> 中 <code>eslintConfig</code>：不需要创建文件，在原有文件基础上写</strong></li></ul><p><strong><code>ESLint</code> 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</strong></p><h2 id="具体配置"><a href="#具体配置" class="headerlink" title="具体配置"></a>具体配置</h2><ul><li><strong>我们以 <code>.eslintrc.js</code> 配置文件为例：</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 解析选项</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 具体检查规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 继承其他规则(如果是vue或者react等框架规范则需要下载)</span></span><br><span class="line">  <span class="attr">extends</span>: [],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 其他规则详见：https://eslint.bootcss.com/docs/user-guide/configuring</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong><code>parserOptions</code> 解析选项</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">parserOptions</span>: &#123;</span><br><span class="line">  <span class="attr">ecmaVersion</span>: <span class="number">6</span>, <span class="comment">// ES 语法版本</span></span><br><span class="line">  <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">// ES 模块化</span></span><br><span class="line">  <span class="attr">ecmaFeatures</span>: &#123; <span class="comment">// ES 其他特性</span></span><br><span class="line">    <span class="attr">jsx</span>: <span class="literal">true</span> <span class="comment">// 如果是 React 项目，就需要开启 jsx 语法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>rules</code> 具体规则</strong><ul><li><strong><code>&quot;off&quot;</code> 或 <code>0</code> - 关闭规则</strong></li><li><strong><code>&quot;warn&quot;</code> 或 <code>1</code> - 开启规则，使用警告级别的错误：<code>warn</code> (不会导致程序退出)</strong></li><li><strong><code>&quot;error&quot;</code> 或 <code>2</code> - 开启规则，使用错误级别的错误：<code>error</code> (当被触发的时候，程序会退出)</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  <span class="attr">semi</span>: <span class="string">&quot;error&quot;</span>, <span class="comment">// 禁止使用分号</span></span><br><span class="line">  <span class="string">&#x27;array-callback-return&#x27;</span>: <span class="string">&#x27;warn&#x27;</span>, <span class="comment">// 强制数组方法的回调函数中有 return 语句，否则警告</span></span><br><span class="line">  <span class="string">&#x27;default-case&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;warn&#x27;</span>, <span class="comment">// 要求 switch 语句中有 default 分支，否则警告</span></span><br><span class="line">    &#123; <span class="attr">commentPattern</span>: <span class="string">&#x27;^no default$&#x27;</span> &#125; <span class="comment">// 允许在最后注释 no default, 就不会有警告了</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">eqeqeq</span>: [</span><br><span class="line">    <span class="string">&#x27;warn&#x27;</span>, <span class="comment">// 强制使用 === 和 !==，否则警告</span></span><br><span class="line">    <span class="string">&#x27;smart&#x27;</span> <span class="comment">// https://eslint.bootcss.com/docs/rules/eqeqeq#smart 除了少数情况下不会有警告</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更多规则详见：<a href="https://eslint.bootcss.com/docs/rules/">规则文档</a></strong></p><ul><li><p><strong><code>extends</code> 继承</strong></p></li><li><p><strong>开发中一点点写 rules 规则太费劲了，所以有更好的办法，继承现有的规则。</strong></p></li><li><p>现有以下较为有名的规则：</p><ul><li><p><a href="https://eslint.bootcss.com/docs/rules/">Eslint 官方的规则</a>：<code>eslint:recommended</code></p></li><li><p><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli-plugin-eslint">Vue Cli 官方的规则</a>：<code>plugin:vue/essential</code></p></li><li><p><a href="https://github.com/facebook/create-react-app/tree/main/packages/eslint-config-react-app">React Cli 官方的规则</a>：<code>react-app</code></p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如在React项目中，我们可以这样写配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;react-app&quot;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// 我们的规则会覆盖掉react-app里面对应的规则</span></span><br><span class="line">    <span class="comment">// 所以想要修改规则直接在这里改就是了</span></span><br><span class="line">    <span class="attr">eqeqeq</span>: [<span class="string">&quot;warn&quot;</span>, <span class="string">&quot;smart&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Eslint在-Webpack-中的使用"><a href="#Eslint在-Webpack-中的使用" class="headerlink" title="Eslint在 Webpack 中的使用"></a><code>Eslint</code>在 <code>Webpack</code> 中的使用</h1><ul><li><strong>首先下载包</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i eslint-webpack-plugin eslint -D</span><br></pre></td></tr></table></figure><ul><li><strong>定义 <code>Eslint</code> 配置文件(在根目录下新建一个<code>.eslintrc.js</code>文件)</strong></li></ul><p><img src="/../upload/webpack/w2/2.png" alt="image"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 继承 Eslint的默认规则</span></span><br><span class="line">    <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">      <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 启用浏览器中全局变量(这样就可以使用console.log等输出)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">      <span class="attr">ecmaVersion</span>: <span class="number">6</span>, <span class="comment">//es6语法</span></span><br><span class="line">      <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">//es模块化</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">      <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 不能使用 var 定义变量(0:关闭规则,1:开启规则(警告),2:开启(错误))</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>配置<code>webpack.config.js</code></strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入eslint*****************************************************</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">//***************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line"><span class="comment">//输出设置省略</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置省略</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// eslint配置*********************************************</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录(src目录下的所有文件的语法)</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">          &#125;),</span><br><span class="line">       <span class="comment">//******************************************************** </span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">//开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>随后我们在<code>main.js</code>中做一些修改</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入js文件</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./js/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&#x27;./js/sum&#x27;</span></span><br><span class="line"><span class="comment">// 引入css资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// 引入less资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./less/index.less&#x27;</span></span><br><span class="line"><span class="comment">// 引入字体样式(切记是字体样式并非字体)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/iconfont.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;<span class="comment">//故意设置一个var变量</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">3</span> , <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/webpack/w2/1.png" alt="image"></p><h2 id="VScode中ESLint插件以及-eslintignore的配置"><a href="#VScode中ESLint插件以及-eslintignore的配置" class="headerlink" title="VScode中ESLint插件以及.eslintignore的配置"></a><code>VScode</code>中<code>ESLint</code>插件以及<code>.eslintignore</code>的配置</h2><ul><li><p><strong>打开 <code>VSCode</code>，下载 <code>Eslint </code>插件，即可不用编译就能看到错误，可以提前解决</strong></p></li><li><p><strong>但是此时就会对项目<code>所有文件</code>默认进行 <code>Eslint</code> 检查了，我们 <code>dist</code> 目录下的打包后文件就会报错。但是我们只需要检查 <code>src</code> 下面的文件，不需要检查 <code>dist</code> 下面的文件。</strong><br><img src="/../upload/webpack/w2/3.png" alt="image"></p></li><li><p><strong>这时我们就可以使用 Eslint 忽略文件(<code>.eslintignore</code>)解决。在项目根目录新建下面文件:</strong></p><ul><li><code>.eslintignore</code></li></ul></li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 忽略dist目录下所有文件</span></span><br><span class="line"><span class="string">dist</span></span><br></pre></td></tr></table></figure><ul><li><strong>结果展示</strong><br><img src="/../upload/webpack/w2/4.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> Eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(4)-修改输出资源的名称和路径,自动清空上次的打包内容,处理字体图标资源及其他静态资源</title>
      <link href="/2022/09/26/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/"/>
      <url>/2022/09/26/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack学习笔记-4-修改输出资源的名称和路径"><a href="#webpack学习笔记-4-修改输出资源的名称和路径" class="headerlink" title="webpack学习笔记(4)-修改输出资源的名称和路径"></a>webpack学习笔记(4)-修改输出资源的名称和路径</h1><h2 id="1-修改资源的输出路径和名称"><a href="#1-修改资源的输出路径和名称" class="headerlink" title="1.修改资源的输出路径和名称"></a>1.修改资源的输出路径和名称</h2><ul><li><ol><li><strong>配置</strong></li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;dist&quot;</span>),<span class="comment">//绝对路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*修改js文件输出位置--------------------------------------------------------------------*/</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">    <span class="comment">/*-----------------------------------------------------------------------------------*/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            <span class="comment">/* 修改图片资源的输出位置---------------------------------------------------------------*/</span></span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                    <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                    <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                    <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                    <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">/*----------------------------------------------------------------------------------*/</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">//开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li><strong>修改 index.html</strong></li></ol></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello webpack!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- less样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/static/js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li><strong>运行指令</strong></li></ol></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="此时输出文件目录：（注意：需要将上次打包生成的文件清空，再重新打包才有效果）"><a href="#此时输出文件目录：（注意：需要将上次打包生成的文件清空，再重新打包才有效果）" class="headerlink" title="此时输出文件目录：（注意：需要将上次打包生成的文件清空，再重新打包才有效果）"></a>此时输出文件目录：（注意：需要将上次打包生成的文件清空，再重新打包才有效果）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── dist</span><br><span class="line">    └── static</span><br><span class="line">         ├── imgs</span><br><span class="line">         │    └── 7003350e.png</span><br><span class="line">         └── js</span><br><span class="line">              └── main.js</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../upload/webpack/w1/8.png" alt="image"></p><h2 id="2-自动清空上次的打包内容"><a href="#2-自动清空上次的打包内容" class="headerlink" title="2.自动清空上次的打包内容"></a>2.自动清空上次的打包内容</h2><ul><li><strong>只需要在<code>webpack.config.js</code>当中添加一个配置项(<code>output</code>里面)即可</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">output</span>:&#123;</span><br><span class="line">    <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">    <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">    <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;dist&quot;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">    <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">/*自动清空上次打包内容的配置项--------------------------------------------------------*/</span></span><br><span class="line">    <span class="comment">// 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">/*----------------------------------------------------------------------------------*/</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-处理字体图标资源"><a href="#3-处理字体图标资源" class="headerlink" title="3. 处理字体图标资源"></a>3. 处理字体图标资源</h2><ul><li><ol><li><strong>下载字体图标文件</strong></li></ol><ul><li>打开<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></li><li><strong>选择想要的图标添加到购物车，统一下载到本地</strong></li></ul></li><li><ol start="2"><li><strong>添加字体图标资源</strong></li></ol><ul><li><strong>src&#x2F;fonts&#x2F;iconfont.ttf</strong></li><li><strong>src&#x2F;fonts&#x2F;iconfont.woff</strong></li><li><strong>src&#x2F;fonts&#x2F;iconfont.woff2</strong></li><li><strong>src&#x2F;css&#x2F;iconfont.css</strong><ul><li><strong>注意字体文件路径需要修改</strong></li></ul></li></ul></li><li><ol start="3"><li><strong>引入字体样式到<code>main.js</code>当中</strong></li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入js文件</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./js/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&#x27;./js/sum&#x27;</span></span><br><span class="line"><span class="comment">// 引入css资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// 引入less资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./less/index.less&#x27;</span></span><br><span class="line"><span class="comment">// 引入字体样式(切记是字体样式并非字体)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/iconfont.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">3</span> , <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li><strong>修改配置项</strong></li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;dist&quot;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">// js文件(入口文件)输出的文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;static/js/main.js&quot;</span>,<span class="comment">//所以我们这里改成js资源就输出到一个js文件夹当中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,<span class="comment">//(自动清空上次打包内容) 原理:在打包前,将path整个目录内容清空,在进行打包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                    <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                    <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                    <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                    <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;static/imgs/[hash:8][ext][query]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 4.处理字体资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                  <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">//开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>type: &quot;asset/resource&quot;</code>和<code>type: &quot;asset&quot;</code>的区别：</strong></p><ol><li><p><strong><code>type: &quot;asset/resource&quot;</code> 相当于<code>file-loader</code>, 将文件转化成 Webpack 能识别的资源，其他不做处理</strong></p></li><li><p><strong><code>type: &quot;asset&quot;</code> 相当于<code>url-loader</code>, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 <code>data URI </code>形式</strong></p></li></ol></li><li><ol start="5"><li><strong>修改html(<code>public/index.html</code>)</strong></li></ol></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello webpack!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- less样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用字体图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-aixin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-bianji&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-Dyanjing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-caidan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/static/js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/webpack/w1/9.png" alt="image"></p><h2 id="处理其他资源"><a href="#处理其他资源" class="headerlink" title="处理其他资源"></a>处理其他资源</h2><ul><li><p><strong>处理其他资源同样是通过<code>type: &quot;asset/resource&quot;</code>这个接口</strong></p></li><li><p><strong>比如我们要处理一些音频如<code>mp3</code>,<code>avi</code>等…只需要在该配置项的后面追加格式即可</strong></p></li></ul><h3 id="配置项当中webpack-config-js"><a href="#配置项当中webpack-config-js" class="headerlink" title="配置项当中webpack.config.js"></a>配置项当中<code>webpack.config.js</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.处理其他资源(字体,mp3,mp4,avi)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?|mp3|mp4|avi)$/</span>,<span class="comment">//在这后面追加所需要处理的资源格式即可</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,<span class="comment">//这里的是改成&quot;asset/resource&quot;</span></span><br><span class="line">    <span class="attr">generator</span>: &#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> 处理静态资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(3)-处理样式资源以及图片资源</title>
      <link href="/2022/09/26/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
      <url>/2022/09/26/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack学习学习笔记-3-处理样式资源以及图片资源"><a href="#webpack学习学习笔记-3-处理样式资源以及图片资源" class="headerlink" title="webpack学习学习笔记(3) - 处理样式资源以及图片资源"></a>webpack学习学习笔记(3) - 处理样式资源以及图片资源</h1><ul><li><p><strong><code>Webpack</code> 本身是不能识别样式资源的，所以我们需要借助 <code>Loader</code> 来帮助 <code>Webpack</code> 解析样式资源</strong></p></li><li><p><strong>我们找 <code>Loader</code> 都应该去官方文档中找到对应的 <code>Loader</code>，然后使用</strong></p></li><li><p><strong>官方文档找不到的话，可以从社区 <code>Github</code> 中搜索查询</strong></p></li><li><p><a href="https://webpack.docschina.org/loaders/">Webpack 官方 Loader 文档</a></p></li></ul><h2 id="处理-Css-资源"><a href="#处理-Css-资源" class="headerlink" title="处理 Css 资源"></a>处理 Css 资源</h2><ol><li><strong>下载包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i css-loader style-loader -D</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>注意：需要下载两个 loader(<code>css-loader</code> 和 <code>style-loader</code>)</strong></li></ul><ol start="2"><li><strong>功能介绍</strong></li></ol><ul><li><strong><code>css-loader</code></strong>: <strong>负责将 Css 文件编译成 Webpack 能识别的模块</strong></li><li><strong><code>style-loader</code></strong>: <strong>会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容</strong></li></ul><ol start="3"><li><strong>配置</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件(正则)</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">            <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">            <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>添加 Css 资源</strong></li></ol><ul><li><strong>src&#x2F;css&#x2F;index.css</strong></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellogreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>src&#x2F;main.js</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"><span class="comment">// 引入 Css 资源，Webpack才会对其打包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">3</span>, <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>public&#x2F;index.html</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Webpack5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备一个使用样式的 DOM 容器 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- css样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入打包后的js文件，才能看到效果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>运行指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/webpack/w1/4.png" alt="image"></p><h2 id="处理-Less-资源"><a href="#处理-Less-资源" class="headerlink" title="处理 Less 资源"></a>处理 Less 资源</h2><ol><li><strong>下载包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install less less-loader --save-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>功能介绍</strong></li></ol><ul><li><strong><code>less-loader</code>：负责将 Less 文件编译成 <code>Css </code>文件</strong></li></ul><ol start="3"><li><strong>配置</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;dist&quot;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">// 输出文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;main.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">//开发模式</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>添加 Less 资源</strong></li></ol><ul><li><strong>src&#x2F;less&#x2F;index.less</strong></li></ul><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    <span class="selector-class">.box3</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>src&#x2F;main.js</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入js文件</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./js/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&#x27;./js/sum&#x27;</span></span><br><span class="line"><span class="comment">// 引入css资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// 引入less资源</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./less/index.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">3</span> , <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure><ul><li><strong>public&#x2F;index.html</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello webpack!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- less样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>运行指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/webpack/w1/5.png" alt="image"></p><h1 id="处理-Sass-和-Scss-资源"><a href="#处理-Sass-和-Scss-资源" class="headerlink" title="处理 Sass 和 Scss 资源"></a>处理 Sass 和 Scss 资源</h1><ol><li><strong>下载包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i sass-loader sass -D</span><br></pre></td></tr></table></figure><p>  <strong>注意：需要下载两个</strong></p><ol start="2"><li><strong>功能介绍</strong></li></ol><ul><li><strong><code>sass-loader</code>：负责将 Sass 文件编译成 css 文件</strong></li><li><strong><code>sass</code>：<code>sass-loader</code> 依赖 <code>sass</code> 进行编译</strong></li></ul><ol start="3"><li><strong>配置</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>添加 Sass 资源</strong></li></ol><ul><li><strong>src&#x2F;sass&#x2F;index.sass</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 可以省略大括号和分号 */</span><br><span class="line">.box3</span><br><span class="line">  width: 100px</span><br><span class="line">  height: 100px</span><br><span class="line">  background-color: hotpink</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>src&#x2F;sass&#x2F;index.scss</strong></li></ul><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightpink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>src&#x2F;main.js</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"><span class="comment">// 引入资源，Webpack才会对其打包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./less/index.less&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sass/index.sass&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sass/index.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>public&#x2F;index.html</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Webpack5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>运行指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="处理-Styl-资源"><a href="#处理-Styl-资源" class="headerlink" title="处理 Styl 资源"></a>处理 Styl 资源</h2><ol><li><strong>下载包</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i stylus-loader -D</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>功能介绍</strong></li></ol><ul><li><code>stylus-loader</code>：负责将 Styl 文件编译成 Css 文件</li></ul><ol start="3"><li><strong>配置</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>添加 Styl 资源</strong></li></ol><ul><li><strong>src&#x2F;styl&#x2F;index.styl</strong></li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 可以省略大括号、分号、冒号 */</span></span><br><span class="line"><span class="selector-class">.box</span> </span><br><span class="line">  <span class="attribute">width</span> <span class="number">100px</span> </span><br><span class="line">  <span class="attribute">height</span> <span class="number">100px</span> </span><br><span class="line">  <span class="attribute">background-color</span> pink</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>src&#x2F;main.js</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"><span class="comment">// 引入资源，Webpack才会对其打包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./less/index.less&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sass/index.sass&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sass/index.scss&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styl/index.styl&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>public&#x2F;index.html</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Webpack5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备一个使用样式的 DOM 容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>运行指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h1><ul><li><p><strong>过去在 <code>Webpack4</code> 时，我们处理图片资源通过 <code>file-loader</code> 和 <code>url-loader</code> 进行处理</strong></p></li><li><p><strong>现在 <code>Webpack5 </code>已经将两个 <code>Loader</code> 功能内置到 <code>Webpack</code> 里了，我们只需要简单配置即可处理图片资源</strong></p></li></ul><ol><li><strong>配置</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;dist&quot;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">// 输出文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;main.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">            <span class="comment">// 1.处理css资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//将js中css通过创建style标签添加html文件当中生效</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span><span class="comment">//将css资源编译成common.js的模块到js当中</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.处理less资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// loader:xxx =&gt; 自能使用一个loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span><span class="comment">//将less编译成css文件</span></span><br><span class="line">                ], <span class="comment">// use能够使用多个loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 3.处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,<span class="comment">//正则判断图片后缀</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                <span class="attr">parser</span>:&#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>:&#123;</span><br><span class="line">                        <span class="comment">// 将小于10kb的图片转化为base64</span></span><br><span class="line">                        <span class="comment">// 优点:减小请求数量  缺点:原图片的体积会变大(故大体积突变不会使用这种方法)</span></span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span>*<span class="number">1024</span><span class="comment">//10kb(大体积图片不会使用这种方法)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">//开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>添加图片资源</strong></li></ol><ul><li><strong>src&#x2F;images&#x2F;1.jpeg</strong></li><li><strong>src&#x2F;images&#x2F;2.png</strong></li><li><strong>src&#x2F;images&#x2F;3.gif</strong></li></ul><ol start="3"><li><strong>使用图片资源</strong></li></ol><ul><li><strong>src&#x2F;less&#x2F;index.less</strong></li></ul><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">// background-color: aqua;</span></span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&#x27;../img/2.png&#x27;</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="selector-class">.box3</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="comment">// background-color: blueviolet;</span></span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">&#x27;../img/3.gif&#x27;</span>);</span><br><span class="line">        <span class="attribute">background-size</span>: cover;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>src&#x2F;css&#x2F;index.css</strong></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../img/1.jpeg&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>运行指令</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/webpack/w1/7.png" alt="image"></p><ul><li><strong>此时输出的图片文件就只有两张，有一张图片以 data URI 形式内置到 js 中了 （注意：需要将上次打包生成的文件清空，再重新打包才有效果）</strong><br><img src="/../upload/webpack/w1/6.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> 处理静态资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(2)-webpack的基本配置</title>
      <link href="/2022/09/26/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2022/09/26/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack学习学习笔记-2-webpack的基本配置"><a href="#webpack学习学习笔记-2-webpack的基本配置" class="headerlink" title="webpack学习学习笔记(2) - webpack的基本配置"></a>webpack学习学习笔记(2) - webpack的基本配置</h1><h2 id="5-大核心概念"><a href="#5-大核心概念" class="headerlink" title="5 大核心概念"></a>5 大核心概念</h2><ol><li><p><strong><code>entry</code>（入口）</strong></p><ul><li><strong>指示 <code>Webpack</code> 从哪个文件开始打包</strong></li></ul></li><li><p><strong><code>output</code>（输出）</strong></p><ul><li><strong>指示 Webpack 打包完的文件输出到哪里去，如何命名等</strong></li></ul></li><li><p><strong><code>loader</code>（加载器）</strong></p><ul><li><strong><code>webpack</code> 本身只能处理 <code>js、json</code> 等资源，其他资源需要借助 <code>loader</code>，<code>Webpack</code> 才能解析</strong></li></ul></li><li><p><strong><code>plugins</code>（插件）</strong></p><ul><li><strong>扩展 <code>Webpack</code> 的功能</strong></li></ul></li><li><p><strong><code>mode</code>（模式）</strong></p></li></ol><p><strong>主要由两种模式：</strong></p><ul><li><strong>开发模式：<code>development</code></strong></li><li><strong>生产模式：<code>production</code></strong></li></ul><h2 id="准备webpack配置文件"><a href="#准备webpack配置文件" class="headerlink" title="准备webpack配置文件"></a>准备<code>webpack</code>配置文件</h2><ul><li><strong>在项目根目录下新建文件：<code>webpack.config.js</code></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 加载器</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><strong><code>Webpack</code> 是基于 <code>Node.js</code> 运行的，所以采用 <code>Common.js </code>模块化规范</strong></li></ul><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><ol><li><strong>配置文件</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用的是commonjs 的语法格式[node.js]</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="comment">//node.js中的核心模块,专门用于处理路径问题</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,<span class="comment">//相对路径</span></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 文件的输出目录,必须是绝对路径</span></span><br><span class="line">        <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">        <span class="comment">// __dirname为node.js中的变量,代表当前文件的文件夹名(就是这个文件夹的webpack_code)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname , <span class="string">&quot;dist&quot;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">// 输出文件名(打包后在输出路径当中生成的文件夹名)</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;main.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">// loder的配置</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// plugin的配置</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">//开发模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><strong>运行指令</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>此时功能和之前一样，也不能处理样式资源,后面<code>Webpack</code> 将来都通过 <code>webpack.config.js</code> 文件进行配置，来增强 Webpack 的功能</strong></li></ul><h1 id="开发模式介绍"><a href="#开发模式介绍" class="headerlink" title="开发模式介绍"></a>开发模式介绍</h1><ul><li><p><strong>开发模式顾名思义就是我们开发代码时使用的模式。</strong></p></li><li><p><strong>这个模式下我们主要做两件事：</strong></p><ul><li><strong>编译代码，使浏览器能识别运行</strong></li></ul></li><li><p><strong>开发时我们有样式资源、字体图标、图片资源、html 资源等，<code>webpack</code> 默认都不能处理这些资源，所以我们要加载配置来编译这些资源</strong></p><ul><li><strong>代码质量检查，树立代码规范</strong></li></ul></li><li><p><strong>提前检查代码的一些隐患，让代码运行时能更加健壮。</strong></p></li><li><p><strong>提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
            <tag> 开发模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记(1)-webpack的介绍及基本使用</title>
      <link href="/2022/09/26/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
      <url>/2022/09/26/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack学习笔记-1-webpack的介绍及基本使用"><a href="#webpack学习笔记-1-webpack的介绍及基本使用" class="headerlink" title="webpack学习笔记(1)-webpack的介绍及基本使用"></a>webpack学习笔记(1)-webpack的介绍及基本使用</h1><h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack?"></a>什么是<code>webpack</code>?</h2><ul><li><strong><code>webpack </code>是一种前端资源构建工具，一个静态模块打包器(<code>module bundler</code>)。 在 <code>webpack</code> 看来, 前端的所有资源文件(<code>js</code>&#x2F;<code>json</code>&#x2F;<code>css</code>&#x2F;<code>img</code>&#x2F;<code>less</code>&#x2F;…)都会作为模块处理。 它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源。<code>chunk</code> 代码块，<code>bundle</code>静态资源。</strong></li></ul><h2 id="为什么需要webpack"><a href="#为什么需要webpack" class="headerlink" title="为什么需要webpack?"></a>为什么需要<code>webpack</code>?</h2><ul><li><p><strong>开发时，我们会使用框架（<code>React、Vue</code>），<code>ES6</code> 模块化语法，<code>Less/Sass</code> 等 <code>css</code> 预处理器等语法进行开发。</strong></p></li><li><p><strong>这样的代码要想在浏览器运行必须经过编译成浏览器能识别的<code> JS</code>、<code>Css </code>等语法，才能运行。</strong></p></li><li><p><strong>所以我们需要打包工具帮我们做完这些事。</strong></p></li><li><p><strong>除此之外，打包工具还能压缩代码、做兼容性处理、提升代码性能等。</strong></p></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong><code>Webpack</code>是一个前端打包工具，前端代码为什么要打包呢？因为单页应用程序中用到很多素材，如果每一个素材都通过在<code>HTML</code>中以<code>src</code>属性或者<code>link</code>来引入，那么请求一个页面的时候，可能浏览器就要发起十多次请求，往往请求的这些资源都是一些脚本代码或者很小的图片，这些资源本身才几k，下载连1秒都不需要，但是由于<code>HTTP</code>是应用层协议，它的下层是<code>TCP</code>这个运输层协议，<code>TCP</code>的握手和挥手过程消耗的时间可能比下载资源本身还要长，所以需要把这些小文件全部打包成一个文件，这样只要一次<code>TCP</code>握手和挥手的过程，就把多个资源给下载下来了，并且多个资源由于都是共享一个<code>HTTP</code>请求，所以<code>head</code>等部分也是共享的，相当于形成了规模效应，让网页展现更快，用户体验更好。</strong></li></ul><h3 id="除去webpack外有哪些打包工具？"><a href="#除去webpack外有哪些打包工具？" class="headerlink" title="除去webpack外有哪些打包工具？"></a>除去<code>webpack</code>外有哪些打包工具？</h3><ul><li><strong><code>Grunt</code></strong></li><li><strong><code>Gulp</code></strong></li><li><strong><code>Rollup</code></strong></li><li><strong><code>Vite</code></strong></li><li><strong><code>Parcel</code></strong></li><li>……..</li></ul><h4 id="目前市面上最流量的是-Webpack，所以我们主要以-Webpack-来介绍使用打包工具"><a href="#目前市面上最流量的是-Webpack，所以我们主要以-Webpack-来介绍使用打包工具" class="headerlink" title="目前市面上最流量的是 Webpack，所以我们主要以 Webpack 来介绍使用打包工具"></a>目前市面上最流量的是 <code>Webpack</code>，所以我们主要以 <code>Webpack</code> 来介绍使用打包工具</h4><h2 id="webpack的基本使用"><a href="#webpack的基本使用" class="headerlink" title="webpack的基本使用"></a><code>webpack</code>的基本使用</h2><ul><li><p><strong><code>Webpack</code> 是一个静态资源打包工具。</strong></p></li><li><p><strong>它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。</strong></p></li><li><p><strong>输出的文件就是编译好的文件，就可以在浏览器段运行了。</strong></p></li><li><p><strong>我们将 <code>Webpack</code> 输出的文件叫做 <code>bundle</code>。</strong></p></li></ul><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍:"></a>功能介绍:</h2><ul><li><p><strong><code>Webpack</code> 本身功能是有限的:</strong></p></li><li><p><strong>开发模式：仅能编译 <code>JS</code> 中的 <code>ES Module</code> 语法</strong></p></li><li><p><strong>生产模式：能编译 <code>JS</code> 中的 <code>ES Module</code> 语法，还能压缩 <code>JS</code> 代码</strong></p></li></ul><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用:"></a>开始使用:</h3><ol><li><strong>资源目录</strong><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">webpack<span class="emphasis">_code # 项目根目录（所有指令必须在这个目录运行）</span></span><br><span class="line"><span class="emphasis">    └── src # 项目源码目录</span></span><br><span class="line"><span class="emphasis">        ├── js # js文件目录</span></span><br><span class="line"><span class="emphasis">        │   ├── count.js</span></span><br><span class="line"><span class="emphasis">        │   └── sum.js</span></span><br><span class="line"><span class="emphasis">        └── main.js # 项目主文件</span></span><br></pre></td></tr></table></figure></li><li><strong>创建文件</strong></li></ol><ul><li><strong>count.js</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 减法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>sum.js</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es6语法 计算总和</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>main.js</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>下载依赖(打开终端，来到项目根目录。运行以下指令：)</strong></li></ol><ul><li><strong>初始化<code>package.json</code></strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><strong>此时会生成一个基础的 <code>package.json</code> 文件。</strong></li></ul><ol start="4"><li><strong>启用 <code>Webpack</code></strong></li></ol><ul><li><strong>开发模式</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack ./src/main.js --mode=development</span><br></pre></td></tr></table></figure></li><li><strong>生产模式(对代码进行压缩)</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack ./src/main.js --mode=production</span><br></pre></td></tr></table></figure><strong><code>npx webpack</code>: 是用来运行本地安装 <code>Webpack</code> 包的。</strong></li></ul><p><strong><code>./src/main.js</code>: 指定 <code>Webpack</code> 从 <code>main.js</code> 文件开始打包，不但会打包 <code>main.js</code>，还会将其依赖也一起打包进来。</strong></p><p><strong><code>--mode=xxx</code>：指定模式（环境）。</strong></p><h4 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h4><p><img src="/../upload/webpack/w1/2.png" alt="image"><br><img src="/../upload/webpack/w1/3.png" alt="image"></p><ol start="5"><li><strong>观察输出文件</strong></li></ol><ul><li><strong>默认 <code>Webpack</code> 会将文件打包输出到 <code>dist</code> 目录下，我们查看 <code>dist</code> 目录下文件情况就好了</strong><br><img src="/../upload/webpack/w1/1.png" alt="image"></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><strong><code>Webpack</code> 本身功能比较少，只能处理 <code>js</code> 资源，一旦遇到 <code>css</code> 等其他资源就会报错。所以我们学习 <code>Webpack</code>，就是主要学习如何处理其他资源。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack5 </tag>
            
            <tag> 打包工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2后台管理系统实现难点(3)</title>
      <link href="/2022/09/21/Vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E9%9A%BE%E7%82%B93/"/>
      <url>/2022/09/21/Vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E9%9A%BE%E7%82%B93/</url>
      
        <content type="html"><![CDATA[<h2 id="Mock的后端数据模拟-首页的数据"><a href="#Mock的后端数据模拟-首页的数据" class="headerlink" title="Mock的后端数据模拟:(首页的数据)"></a><code>Mock</code>的后端数据模拟:(首页的数据)</h2><ul><li><strong><code>mockData</code>中的<code>home.js</code></strong></li></ul><h2 id="Mock用户列表数据的生成以及增删改查："><a href="#Mock用户列表数据的生成以及增删改查：" class="headerlink" title="Mock用户列表数据的生成以及增删改查："></a>Mock用户列表数据的生成以及增删改查：</h2><ol><li><p><strong>用户列表的获取以及搜索功能的实现(重点) &#x3D;&gt; <code>getUserList()</code>和<code>param2Obj()</code></strong></p></li><li><p><strong>用户的添加功能的实现 &#x3D;&gt; <code>createUser()</code></strong></p></li><li><p><strong>用户的编辑功能的实现 &#x3D;&gt; <code>updateUser()</code></strong></p></li><li><p><strong>用户的删除功能的实现 &#x3D;&gt; <code>deleteUser()</code></strong></p></li></ol><h3 id="这里重点解释一下用户列表获取以及搜索功能之间的切换判断"><a href="#这里重点解释一下用户列表获取以及搜索功能之间的切换判断" class="headerlink" title="这里重点解释一下用户列表获取以及搜索功能之间的切换判断:"></a>这里重点解释一下用户列表获取以及搜索功能之间的切换判断:</h3><ul><li><strong>看到源码我们就知道了,用户列表的获取和搜索功能都是通过一个函数来返回<code>mock</code>模拟的数据的,这个函数就是<code>getUserList()</code>,那究竟这个过程是怎样实现的呢?</strong></li><li><strong>我们在上一篇博客介绍到,用户的获取和搜索都是绑定的一个函数,那就是<code>getList(name = &#39;&#39;)</code>,这个函数我们可以看到,里面接收一个<code>name</code>属性,这个属性就是我们在搜索框输入的内容,通过<code>v-model</code>的方式将我们在搜索框里输入的内容双向的绑定到<code>getList()</code>当中,随后通过这个函数变成<code>params</code>拼接到请求<code>url</code>中。</strong></li><li><strong>通过这个请求的<code>url</code>来到<code>Mock</code>接口配置当中,通过请求的<code>url</code>对接对应的<code>api</code> &#x3D;&#x3D;&#x3D;&gt; <code>getUserList()</code>,最后在<code>getUserList()</code>函数当中通过进行数据的判断是否存在<code>name</code>参数来决定是获取全的用户数据列表还是搜索功能(用到<code>decodeURIComponent()</code>对<code>url</code>进行参数的解构成对象和中文乱码的解码)</strong></li></ul><h3 id="完整的user-js代码"><a href="#完整的user-js代码" class="headerlink" title="完整的user.js代码:"></a>完整的<code>user.js</code>代码:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求从config.url获取参数，post从config.body中获取参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">param2Obj</span> (url) &#123;</span><br><span class="line">  <span class="keyword">const</span> search = url.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]<span class="comment">//判断是否带有name参数</span></span><br><span class="line">  <span class="keyword">if</span> (!search) &#123;<span class="comment">//不存在name参数或者name参数为空,返回一个空数组</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(</span><br><span class="line">    <span class="string">&#x27;&#123;&quot;&#x27;</span> +</span><br><span class="line">    <span class="comment">// 这里将url中的参数解析成一个对象,方便后面表单验证(解析出url中的name等参数)</span></span><br><span class="line">    <span class="built_in">decodeURIComponent</span>(search)<span class="comment">//解码url,防止中文乱码</span></span><br><span class="line">      <span class="comment">// 正则表达式 </span></span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)<span class="comment">//g为全局标志,使用.replace将url中的&quot;替换成\\(相当于一个反斜杠)</span></span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&quot;,&quot;&#x27;</span>)<span class="comment">//g为全局标志,使用.replace将url中的&amp;替换成,</span></span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&#x27;&quot;:&quot;&#x27;</span>) +<span class="comment">//g为全局标志,使用.replace将url中的=替换成:</span></span><br><span class="line">    <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">List</span> = []</span><br><span class="line"><span class="keyword">const</span> count = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用mock随机生成人员数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">  <span class="title class_">List</span>.<span class="title function_">push</span>(</span><br><span class="line">    <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="title class_">Mock</span>.<span class="property">Random</span>.<span class="title function_">guid</span>(),</span><br><span class="line">      <span class="attr">name</span>: <span class="title class_">Mock</span>.<span class="property">Random</span>.<span class="title function_">cname</span>(),</span><br><span class="line">      <span class="attr">addr</span>: <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;@county(true)&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;age|18-60&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">birth</span>: <span class="title class_">Mock</span>.<span class="property">Random</span>.<span class="title function_">date</span>(),</span><br><span class="line">      <span class="attr">sex</span>: <span class="title class_">Mock</span>.<span class="property">Random</span>.<span class="title function_">integer</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取列表</span></span><br><span class="line"><span class="comment">   * 要带参数 name, page, limt; name可以不填, page,limit有默认值。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> name, page, limit</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">&#123;code: number, count: number, data: *[]</span>&#125;&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 生成当前页面的用户数据(重新获取以及搜索过滤)</span></span><br><span class="line">  <span class="attr">getUserList</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, page = <span class="number">1</span>, limit = <span class="number">20</span> &#125; = <span class="title function_">param2Obj</span>(config.<span class="property">url</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name:&#x27;</span> + name, <span class="string">&#x27;page:&#x27;</span> + page, <span class="string">&#x27;分页大小limit:&#x27;</span> + limit)</span><br><span class="line">    <span class="keyword">const</span> mockList = <span class="title class_">List</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 判断url中是否存在name参数以及返回对象的字段当中是否存在你输入的内容(判断是否是搜索功能)</span></span><br><span class="line">      <span class="keyword">if</span> (name &amp;&amp; user.<span class="property">name</span>.<span class="title function_">indexOf</span>(name) === -<span class="number">1</span> &amp;&amp; user.<span class="property">addr</span>.<span class="title function_">indexOf</span>(name) === -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span><span class="comment">//不存在name属性,终止表单提交,返回原mockList</span></span><br><span class="line">      <span class="comment">//存在name属性,返回经过处理的mockList(相当于[filter:name &amp;&amp; user.name.indexOf(name) === -1 &amp;&amp; user.addr.indexOf(name) === -1])</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 这里的pageList接收处理过后的mockList(获取新的用户列表还是搜索功能)</span></span><br><span class="line">    <span class="keyword">const</span> pageList = mockList.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> index &lt; limit * page &amp;&amp; index &gt;= limit * (page - <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">      <span class="attr">count</span>: mockList.<span class="property">length</span>,</span><br><span class="line">      <span class="attr">list</span>: pageList</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 增加用户</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> name, addr, age, birth, sex</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">&#123;code: number, data: &#123;message: string</span>&#125;&#125;&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">createUser</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;<span class="comment">//将从user组件接收过来的opertateForm展开,并重新赋值生成一个新的表单返回</span></span><br><span class="line">    <span class="comment">//从form表单中获取你写进去的数据(姓名,年龄等.....)</span></span><br><span class="line">    <span class="keyword">const</span> &#123; name, addr, age, birth, sex &#125; = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(config.<span class="property">body</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(config.<span class="property">body</span>))</span><br><span class="line">    <span class="title class_">List</span>.<span class="title function_">unshift</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="title class_">Mock</span>.<span class="property">Random</span>.<span class="title function_">guid</span>(),<span class="comment">//随机生成一个id</span></span><br><span class="line">      <span class="attr">name</span>: name,</span><br><span class="line">      <span class="attr">addr</span>: addr,</span><br><span class="line">      <span class="attr">age</span>: age,</span><br><span class="line">      <span class="attr">birth</span>: birth,</span><br><span class="line">      <span class="attr">sex</span>: sex</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;添加成功&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除用户</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">id</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">deleteUser</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = <span class="title function_">param2Obj</span>(config.<span class="property">url</span>)<span class="comment">//接收url上的id对指定用户进行删除</span></span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: -<span class="number">999</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;参数不正确&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">List</span> = <span class="title class_">List</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> !== id)</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;删除成功&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 修改用户</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id, name, addr, age, birth, sex</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">&#123;code: number, data: &#123;message: string</span>&#125;&#125;&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">updateUser</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;<span class="comment">//将从user组件接收过来的opertateForm展开,并重新赋值生成一个新的表单返回</span></span><br><span class="line">    <span class="keyword">const</span> &#123; id, name, addr, age, birth, sex &#125; = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(config.<span class="property">body</span>)</span><br><span class="line">    <span class="keyword">const</span> sex_num = <span class="built_in">parseInt</span>(sex)</span><br><span class="line">    <span class="title class_">List</span>.<span class="title function_">some</span>(<span class="function"><span class="params">u</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (u.<span class="property">id</span> === id) &#123;<span class="comment">//id不改因为是同一个用户只是修改了属性</span></span><br><span class="line">        u.<span class="property">name</span> = name</span><br><span class="line">        u.<span class="property">addr</span> = addr</span><br><span class="line">        u.<span class="property">age</span> = age</span><br><span class="line">        u.<span class="property">birth</span> = birth</span><br><span class="line">        u.<span class="property">sex</span> = sex_num</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;编辑成功&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击搜索功能控制台的输出"><a href="#点击搜索功能控制台的输出" class="headerlink" title="点击搜索功能控制台的输出"></a>点击搜索功能控制台的输出</h3><p><img src="/../upload/Vue2m/10.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 后台管理系统 </tag>
            
            <tag> mock </tag>
            
            <tag> mock数据的增删改查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2后台管理系统实现难点(2)</title>
      <link href="/2022/09/21/Vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E9%9A%BE%E7%82%B92/"/>
      <url>/2022/09/21/Vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E9%9A%BE%E7%82%B92/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2后台管理系统实现难点-2-："><a href="#Vue2后台管理系统实现难点-2-：" class="headerlink" title="Vue2后台管理系统实现难点(2)："></a>Vue2后台管理系统实现难点(2)：</h1><h2 id="ElementUi组件库的编辑新增框Form组件的封装和table组件的封装"><a href="#ElementUi组件库的编辑新增框Form组件的封装和table组件的封装" class="headerlink" title="ElementUi组件库的编辑新增框Form组件的封装和table组件的封装:"></a><code>ElementUi</code>组件库的编辑新增框<code>Form</code>组件的封装和<code>table</code>组件的封装:</h2><h3 id="1-form表单组件的封装"><a href="#1-form表单组件的封装" class="headerlink" title="1. form表单组件的封装:"></a><strong>1. <code>form</code>表单组件的封装:</strong></h3><p><img src="/../upload/Vue2m/6.png" alt="image"></p><ol><li><strong>首先通过<code>elementUi</code>组件库进行页面结构的搭建,(因为组件的复用(编辑弹出框和搜索框),所以封装一个<code>commonForm</code>组件), 其中值得我们注意的就是里面的<code>model</code>属性,这与下面<code>table</code>表格中的<code>prop</code>属性是差不多的,都是用于表单验证,指定表单的使用数据的!</strong></li></ol><h3 id="commonForm组件-子组件-的封装代码如下"><a href="#commonForm组件-子组件-的封装代码如下" class="headerlink" title="commonForm组件(子组件)的封装代码如下:"></a><code>commonForm</code>组件(子组件)的封装代码如下:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 弹出框表单组件(点击添加,修改弹出的弹框) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:inline</span>=<span class="string">&quot;inline&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历标题生成对应个数的表单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in formLabel&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.label&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输入组件(item.model与table中的prop差不多,都是用于指定表单使用的数据的进行表单验证的) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">&quot;item.type === &#x27;input&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:placeholder</span>=<span class="string">&quot;&#x27;请输入&#x27;+item.label&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;form[item.model]&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 选择组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-if</span>=<span class="string">&quot;item.type === &#x27;switch&#x27;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form[item.model]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日期组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">&quot;item.type === &#x27;date&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value-format</span> = <span class="string">&quot;yyyy-MM-dd&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span> = <span class="string">&quot;选择日期&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;form[item.model]&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 下拉组件(性别) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;item.type === &#x27;select&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span> = <span class="string">&quot;请选择&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;form[item.model]&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">&quot;item in item.opts&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;commonForm&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 接收父组件的数据进行展示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单标题,接收父组件传过来的,用于遍历生成表单</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">formLabel</span>:<span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单填入的数据,双向绑定</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">form</span>:<span class="title class_">Object</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 单行显示</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">inline</span>:<span class="title class_">Boolean</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-table组件的封装"><a href="#2-table组件的封装" class="headerlink" title="2. table组件的封装"></a><strong>2. <code>table</code>组件的封装</strong></h3><ol><li><p><strong>我们获取的用户数据是分页式的,一页20条用户数据,10页共两百条数据,因此要想在user组件当中通过用户数据(个数)的获取来遍历生成table表格最好还是通过组件的封装来实现。首先通过<code>elementUi</code>组件库封装一个<code>commonTable</code>组件,然后再<code>user.vue</code>中调用遍历生成分页式的用户<code>table</code>表格数据</strong></p></li><li><p><strong>这个<code>commonTable</code>组件里面的结构包含两大列,第一大列又分成5小列是用来显示用户的数据(姓名,年龄,性别,出生日期和地址),第二大列用于显示操作按钮(编辑和删除按钮)</strong><br><img src="/../upload/Vue2m/7.png" alt="image"></p></li><li><p><strong>其中最难实现的便是<code>table</code>中的数据渲染,这里采取<code>elementUi</code>中<code>table</code>表格里面的<code>prop</code>属性,这个属性的作用是:当<code>el-table</code>元素中注入<code>data(就是这里的tableData)</code>对象数组后，在<code>el-table-column</code>中用<code>prop</code>属性来对应对象中的键名即可填入数据,简单点说,prop属性就是指向你给<code>table</code>组件中传入的数据中的数组对象里面的某一个指定键名的属性里面属性值!(<code>相当于指定table要用的数据</code>)</strong></p><ul><li><strong><code>elementUi</code>中table表格数据的渲染流程</strong><br><img src="/../upload/Vue2m/8.png" alt="image"></li><li><strong>数据的转换实现流程(项目当中)</strong><br><img src="/../upload/Vue2m/9.png" alt="image"></li></ul></li></ol><h3 id="commonTable组件-子组件-的封装代码如下"><a href="#commonTable组件-子组件-的封装代码如下" class="headerlink" title="commonTable组件(子组件)的封装代码如下:"></a><code>commonTable</code>组件(子组件)的封装代码如下:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里是遍历生成一条(行)的数据模板组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;common-table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">height</span>=<span class="string">&quot;470px&quot;</span> <span class="attr">stripe</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- show-overflow-tooltip超长使用tooltip显示 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">show-overflow-tooltip</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-for</span>=<span class="string">&quot;item in tableLabel&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:key</span>=<span class="string">&quot;item.prop&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:width</span>=<span class="string">&quot;item.width ? item.width : 125&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 通过slot-scope=&quot;scope&quot;获取当前行的数据并显示 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 对象的属性读取方式:scope.row[item.prop] --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 根据elementUI中的，当el-table元素中注入data对象数组后，</span></span><br><span class="line"><span class="comment">                        在el-table-column中用prop属性来对应对象中的键名即可填入数据， --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 这里通过prop属性来指定对应的键名数据(tableData中)填入,如:name,age.... --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:10px&quot;</span>&gt;</span>&#123;&#123;scope.row[item.prop]&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 通过slot-scope=&quot;scope&quot;获取当前行的数据并通过handleEdit()发送给User中的index[父组件] --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleEdit(scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;pager&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;prev,pager,next&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:total</span>=<span class="string">&quot;config.total&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:current-page.sync</span>=<span class="string">&quot;config.page&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">&quot;changePage&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:page-size</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;commonTable&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用props来接收父组件(user.vue)传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tableData</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tableLabel</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">config</span>: <span class="title class_">Object</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,  </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 编辑</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleEdit</span>(<span class="params">row</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 向父组件抛出数据(事件总线)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 将当前行的数据发送给User中的index[父组件]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&#x27;edit&#x27;</span>, row)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 删除</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleDelete</span>(<span class="params">row</span>)&#123;<span class="comment">//(事件总线)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&#x27;del&#x27;</span>, row)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 分页器跳转函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changePage</span>(<span class="params">page</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&#x27;changePage&#x27;</span>, page)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="user组件-父组件-中调用上面两个组件代码"><a href="#user组件-父组件-中调用上面两个组件代码" class="headerlink" title="user组件(父组件)中调用上面两个组件代码:"></a><code>user</code>组件(父组件)中调用上面两个组件代码:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;manage&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用弹框组件包裹着form表单组件控制它的显示和隐藏 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dialog</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:title</span>=<span class="string">&quot;operateType === &#x27;add&#x27; ? &#x27;新增用户&#x27; : &#x27;更新用户&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:visible.sync</span>=<span class="string">&quot;isShow&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里的opertateForm和opertateFormLabel使用的都是双向数据绑定=&gt;弹框变,页面变</span></span><br><span class="line"><span class="comment">                将formLabel和form传过去给子组件进行数据的处理</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">common-form</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:formLabel</span>=<span class="string">&quot;opertateFormLabel&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:form</span>=<span class="string">&quot;opertateForm&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">common-form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;confirm&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;manage-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addUser&quot;</span>&gt;</span>+ 新增<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- form表单的复用(搜索框表单) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">common-form</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:formLabel</span>=<span class="string">&quot;formLabel&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:form</span>=<span class="string">&quot;searchForm&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 搜索获取关键字(searchForm表单中的keyword) --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getList(searchForm.keyword)&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">common-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">common-table</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">:tableData</span>=<span class="string">&quot;tableData&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:tableLabel</span>=<span class="string">&quot;tableLabel&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:config</span>=<span class="string">&quot;config&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">changePage</span>=<span class="string">&quot;getList()&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">edit</span>=<span class="string">&quot;editUser&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">del</span>=<span class="string">&quot;delUser&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">common-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 引入Form组件 Table组件 api-&gt;getUser(获取mock中的用户数据)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> commonForm <span class="keyword">from</span> <span class="string">&#x27;../../components/commonForm.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> commonTable <span class="keyword">from</span> <span class="string">&#x27;@/components/commonTable.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;getUser&#125; <span class="keyword">from</span> <span class="string">&#x27;../../../api/data&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;User&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;commonForm,commonTable&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">operateType</span>:<span class="string">&#x27;add&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isShow</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// form弹框设置的信息</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">opertateFormLabel</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">model</span>: <span class="string">&#x27;name&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>: <span class="string">&#x27;姓名&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">model</span>: <span class="string">&#x27;age&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>: <span class="string">&#x27;年龄&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">model</span>: <span class="string">&#x27;sex&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>: <span class="string">&#x27;性别&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>: <span class="string">&#x27;select&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">opts</span>: [</span></span><br><span class="line"><span class="language-javascript">                            &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="attr">label</span>: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                                <span class="attr">value</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                            &#125;,</span></span><br><span class="line"><span class="language-javascript">                            &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="attr">label</span>: <span class="string">&#x27;女&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                                <span class="attr">value</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        ]</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">model</span>: <span class="string">&#x27;birth&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>: <span class="string">&#x27;出生日期&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>: <span class="string">&#x27;date&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">model</span>: <span class="string">&#x27;addr&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>: <span class="string">&#x27;地址&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// form弹框输入信息</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">opertateForm</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">addr</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">birth</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sex</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// form搜索框设置的信息(搜索框的类型)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">formLabel</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">model</span>:<span class="string">&quot;keyword&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>:<span class="string">&#x27;input&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// form搜索框输入的信息(搜索关键字)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">searchForm</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">keyword</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 用户的table显示数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tableData</span>:[],</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 用户的table显示数据标题</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tableLabel</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">prop</span>:<span class="string">&quot;name&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>:<span class="string">&quot;姓名&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">prop</span>:<span class="string">&quot;age&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>:<span class="string">&quot;年龄&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">prop</span>:<span class="string">&quot;sexLabel&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>:<span class="string">&quot;性别&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">prop</span>:<span class="string">&quot;birth&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>:<span class="string">&quot;出生日期&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">width</span>:<span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">prop</span>:<span class="string">&quot;addr&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">label</span>:<span class="string">&quot;地址&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">width</span>:<span class="number">320</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">config</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">page</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">total</span>:<span class="number">30</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">confirm</span>(<span class="params"></span>)&#123;<span class="comment">//点击form弹框的确认按钮时首先判断是修改还是新增类型</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 点击更新用户</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">operateType</span> === <span class="string">&#x27;edit&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 编辑用户,将表单内的数据发送给mock(调用编辑接口 =&gt; updateUser接口)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/user/edit&#x27;</span>,<span class="variable language_">this</span>.<span class="property">opertateForm</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 关闭form弹框</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 点击添加用户(调用新增接口 =&gt; createUser接口)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>,<span class="variable language_">this</span>.<span class="property">opertateForm</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 关闭form弹框</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addUser</span>(<span class="params"></span>)&#123;<span class="comment">//添加用户,form弹框表单的输入信息全部清空</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 显示form弹框</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 设置标识为add</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">operateType</span> = <span class="string">&#x27;add&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// form弹框数据初始化(添加就是清空表单里面的所有内容,让你输入)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">opertateForm</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">addr</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">birth</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sex</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 编辑用户</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">editUser</span>(<span class="params">row</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">operateType</span> = <span class="string">&#x27;edit&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 编辑就是表单里面显示的内容就是你点击的那一行里面的数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">opertateForm</span> = row</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 删除用户</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">delUser</span>(<span class="params">row</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$confirm(<span class="string">&quot;此操作将永久删除该组件,是否继续?&quot;</span>,<span class="string">&quot;提示&quot;</span> , &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">confirmButtonText</span>: <span class="string">&quot;确认&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> id = row.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;/user/del&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 将该用户的id通过params参数拼接打乒url上发送给mock处理</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">params</span>:&#123;id&#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.$message(&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">type</span>:<span class="string">&#x27;success&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">message</span>:<span class="string">&#x27;删除成功!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        &#125;)</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取用户列表</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getList</span>(<span class="params">name = <span class="string">&#x27;&#x27;</span></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">loading</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                name ? (<span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">page</span> = <span class="number">1</span>) : <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">getUser</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">page</span>: <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">page</span>,</span></span><br><span class="line"><span class="language-javascript">                    name</span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;data:res&#125;</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取到的用户数据&#x27;</span>,res);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">list</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 因为性别的判别是返回的0和1,即女和男,故这里做一个判断赋值</span></span></span><br><span class="line"><span class="language-javascript">                        item.<span class="property">sexLabel</span> = item.<span class="property">sexLabel</span> === <span class="number">0</span> ? <span class="string">&quot;女&quot;</span> : <span class="string">&quot;男&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> item</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">total</span> = res.<span class="property">count</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页面第一次创建首先获取用户数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="用户数据的增删改查请查看下一篇博客"><a href="#用户数据的增删改查请查看下一篇博客" class="headerlink" title="用户数据的增删改查请查看下一篇博客!"></a>用户数据的增删改查请查看下一篇博客!</h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 后台管理系统 </tag>
            
            <tag> elementUi组件库 </tag>
            
            <tag> table组件封装 </tag>
            
            <tag> form组件封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2后台管理系统实现难点(1)</title>
      <link href="/2022/09/21/Vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E9%9A%BE%E7%82%B91/"/>
      <url>/2022/09/21/Vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E9%9A%BE%E7%82%B91/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2后台管理系统实现难点-1-："><a href="#Vue2后台管理系统实现难点-1-：" class="headerlink" title="Vue2后台管理系统实现难点(1)："></a>Vue2后台管理系统实现难点(1)：</h1><ul><li><strong><a href="https://element.eleme.cn/#/zh-CN">ElementUi组件库官网</a></strong></li></ul><h2 id="1-mock中的token登录实现："><a href="#1-mock中的token登录实现：" class="headerlink" title="1.mock中的token登录实现："></a>1.<code>mock中</code>的<code>token</code>登录实现：</h2><ul><li><p><strong>首先在<code>mock</code>中的登录js文件中设置一个方法(<code>getMenu</code>)用于校验登录信息,该方法能接收一个参数(<code>config</code>),一般是登陆组件那边传过来的<code>form</code>表单,然后调用<code>getMenu</code>方法,将接收过来的<code>from</code>表单解析成<code>json</code>格式的对象进行校验.校验成功返回需要的数据(<code>menu</code>菜单等…..)</strong></p><ul><li><strong><code>getMenu</code>方法</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">getMenu</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config);</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(config.<span class="property">body</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(config.<span class="property">body</span>))</span><br><span class="line">    <span class="comment">// 先判断用户是否存在</span></span><br><span class="line">    <span class="comment">// 判断账号和密码是否对应</span></span><br><span class="line">    <span class="comment">// 超级管理员</span></span><br><span class="line">    <span class="keyword">if</span> (username === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; password === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">menu</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">              <span class="attr">label</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">              <span class="attr">icon</span>: <span class="string">&#x27;s-home&#x27;</span>,</span><br><span class="line">              <span class="attr">url</span>: <span class="string">&#x27;home/index.vue&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;/mall&#x27;</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;mall&#x27;</span>,</span><br><span class="line">              <span class="attr">label</span>: <span class="string">&#x27;商品管理&#x27;</span>,</span><br><span class="line">              <span class="attr">icon</span>: <span class="string">&#x27;video-play&#x27;</span>,</span><br><span class="line">              <span class="attr">url</span>: <span class="string">&#x27;mall/index.vue&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">              <span class="attr">label</span>: <span class="string">&#x27;用户管理&#x27;</span>,</span><br><span class="line">              <span class="attr">icon</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">              <span class="attr">url</span>: <span class="string">&#x27;User/index.vue&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">label</span>: <span class="string">&#x27;其他&#x27;</span>,</span><br><span class="line">              <span class="attr">icon</span>: <span class="string">&#x27;location&#x27;</span>,</span><br><span class="line">              <span class="attr">children</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">path</span>: <span class="string">&#x27;/page1&#x27;</span>,</span><br><span class="line">                  <span class="attr">name</span>: <span class="string">&#x27;page1&#x27;</span>,</span><br><span class="line">                  <span class="attr">label</span>: <span class="string">&#x27;页面1&#x27;</span>,</span><br><span class="line">                  <span class="attr">icon</span>: <span class="string">&#x27;setting&#x27;</span>,</span><br><span class="line">                  <span class="attr">url</span>: <span class="string">&#x27;other/pageOne.vue&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">path</span>: <span class="string">&#x27;/page2&#x27;</span>,</span><br><span class="line">                  <span class="attr">name</span>: <span class="string">&#x27;page2&#x27;</span>,</span><br><span class="line">                  <span class="attr">label</span>: <span class="string">&#x27;页面2&#x27;</span>,</span><br><span class="line">                  <span class="attr">icon</span>: <span class="string">&#x27;setting&#x27;</span>,</span><br><span class="line">                  <span class="attr">url</span>: <span class="string">&#x27;other/pageTwo.vue&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">token</span>: <span class="title class_">Mock</span>.<span class="property">Random</span>.<span class="title function_">guid</span>(),<span class="comment">//随机生成一个id充当token</span></span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;获取成功&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 次级管理员</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (username === <span class="string">&#x27;xiaoxiao&#x27;</span> &amp;&amp; password === <span class="string">&#x27;xiaoxiao&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">menu</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">              <span class="attr">label</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">              <span class="attr">icon</span>: <span class="string">&#x27;s-home&#x27;</span>,</span><br><span class="line">              <span class="attr">url</span>: <span class="string">&#x27;home/index.vue&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;/mall&#x27;</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;mall&#x27;</span>,</span><br><span class="line">              <span class="attr">label</span>: <span class="string">&#x27;商品管理&#x27;</span>,</span><br><span class="line">              <span class="attr">icon</span>: <span class="string">&#x27;video-play&#x27;</span>,</span><br><span class="line">              <span class="attr">url</span>: <span class="string">&#x27;mall/index.vue&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">token</span>: <span class="title class_">Mock</span>.<span class="property">Random</span>.<span class="title function_">guid</span>(),</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;获取成功&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: -<span class="number">999</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;密码错误&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>表单发送</strong><br><img src="/../upload/Vue2m/1.png" alt="image"></li></ul><h2 id="2-动态路由的实现-cookie查看往期博客"><a href="#2-动态路由的实现-cookie查看往期博客" class="headerlink" title="2.动态路由的实现:(cookie查看往期博客)"></a>2.动态路由的实现:(<code>cookie</code>查看往期博客)</h2><ul><li><strong>登陆成功过后,首先执行清除路由组件方法(<code>clearMenu</code>)以保证当前页面一片空白,随后在将登陆成功而获取到的<code>Menu</code>数据(权限路由:路由组件的数据)重新通过设置路由组件的方法(<code>setMenu</code>)设置成一个<code>cookie</code>存储起来(为什么需要<code>cookie</code>,避免浏览器刷新时丢失数据),再调用<code>addMenu</code>方法对获取到的<code>Menu</code>数据进行一个二级菜单的判断以及动态路由(包括二级菜单)的转变(绑定<code>component</code>属性来动态指向路由位置),最后再通过<code>addRoute</code>方法将完成动态转变的权限路由(绑定了<code>component</code>属性的<code>Menu</code>数据)绑定到全局的路由器当中(<code>router</code>)</strong><ul><li><strong><code>addMenu</code>函数执行流程: 首先判断接收过来的<code>Menu</code>是否存在二级菜单(即是否存在子路由),若是存在,则将每一子路由遍历添加<code>component</code>属性,使其变成动态路由(可指向),随后追加到<code>menuArray[]</code>当中(<code>menuArray</code>用于暂时存放完成动态转变的权限路由组件),若无二级菜单权限路由也是如此进行动态路由的转变。最后在通过<code>forEach</code>方法,将<code>menuArray</code>再通过<code>addRoute</code>方法添加到<code>Main</code>路由组件当中</strong></li></ul></li></ul><h3 id="完整代码如下"><a href="#完整代码如下" class="headerlink" title="完整代码如下:"></a>完整代码如下:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置权限路由的cookie</span></span><br><span class="line"><span class="title function_">setMenu</span>(<span class="params">state,val</span>)&#123;</span><br><span class="line">    state.<span class="property">menu</span> = val</span><br><span class="line">    <span class="comment">// 将数据缓存到cookie中并进行序列化</span></span><br><span class="line">    <span class="title class_">Cookie</span>.<span class="title function_">set</span>(<span class="string">&#x27;menu&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(val))</span><br><span class="line">&#125; ,</span><br><span class="line"><span class="comment">// 清除权限路由cookie</span></span><br><span class="line"><span class="title function_">clearMenu</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="comment">// 数据重置</span></span><br><span class="line">    state.<span class="property">menu</span> = []</span><br><span class="line">    <span class="title class_">Cookie</span>.<span class="title function_">remove</span>(<span class="string">&#x27;menu&#x27;</span>)</span><br><span class="line">&#125; ,</span><br><span class="line"><span class="comment">// 路由的动态添加</span></span><br><span class="line"><span class="title function_">addMenu</span>(<span class="params">state,router</span>)&#123;</span><br><span class="line">    <span class="comment">// 如果cookie中没有找到menu直接return</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Cookie</span>.<span class="title function_">get</span>(<span class="string">&#x27;menu&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> menu = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">Cookie</span>.<span class="title function_">get</span>(<span class="string">&#x27;menu&#x27;</span>))</span><br><span class="line">    state.<span class="property">menu</span> = menu</span><br><span class="line">    <span class="comment">// 接收完成动态路由设置的menu数据</span></span><br><span class="line">    <span class="keyword">const</span> menuArray = []</span><br><span class="line">    menu.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否存在二级菜单</span></span><br><span class="line">        <span class="keyword">if</span>(item.<span class="property">children</span>)&#123;<span class="comment">//存在children属性</span></span><br><span class="line">            item.<span class="property">children</span> = item.<span class="property">children</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">                <span class="comment">// 给menu动态添加component属性用于指向路由</span></span><br><span class="line">                <span class="comment">// 实现路由的动态切换该路由的身上必须要有动态属性(component)指向一个二级组件</span></span><br><span class="line">                <span class="comment">// es6按需引入menu中静态路由里面的url属性用于指定路由的跳转</span></span><br><span class="line">                item.<span class="property">component</span> = <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">`../views/<span class="subst">$&#123;item.url&#125;</span>`</span>)</span><br><span class="line">                <span class="comment">// 返回由动态路由组件组成的全新的menu(此时这里的menu里面的路由组件里面都具备了component属性了,能够动态指向)</span></span><br><span class="line">                <span class="keyword">return</span> item</span><br><span class="line">            &#125;)</span><br><span class="line">            menuArray.<span class="title function_">push</span>(...item.<span class="property">children</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 若无二级菜单则直接进行动态路由component属性的添加即可</span></span><br><span class="line">            item.<span class="property">component</span> = <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">`../views/<span class="subst">$&#123;item.url&#125;</span>`</span>)</span><br><span class="line">            menuArray.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 路由的动态添加(使用到addRoute)</span></span><br><span class="line">    menuArray.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 所有的路由组件(包括动态权限路由组件和静态路由组件)都归于Main组件管理</span></span><br><span class="line">        <span class="comment">// 在Main路由身上添加子路由[权限路由(Menu动态路由)]</span></span><br><span class="line">        router.<span class="title function_">addRoute</span>(<span class="string">&#x27;Main&#x27;</span>,item)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-面包屑-tags和页面的联动切换显示实现"><a href="#3-面包屑-tags和页面的联动切换显示实现" class="headerlink" title="3.面包屑,tags和页面的联动切换显示实现:"></a>3.面包屑,tags和页面的联动切换显示实现:</h2><h3 id="1-面包屑联动页面切换"><a href="#1-面包屑联动页面切换" class="headerlink" title="1.面包屑联动页面切换:"></a>1.面包屑联动页面切换:</h3><ul><li><p><strong>首先调用<code>饿了么Ui</code>组件库里面的面包屑组件,它里面提供两个参数配置,<code>separator</code>(分隔符),和<code>to</code>(路由的跳转指向),如下图所示:</strong><br><img src="/../upload/Vue2m/2.png" alt="image"></p></li><li><p><strong>随后我们在Vuex中设置一个<code>tabsList</code>用来存放面包屑数据,再在<code>mutations</code>中设置一个<code>selectMenu</code>方法用于判断我们通过点击侧边栏获取到的<code>路由数据</code>来对<code>tabsList</code>面包屑数据进行增删改查,判断该当前的面包屑列表中是否存在你点击的路由的面包屑</strong></p></li><li><p><strong><code>Vuex</code>中</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Vuex中*************************************************</span></span><br><span class="line"><span class="comment">// 定义状态</span></span><br><span class="line"><span class="attr">state</span>:&#123;</span><br><span class="line">    <span class="comment">// 判断是否闭合侧边栏</span></span><br><span class="line">    <span class="attr">isCollapse</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 面包屑数据</span></span><br><span class="line">    <span class="attr">tabsList</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">            <span class="attr">label</span>:<span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>:<span class="string">&#x27;home&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 设置当前面包屑</span></span><br><span class="line">    <span class="attr">currentMenu</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 设置登录获取回来的menu[管理员能看到的路由页面]</span></span><br><span class="line">    <span class="attr">menu</span>:[]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mutations</span>:&#123;</span><br><span class="line">    <span class="comment">// 是否折叠侧边栏</span></span><br><span class="line">    <span class="title function_">collapseMenu</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="comment">// 状态反转</span></span><br><span class="line">        state.<span class="property">isCollapse</span> = !state.<span class="property">isCollapse</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 点击菜单改变当前面包屑</span></span><br><span class="line">    <span class="title function_">selectMenu</span>(<span class="params">state,val</span>)&#123;<span class="comment">//val为通过点击侧边栏获取到的权限路由数据</span></span><br><span class="line">        <span class="keyword">if</span>(val.<span class="property">name</span> !== <span class="string">&#x27;home&#x27;</span>)&#123;</span><br><span class="line">            state.<span class="property">currentMenu</span> = val</span><br><span class="line">            <span class="comment">// 判断该当前的面包屑列表中是否存在你点击的路由的面包屑</span></span><br><span class="line">            <span class="keyword">const</span> result = state.<span class="property">tabsList</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === val.<span class="property">name</span>)</span><br><span class="line">            <span class="keyword">if</span>(result === -<span class="number">1</span>)&#123;<span class="comment">//判断原来的面包屑中是否存在</span></span><br><span class="line">                state.<span class="property">tabsList</span>.<span class="title function_">push</span>(val)<span class="comment">//添加面包屑</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                state.<span class="property">currentMenu</span> = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>随后我们在页面上通过<code>mapState</code>方法获取到vuex中的<code>tabsList</code>来遍历生成面包屑即可</strong><br><img src="/../upload/Vue2m/3.png" alt="image"><br><img src="/../upload/Vue2m/4.png" alt="image"></p></li></ul><h3 id="2-tag联动面包屑和页面"><a href="#2-tag联动面包屑和页面" class="headerlink" title="2.tag联动面包屑和页面"></a>2.tag联动面包屑和页面</h3><ul><li><strong>首先引入饿了么Ui组件库中的<code>tag</code>组件,并且使用<code>vuex</code>中的面包屑数据(<code>tags = tabsList</code>)同步生成等量的<code>tag</code></strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- closable:是否可关闭,effect:主题特效, click:点击触发, close:关闭触发--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(tag,index) in tags&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;tag.name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:closable</span>=<span class="string">&quot;tag.name !== &#x27;home&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:effect</span>=<span class="string">&quot;$route.name === tag.name ? &#x27;dark&#x27; : &#x27;plain&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;changeMenu(tag)&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">close</span>=<span class="string">&quot;handleClose(tag,index)&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">    &#123;&#123;tag.label&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../upload/Vue2m/5.png" alt="image"></p><ul><li><p><strong>随后进行点击和删除事件的编写,点击跳转路由没什么好说的了,点击删除就有很大的<code>说法</code>了。</strong></p></li><li><p><strong>删除事件的逻辑实现:</strong></p><ul><li><strong>1.点击删除首先判断当前删除的<code>tag</code>是否为当前聚焦的<code>tag,</code>如果不是,删除就行</strong></li></ul><p><img src="/../upload/Vue2m/0.gif" alt="image"></p><ul><li><p><strong>2.若当前删除的<code>tag</code>与当前聚焦的<code>tag</code>为同一个:</strong></p><ul><li><p><strong>(1).若点击删除的<code>tag</code>为最右边,删除过后,<code>tag</code>的聚焦以及路由的跳转向左移动一位</strong></p><p><img src="/../upload/Vue2m/1.gif" alt="image"></p></li><li><p><strong>(2).若点击删除的<code>tag</code>不为最右边,删除过后,<code>tag</code>的聚焦以及路由的跳转向右移动一位</strong></p><p><img src="/../upload/Vue2m/2.gif" alt="image"></p></li></ul></li><li><p><strong>3.最后再同步删除vuex中的<code>tag(tabsList)</code>指定的数据即可</strong></p></li></ul></li></ul><h4 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h4><ul><li><strong>CommonTag.vue(面包屑和tags组件)</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 引入辅助方法</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;</span><br><span class="line">        <span class="attr">close</span>:<span class="string">&#x27;closeTag&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 点击相关的tag进行跳转(路由的跳转)</span></span><br><span class="line">    <span class="title function_">changeMenu</span>(<span class="params">tag</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:tag.<span class="property">name</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 删除tag(分两部分:1.点击删除vuex中的数据,2.删除tag后焦点自动往左移)</span></span><br><span class="line">    <span class="title function_">handleClose</span>(<span class="params">tag,index</span>)&#123;</span><br><span class="line">        <span class="comment">// 首先获取到当前的tag的长度(即一共有多少个tag)</span></span><br><span class="line">        <span class="keyword">const</span> length = <span class="variable language_">this</span>.<span class="property">tags</span>.<span class="property">length</span> - <span class="number">1</span> <span class="comment">//减1是因为后续要和index比较,index是从0开始的</span></span><br><span class="line">        <span class="comment">// this.$store.commit(&#x27;closeTag&#x27;,tag)//常规的调用mutations方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">close</span>(tag)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.判断当前删除的tag是否为当前聚焦的tag,如果不是,删除就行</span></span><br><span class="line">        <span class="keyword">if</span>(tag.<span class="property">name</span> !== <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">name</span>)&#123;</span><br><span class="line">            <span class="comment">// 删除即可(不需要做过多的逻辑)</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.判断该当前删除的tag与当前聚焦的tag为同一个</span></span><br><span class="line">        <span class="keyword">if</span>(index === length)&#123;<span class="comment">//如果当前聚焦的是最后一个tag(权限路由组件)</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="comment">// 路由的聚焦向左移动一位</span></span><br><span class="line">                <span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">tags</span>[index - <span class="number">1</span>].<span class="property">name</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="comment">//如果当前聚焦的不后一个tag(权限路由组件)</span></span><br><span class="line">                <span class="comment">// 路由的聚焦向右移动一位</span></span><br><span class="line">                <span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">tags</span>[index].<span class="property">name</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><strong><code>store</code>里面的<code>tab.js</code></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 定义状态</span></span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="comment">//还有其他的数据............</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 面包屑数据</span></span><br><span class="line">        <span class="attr">tabsList</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">                <span class="attr">label</span>:<span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">                <span class="attr">icon</span>:<span class="string">&#x27;home&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 设置当前面包屑</span></span><br><span class="line">        <span class="attr">currentMenu</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="comment">// 设置登录获取回来的menu[管理员能看到的路由页面]</span></span><br><span class="line">        <span class="attr">menu</span>:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="comment">// 点击菜单改变当前面包屑</span></span><br><span class="line">        <span class="title function_">selectMenu</span>(<span class="params">state,val</span>)&#123;<span class="comment">//val为通过点击侧边栏获取到的权限路由数据</span></span><br><span class="line">            <span class="keyword">if</span>(val.<span class="property">name</span> !== <span class="string">&#x27;home&#x27;</span>)&#123;</span><br><span class="line">                state.<span class="property">currentMenu</span> = val</span><br><span class="line">                <span class="comment">// 判断该当前的面包屑列表中是否存在你点击的路由的面包屑</span></span><br><span class="line">                <span class="keyword">const</span> result = state.<span class="property">tabsList</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === val.<span class="property">name</span>)</span><br><span class="line">                <span class="keyword">if</span>(result === -<span class="number">1</span>)&#123;<span class="comment">//判断原来的面包屑中是否存在</span></span><br><span class="line">                    state.<span class="property">tabsList</span>.<span class="title function_">push</span>(val)<span class="comment">//添加面包屑</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    state.<span class="property">currentMenu</span> = <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 删除tag</span></span><br><span class="line">        <span class="title function_">closeTag</span>(<span class="params">state,val</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> result = state.<span class="property">tabsList</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === val.<span class="property">name</span>)</span><br><span class="line">            state.<span class="property">tabsList</span>.<span class="title function_">splice</span>(result,<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//还有其他的mutations方法 ..................................</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> Vue2 </tag>
            
            <tag> 后台管理系统 </tag>
            
            <tag> mock </tag>
            
            <tag> token </tag>
            
            <tag> elementUi组件库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(12)-Vue3中的其他改变</title>
      <link href="/2022/09/19/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012/"/>
      <url>/2022/09/19/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012/</url>
      
        <content type="html"><![CDATA[<h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p><strong><code>Vue 2.x</code> 有许多全局 <code>API</code> 和配置。</strong></p><ul><li><p><strong>例如：注册全局组件、注册全局指令等。</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>Vue3.0</code>中对这些<code>API</code>做出了调整：</strong></p><ul><li><p><strong>将全局的<code>API</code>，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</strong></p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p><strong><code>data</code>选项应始终被声明为一个函数。</strong></p></li><li><p><strong>过度类名的更改：</strong></p><ul><li><p><strong><code>Vue2.x</code>写法</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>Vue3.x</code>写法</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></strong></p></li><li><p><strong><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</strong></p><ul><li><p><strong>父组件中绑定事件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>子组件中声明自定义事件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><strong style="color:#DD5145">移除</strong>过滤器（filter）</strong></p><blockquote><p><strong>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 <code>JavaScript</code>” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</strong></p></blockquote></li><li><p>……</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(11)-Vue3中的那些新增的内置组件</title>
      <link href="/2022/09/19/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011/"/>
      <url>/2022/09/19/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3中的那些新增的内置组件"><a href="#Vue3中的那些新增的内置组件" class="headerlink" title="Vue3中的那些新增的内置组件"></a>Vue3中的那些新增的内置组件</h1><h2 id="1-Fragment-相当于Vue2中的根标签"><a href="#1-Fragment-相当于Vue2中的根标签" class="headerlink" title="1.Fragment(相当于Vue2中的根标签)"></a>1.Fragment(相当于Vue2中的根标签)</h2><ul><li><strong>在<code>Vue2</code>中: 组件必须有一个根标签</strong></li><li><strong>在<code>Vue3</code>中: 组件可以没有根标签, 内部会将多个标签包含在一个<code>Fragment</code>虚拟元素中</strong></li><li><strong>好处: 减少标签层级, 减小内存占用</strong><br><img src="/../upload/Vue/Vue3-5/6.png" alt="image"></li></ul><h2 id="2-Teleport-传送组件"><a href="#2-Teleport-传送组件" class="headerlink" title="2.Teleport(传送组件)"></a>2.Teleport(传送组件)</h2><ul><li><strong>什么是<code>Teleport</code>(远程传送的意思)？—— <code>Teleport</code> 是Vue3中的一个内置组件,是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置(<code>DOM节点</code>)的技术。</strong></li><li><strong>使用方法: 使用<code>Teleport</code>标签包裹住想要传送的<code>html</code>标签元素,随后再在<code>Teleport</code>标签中的<code>to</code>属性当中指向传送位置即可,这里的传送位置可以是<code>css选择器</code>,可以是标签元素,不过Vue团队建议我们把<code>to</code>指向<code>body</code>标签。</strong></li><li><strong>好处:我们在实际开发当中可能会遇到弹窗提示,但是项目的<code>html</code>层级是一环扣一环的,你想要给里面的层级设定弹窗居中,那么以后你往上的任一层级发生改变都会对你的居中有影响,但是使用<code>teleport</code>组件,可以将弹窗结构传送到<code>body</code>标签当中,这样你就只有一个父元素,这时做居中就显得更加的加单方便,也不用担心层级的问题了!</strong></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong>在<code>Dialog</code>组件当中(省略css部分)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = true&quot;</span>&gt;</span>点我弹个窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在body标签当中添加这个组件,即body标签成为这个html结构的父元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;Dialog&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> isShow = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;isShow&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>在<code>Son</code>组件当中调用</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Son组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Dialog</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Dialog</span> <span class="keyword">from</span> <span class="string">&#x27;./Dialog.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;Son&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;<span class="title class_">Dialog</span>&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/Vue3-5/8.gif" alt="image"></p><h2 id="3-Suspense-异步组件"><a href="#3-Suspense-异步组件" class="headerlink" title="3.Suspense(异步组件)"></a>3.Suspense(异步组件)</h2><ul><li><p><strong>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</strong></p></li><li><p><strong>使用场景:</strong></p><ul><li><p><strong>在页面加载之前显示加载动画(后台获取数据过慢导致数据显示到页面时间过长)</strong></p></li><li><p><strong>显示占位符内容</strong></p></li><li><p><strong>处理延迟加载的图像</strong></p></li></ul></li><li><p><strong>使用步骤：</strong></p><ul><li><strong>异步引入组件</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是App组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:fallback</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载中.....<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> Fragment </tag>
            
            <tag> Teleport </tag>
            
            <tag> Suspense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(10)-相较于配置式API,组合式API的优势</title>
      <link href="/2022/09/19/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010/"/>
      <url>/2022/09/19/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010/</url>
      
        <content type="html"><![CDATA[<h1 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h1><h2 id="1-Options-API-配置式Api-存在的问题"><a href="#1-Options-API-配置式Api-存在的问题" class="headerlink" title="1.Options API (配置式Api)存在的问题"></a>1.Options API (配置式Api)存在的问题</h2><ul><li><strong>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</strong><br><img src="/../upload/Vue/Vue3-5/d1.gif" alt="image"><br><img src="/../upload/Vue/Vue3-5/d2.gif" alt="image"></li></ul><h2 id="2-Composition-API-组合式API-的优势"><a href="#2-Composition-API-组合式API-的优势" class="headerlink" title="2.Composition API (组合式API)的优势"></a>2.Composition API (组合式API)的优势</h2><ul><li><strong>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</strong><br><img src="/../upload/Vue/Vue3-5/d3.gif" alt="image"><br><img src="/../upload/Vue/Vue3-5/d4.gif" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> toRef </tag>
            
            <tag> toRefs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(9)-Vue3中的其他组合式api(Composition API)</title>
      <link href="/2022/09/19/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/"/>
      <url>/2022/09/19/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3中的其他组合式api-Composition-API"><a href="#Vue3中的其他组合式api-Composition-API" class="headerlink" title="Vue3中的其他组合式api(Composition API)"></a><code>Vue3</code>中的其他组合式<code>api</code>(<code>Composition API</code>)</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.<code>shallowReactive</code> 与 <code>shallowRef</code></h2><ul><li><p><strong><code>shallowReactive</code>：只处理对象最外层属性的响应式（浅响应式）。</strong></p></li><li><p><strong><code>shallowRef</code>：只处理基本数据类型的响应式, 不进行对象的响应式处理。</strong></p></li><li><p><strong>什么时候使用?</strong></p><ul><li><strong>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; <code>shallowReactive</code>。</strong></li><li><strong>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; <code>shallowRef</code>。</strong></li></ul></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前的x.y值是：&#123;&#123;x.y&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前的a值是：&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;a++&quot;</span>&gt;</span>点我a++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;x.y++&quot;</span>&gt;</span>点我x.y++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;person&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>薪资：&#123;&#123;job.j1.salary&#125;&#125;K<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;age++&quot;</span>&gt;</span>增长年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref,reactive,toRef,toRefs,shallowReactive,shallowRef&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">shallowReactive</span>(&#123; <span class="comment">//只考虑第对象一层数据的响应式(浅层次)</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">job</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">j1</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 无法修改salary（shallowReactive）</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">salary</span>:<span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用shallowRef定义对象(无法解析成响应式)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> x = <span class="title function_">shallowRef</span>(&#123;<span class="comment">//无法修改对象,只能修改基本你数据类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 无法修改y（shallowRef）</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">y</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用shallowRef定义基本数据类型(可以解析成响应式)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> a = <span class="title function_">shallowRef</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">x,</span></span><br><span class="line"><span class="language-javascript">a,</span></span><br><span class="line"><span class="language-javascript">person,</span></span><br><span class="line"><span class="language-javascript">...<span class="title function_">toRefs</span>(person)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-x-y和对象里面的salary不是响应式的-页面当中点击无变化"><a href="#结果展示-x-y和对象里面的salary不是响应式的-页面当中点击无变化" class="headerlink" title="结果展示:(x.y和对象里面的salary不是响应式的,页面当中点击无变化)"></a>结果展示:(x.y和对象里面的salary不是响应式的,页面当中点击无变化)</h3><p><img src="/../upload/Vue/Vue3-5/3.gif" alt="image"></p><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.<code>readonly</code> 与 <code>shallowReadonly</code></h2><ul><li><strong><code>readonly</code>: 让一个响应式数据变为只读的（深只读）。</strong></li><li><strong><code>shallowReadonly</code>：让一个响应式数据变为只读的（浅只读）。</strong></li><li><strong>应用场景: 不希望数据被修改时(使用别人封装好的组件且该组件的数据不希望被修改)。</strong></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前求和为：&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>点我++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>薪资：&#123;&#123;job.j1.salary&#125;&#125;K<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;age++&quot;</span>&gt;</span>增长年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref,reactive,toRefs,readonly,shallowReadonly&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">job</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">j1</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">salary</span>:<span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 只读(对象)</span></span></span><br><span class="line"><span class="language-javascript">person = <span class="title function_">readonly</span>(person)<span class="comment">//对象里面的数据只能读取不能修改</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 浅层次只读(对象)</span></span></span><br><span class="line"><span class="language-javascript">person = <span class="title function_">shallowReadonly</span>(person)<span class="comment">//对象里面的第一层数据只能读取不能修改</span></span></span><br><span class="line"><span class="language-javascript">sum = <span class="title function_">readonly</span>(sum)<span class="comment">//该基本数据类型的数据之恶能读取不能修改</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 返回一个对象（常用）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">sum,</span></span><br><span class="line"><span class="language-javascript">...<span class="title function_">toRefs</span>(person)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><ol><li><strong><code>readonly</code>只读(对象和基本数据类型)</strong><br><img src="/../upload/Vue/Vue3-5/4.gif" alt="image"></li><li><strong><code>shallowReadonly</code>浅层次只读(对象里面嵌套对象是可以变的(薪资是响应式的))</strong><br><img src="/../upload/Vue/Vue3-5/5.gif" alt="image"></li><li><strong>控制台输出:</strong><br><img src="/../upload/Vue/Vue3-5/2.png" alt="image"></li></ol><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.<code>toRaw</code> 与 <code>markRaw</code></h2><ul><li><strong><code>toRaw</code>：</strong><ul><li><strong>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</strong></li><li><strong>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</strong></li></ul></li><li><strong><code>markRaw</code>：</strong><ul><li><strong>作用：标记一个对象，使其永远不会再成为响应式对象。</strong></li><li><strong>应用场景:</strong><ol><li><strong>有些值不应被设置为响应式的，例如复杂的第三方类库等。</strong></li><li><strong>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</strong></li></ol></li></ul></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-show</span>=<span class="string">&quot;person.car&quot;</span>&gt;</span>座驾信息：&#123;&#123;person.car&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showRawPerson&quot;</span>&gt;</span>输出最原始的person<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCar&quot;</span>&gt;</span>给人添加一台车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.car.price++&quot;</span>&gt;</span>换价格<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref,reactive,toRefs,toRaw,markRaw&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 展示原始信息</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">showRawPerson</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> p = <span class="title function_">toRaw</span>(person)<span class="comment">//将响应式的对象转换为普通对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)<span class="comment">//不是proxy代理对象了</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 给对象添加一个car属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addCar</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> car = &#123;<span class="attr">price</span>:<span class="number">40</span>&#125;</span></span><br><span class="line"><span class="language-javascript">person.<span class="property">car</span> = <span class="title function_">markRaw</span>(car)<span class="comment">//标记一个对象，使其永远不会再成为响应式对象。</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">person,</span></span><br><span class="line"><span class="language-javascript">...<span class="title function_">toRefs</span>(person),</span></span><br><span class="line"><span class="language-javascript">showRawPerson,</span></span><br><span class="line"><span class="language-javascript">addCar,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/Vue3-5/6.gif" alt="image"><br><img src="/../upload/Vue/Vue3-5/3.png" alt="image"></p><h2 id="4-customRef-自定义ref函数"><a href="#4-customRef-自定义ref函数" class="headerlink" title="4.customRef(自定义ref函数)"></a>4.<code>customRef</code>(自定义<code>ref</code>函数)</h2><ul><li><p><strong>作用：创建一个自定义的<code> ref</code>，并对其依赖项跟踪和更新触发进行显式控制。</strong></p></li><li><p><strong>简单点说就是我们可以按照自己的业务需求去自定义封装一个<code>ref</code>对象，在其内部可以使用 <code>get </code>和 <code>set</code>去跟踪或更新数据，</strong></p></li><li><p><strong><code>customRef</code>接收一个函数作为参数</strong>，<strong>这个函数接收两个函数作为参数 <code>track </code>(通知vue需要追踪后续内容的变化) 和 <code>trigger</code>(通知vue重新解析模板)。</strong></p></li><li><p><strong>实现防抖效果：</strong></p></li></ul><h3 id="代码展示-3"><a href="#代码展示-3" class="headerlink" title="代码展示:"></a>代码展示:</h3><template>    <input type="text" v-model="keyWord">    <h3></h3></template><script>    import {ref,customRef} from 'vue'    export default {        name: 'App',        setup() {            //自定义一个ref——名为：myRef            function myRef(value,delay){                let timer                return customRef((track,trigger)=>{                    return {                        get(){                            console.log(`有人从myRef这个容器中读取数据了，我把${value}给他了`)                            track() //通知Vue追踪value的变化（提前和get商量一下，让他认为这个value是有用的）                            return value                        },                        set(newValue){//这里是newValue是监视你最新输入的value值                            console.log(`有人把myRef这个容器中数据改为了：${newValue}`)                            clearTimeout(timer)                            timer = setTimeout(()=>{                                value = newValue//value的重新赋值                                trigger() //通知Vue去重新解析模板                            },delay)                        },                    }                })            }            // let keyWord = ref('hello') //使用Vue提供的ref            let keyWord = myRef('hello',500) //使用程序员自定义的ref                        return {keyWord}        }    }</script><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/Vue3-5/7.gif" alt="image"><br><img src="/../upload/Vue/Vue3-5/4.png" alt="image"></p><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><p><img src="/../upload/Vue/Vue3-5/5.png" alt="image"></p><ul><li><p><strong>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</strong></p></li><li><p><strong>使用方法：</strong>祖组件使用<code>provide</code>方法通过指定的<code>key</code>返回要传给下级(后代组件)的数据，子辈组件或者孙辈等下级组件再使用<code>inject</code>方法通过指定的<code>key</code>来接收数据!。</p><p><strong>使用场景：</strong>由于<code>vue</code>有<code>$parent</code>属性可以让子组件访问父组件。但孙组件想要访问祖先组件就比较困难。通过<code>provide</code>&#x2F;<code>inject</code>可以轻松实现<strong>跨级访问父组件</strong>的数据</p></li><li><p><strong>具体写法：</strong></p><ol><li><strong>祖组件中：</strong></li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)<span class="comment">//提供指定的key(&#x27;car&#x27;)和数据(car)</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>后代组件中：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)<span class="comment">//接收指定的key(&#x27;car&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="完整的代码展示"><a href="#完整的代码展示" class="headerlink" title="完整的代码展示:"></a>完整的代码展示:</h3><ol><li><strong><code>App</code>组件当中(祖组件)[script代码片段]</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive,toRefs,provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;<span class="title class_">Child</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40W&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car) <span class="comment">//使用provide给自己的后代组件传递数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;...<span class="title function_">toRefs</span>(car)&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>Child组件(子组件)[script代码片段]</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;Child&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;<span class="title class_">Son</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> x = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)<span class="comment">//使用inject来接受祖组件传过来的数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(x,<span class="string">&#x27;Child-----&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong><code>Son</code>组件(孙组件,后代组件)[script代码片段]</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;Son&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)<span class="comment">//使用inject来接受祖组件传过来的数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(car,<span class="string">&#x27;Son-----&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;car&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/Vue3-5/5.png" alt="image"></p><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li><strong><code>isRef</code>: 检查一个值是否为一个 <code>ref</code> 对象</strong></li><li><strong><code>isReactive</code>: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</strong></li><li><strong><code>isReadonly</code>: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</strong></li><li><strong><code>isProxy</code>: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> shallowReactive </tag>
            
            <tag> shallowRef </tag>
            
            <tag> readonly </tag>
            
            <tag> shallowReadonly </tag>
            
            <tag> toRaw </tag>
            
            <tag> markRaw </tag>
            
            <tag> customRef </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(8)-Vue3中的toRef和toRefs</title>
      <link href="/2022/09/19/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/"/>
      <url>/2022/09/19/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/</url>
      
        <content type="html"><![CDATA[<h1 id="1-toRef和toRefs"><a href="#1-toRef和toRefs" class="headerlink" title="1.toRef和toRefs"></a>1.toRef和toRefs</h1><ul><li><p><strong><code>toRef</code> 函数的作用：转换</strong>响应式对象<strong>中某个属性为单独响应式数据，并且转换后的值和之前是关联的（<code>ref</code> 函数也可以转换，但值非关联）。</strong></p></li><li><p><strong>语法：<code>const name = toRef(target,&#39;propsName&#39;)</code></strong></p><ul><li><strong>语法解析：<code>target</code>为目标响应对象，<code>propsName</code>为该响应对象当中的属性</strong></li></ul></li><li><p><strong>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</strong></p></li><li><p><strong>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 <code>ref</code> 对象，语法：<code>toRefs(target)</code></strong></p><ul><li><strong>但是<code>toRefs</code>有一个缺点：他只能将第一层的属性解析成响应式</strong></li><li><strong>在<code>setup()</code>中可以用<code>return &#123; ...toRefs(object)&#125;</code>的方式，将整个响应式对象<code>object</code>的所有属性(第一层属性)提供给外部使用。</strong></li></ul></li></ul><h2 id="代码展示："><a href="#代码展示：" class="headerlink" title="代码展示："></a>代码展示：</h2><ul><li><strong><code>Demo</code>组件当中:</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;person&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用toRefs需要:job.j1.salary ,使用toRef只需要:salary--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>薪资：&#123;&#123;job.j1.salary&#125;&#125;K<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;age++&quot;</span>&gt;</span>增长年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用toRefs需要:job.j1.salary ,使用toRef只需要:salary--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入对应的api</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref,reactive,toRef,toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">job</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">j1</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">salary</span>:<span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name1 = person.<span class="property">name</span><span class="comment">//这里就相当于const name1 = &#x27;张三&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回非响应式属性&#x27;</span>,name1)<span class="comment">//并非响应式的张三</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name2 = <span class="title function_">toRef</span>(person,<span class="string">&#x27;name&#x27;</span>)<span class="comment">//返回响应式的属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;toRef返回的响应式属性&#x27;</span>,name2)<span class="comment">//这里的name属性是refimp对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> x = <span class="title function_">toRefs</span>(person)<span class="comment">//返回响应式的对象[对象的第一层属性]</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;toRefs返回的响应式对象&#x27;</span>,x)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">person,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用ref返回响应式属性(并非关联数据)</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="title function_">ref</span>(person.<span class="property">name</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="title function_">ref</span>(person.<span class="property">age</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="attr">salary</span>:<span class="title function_">ref</span>(person.<span class="property">job</span>.<span class="property">j1</span>.<span class="property">salary</span>),</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用toRef返回响应式属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="title function_">toRef</span>(person,<span class="string">&#x27;name&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="title function_">toRef</span>(person,<span class="string">&#x27;age&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="attr">salary</span>:<span class="title function_">toRef</span>(person.<span class="property">job</span>.<span class="property">j1</span>,<span class="string">&#x27;salary&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用toRefs返回响应式对象(展开属性)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用es6语法展开</span></span></span><br><span class="line"><span class="language-javascript">...<span class="title function_">toRefs</span>(person)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 切记:调用toRefs(target)只能将对象里面的第一层数据解析成响应式</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 如果是多层次的对象后续在模板中调用还所需要嵌套.</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><ol><li><p><strong>使用<code>ref</code>来解析响应式数据在<code>return</code>中返回(数据是响应式但是与person非关联)</strong><br><img src="/../upload/Vue/Vue3-5/1.gif" alt="image"></p></li><li><p><strong>使用<code>toRef</code>来解析响应式数据在<code>return</code>中返回(数据是响应式且与person关联)</strong><br><img src="/../upload/Vue/Vue3-5/2.gif" alt="image"></p></li><li><p><strong>使用<code>toRefs</code>来解析响应式数据在<code>return</code>中返回</strong><br><img src="/../upload/Vue/Vue3-5/2.gif" alt="image"></p></li><li><p><strong>三种解析方式的变量读取</strong><br><img src="/../upload/Vue/Vue3-5/1.png" alt="image"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> toRef </tag>
            
            <tag> toRefs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(7)-Vue3中的自定义hook函数</title>
      <link href="/2022/09/17/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/"/>
      <url>/2022/09/17/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3中的自定义hook函数"><a href="#Vue3中的自定义hook函数" class="headerlink" title="Vue3中的自定义hook函数"></a>Vue3中的自定义hook函数</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li><p><strong>在<code>Vue3</code>中，使用什么<code>API</code>就引入，这个就是组合式 <code>API</code>。</strong></p></li><li><p><strong>然而，有时引入很多的<code>API</code>就不利于代码的阅读。所以，在 <code>Vue3</code> 中新增了 <code>Hook</code>，可以通过自定义<code>hook</code>函数来存放组合式<code>API</code>的东西，在需要的时候再进行引用。</strong></p></li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li><strong><code>hook</code> ：其本质是一个函数，把 <code>setup</code> 函数中使用的 <code>Composition API</code> 放到一个文件中进行了封装，然后在需要用到的地方，进行引入，类似于 <code>vue2.x</code> 中的 <code>mixin</code>。</strong></li></ul><h2 id="自定义hook的优势"><a href="#自定义hook的优势" class="headerlink" title="自定义hook的优势"></a>自定义<code>hook</code>的优势</h2><ul><li><strong>自定义 <code>hook</code> 能够复用代码，让<code>setup</code>中的逻辑更清楚易懂。</strong></li></ul><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程:"></a>使用流程:</h2><ul><li><strong>首先在脚手架的<code>src</code>文件夹下创建一个<code>Hooks</code>文件夹用于存放我们自定义的<code>hook</code>组合<code>api</code>方法</strong></li></ul><p><img src="/../upload/Vue/Vue3-4/3.png" alt="image"></p><ul><li><strong>随后在创建一个js文件用来存放自定义<code>hook</code>函数</strong></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong><code>usePoint.js</code></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合api Hook函数的编写</span></span><br><span class="line"><span class="comment">// 调用使用到的组合api生命周期钩子函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted,onBeforeUnmount&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//实现鼠标“打点”相关的数据</span></span><br><span class="line"><span class="keyword">let</span> point = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"><span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line"><span class="attr">y</span>:<span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现鼠标“打点”相关的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">savePoint</span>(<span class="params">event</span>)&#123;</span><br><span class="line">point.<span class="property">x</span> = event.<span class="property">pageX</span></span><br><span class="line">point.<span class="property">y</span> = event.<span class="property">pageY</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">pageX</span>,event.<span class="property">pageY</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现鼠标“打点”相关的生命周期钩子</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;<span class="comment">//页面挂载完成调用该方法</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,savePoint)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">onBeforeUnmount</span>(<span class="function">()=&gt;</span>&#123;<span class="comment">//页面卸载之前移除该方法</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,savePoint)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> point</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>在组件当中调用[<code>Demo.vue</code>]</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前点击时鼠标的坐标为：x：&#123;&#123;point.x&#125;&#125;，y：&#123;&#123;point.y&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入自定义hook函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> usePoint <span class="keyword">from</span> <span class="string">&#x27;../hooks/usePoint&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里我们可以看到setup里面的代码变得非常的整洁</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> point = <span class="title function_">usePoint</span>()<span class="comment">//调用自定义hook函数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;sum,point&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/Vue3-4/4.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hook函数&#39;Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(6)-Vue3中的生命周期</title>
      <link href="/2022/09/17/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/"/>
      <url>/2022/09/17/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3中的生命周期"><a href="#Vue3中的生命周期" class="headerlink" title="Vue3中的生命周期"></a>Vue3中的生命周期</h1><p><img src="/../upload/Vue/Vue3-4/smzq1.png" alt="image"><br><img src="/../upload/Vue/Vue3-4/smzq.png" alt="image"></p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate[页面创建前]</code>&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>created[页面创建后]</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>beforeMount[页面挂载前]</code> &#x3D;&#x3D;&#x3D;&gt;<code>onBeforeMount</code></li><li><code>mounted[页面挂载后]</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onMounted</code></li><li><code>beforeUpdate[页面更新前]</code>&#x3D;&#x3D;&#x3D;&gt;<code>onBeforeUpdate</code></li><li><code>updated[页面更新后]</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUpdated</code></li><li><code>beforeUnmount[卸载前]</code> &#x3D;&#x3D;&gt;<code>onBeforeUnmount</code></li><li><code>unmounted[卸载后]</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入生命周期函数(组合api形式)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref,onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---setup---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//通过组合式API的形式去使用生命周期钩子(需要引入)</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onBeforeMount</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onBeforeMount---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onMounted---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onBeforeUpdate</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onBeforeUpdate---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUpdated</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onUpdated---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onBeforeUnmount</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onBeforeUnmount---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onUnmounted---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;sum&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//通过配置项的形式使用生命周期钩子(不需要引入)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//#region </span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---beforeCreate---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---created---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---beforeMount---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---mounted---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---beforeUpdate---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---updated---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---beforeUnmount---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---unmounted---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//#endregion</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生命周期&#39;Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(5)-Vue3中的计算属性,watch监视属性以及watchEffect</title>
      <link href="/2022/09/17/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/"/>
      <url>/2022/09/17/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3中的计算属性和watch监视属性"><a href="#Vue3中的计算属性和watch监视属性" class="headerlink" title="Vue3中的计算属性和watch监视属性"></a>Vue3中的计算属性和watch监视属性</h1><h2 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h2><ul><li><strong>与<code>Vue2.x</code>中<code>computed</code>配置功能一致</strong></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong><code>Demo</code>组件</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一个人的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.firstName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.lastName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>全名：&#123;&#123;person.fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">全名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.fullName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Vue3中将计算属性变成了一个api(函数)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive,computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//计算属性——简写（没有考虑计算属性被修改的情况）</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* person.fullName = computed(()=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">return person.firstName + &#x27;-&#x27; + person.lastName</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//计算属性——完整写法（考虑读和写）</span></span></span><br><span class="line"><span class="language-javascript">person.<span class="property">fullName</span> = <span class="title function_">computed</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">get</span>(<span class="params"></span>)&#123;<span class="comment">//读</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">set</span>(<span class="params">value</span>)&#123;<span class="comment">//改</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)<span class="comment">//数组的split方法将收到的全名进行拆分</span></span></span><br><span class="line"><span class="language-javascript">person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">person</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/Vue3-4/1.gif" alt="image"></p><h2 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h2><ul><li><p><strong>与<code>Vue2.x</code>中<code>watch</code>配置功能一致</strong></p></li><li><p><strong>两个小“坑”：</strong></p><ul><li><strong>监视<code>reactive</code>定义的响应式数据时：<code>oldValue</code>无法正确获取、强制开启了深度监视（<code>deep</code>配置失效）。</strong></li><li><strong>监视<code>reactive</code>定义的响应式数据中某个属性(切记是对象里面的某个属性)时：<code>deep</code>配置有效。</strong></li></ul></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的信息为：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;msg+=&#x27;！&#x27;&quot;</span>&gt;</span>修改信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>薪资：&#123;&#123;person.job.j1.salary&#125;&#125;K<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.age++&quot;</span>&gt;</span>增长年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Vue3中将监视属性变成了一个api(函数)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref,reactive,watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;你好啊&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 对象里面嵌套对象(深度监视)</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">job</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">j1</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">salary</span>:<span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//情况一：监视ref所定义的一个响应式数据(基本数据类型根本不需要deep)</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//情况二：监视ref所定义的多个响应式数据(基本数据类型根本不需要deep)</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">情况三：监视reactive所定义的一个响应式数据(对象)的全部属性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">1.注意：此处无法正确的获取oldValue</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">2.注意：强制开启了深度监视（deep配置无效）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置无效</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//情况四：监视reactive所定义的一个响应式数据(对象)中的某个属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">name</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的name变化了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;) </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//情况五：监视reactive所定义的一个响应式数据(对象)中的某些属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">name</span>,<span class="function">()=&gt;</span>person.<span class="property">age</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的name或age变化了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;)  </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//特殊情况(监视reactive所定义的一个响应式数据(对象)中的某个对象里面的某个属性)</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive所定义的对象中的某个属性，所以deep配置有效</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">sum,</span></span><br><span class="line"><span class="language-javascript">msg,</span></span><br><span class="line"><span class="language-javascript">person</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/Vue3-4/2.gif" alt="image"><br><img src="/../upload/Vue/Vue3-4/2.png" alt="image"></p><h2 id="3-watchEffect函数-非常的智能"><a href="#3-watchEffect函数-非常的智能" class="headerlink" title="3.watchEffect函数(非常的智能)"></a>3.watchEffect函数(非常的智能)</h2><ul><li><p><strong><code>watch</code>的套路是：既要指明监视的属性，也要指明监视的回调。</strong></p></li><li><p><strong><code>watchEffect</code>的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性(且相当于默认开启<code>immediate</code>)。</strong></p></li><li><p><strong><code>watchEffect</code>有点像<code>computed</code>：</strong></p><ul><li><strong>但<code>computed</code>注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</strong></li><li><strong>而<code>watchEffect</code>更注重的是过程（回调函数的函数体），所以不用写返回值。</strong></li></ul></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的信息为：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;msg+=&#x27;！&#x27;&quot;</span>&gt;</span>修改信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>薪资：&#123;&#123;person.job.j1.salary&#125;&#125;K<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.age++&quot;</span>&gt;</span>增长年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Vue3中将watchEffect变成了一个api(函数)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref,reactive,watch,watchEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;你好啊&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">job</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">j1</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">salary</span>:<span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//监视属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* watch(sum,(newValue,oldValue)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">console.log(&#x27;sum的值变化了&#x27;,newValue,oldValue)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;,&#123;immediate:true&#125;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;<span class="comment">//相较于watch更为智能</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 它能自动识别你在回调函数用到了&#x27;谁(属性或方法)&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//用到了谁就监视谁(并且它会开头调用一次,相当于默认开启immediate)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> x1 = sum.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> x2 = person.<span class="property">job</span>.<span class="property">j1</span>.<span class="property">salary</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect所指定的回调执行了,这里我监视了:sum.value和person.job.j1.salary&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">sum,</span></span><br><span class="line"><span class="language-javascript">msg,</span></span><br><span class="line"><span class="language-javascript">person</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码展示-3"><a href="#代码展示-3" class="headerlink" title="代码展示:"></a>代码展示:</h3><p><img src="/../upload/Vue/Vue3-4/3.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> computed </tag>
            
            <tag> watch </tag>
            
            <tag> 计算属性 </tag>
            
            <tag> 监视属性 </tag>
            
            <tag> watchEffect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(4)-Vue3中setup的两个注意点</title>
      <link href="/2022/09/17/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/"/>
      <url>/2022/09/17/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<h1 id="setup的两个注意点："><a href="#setup的两个注意点：" class="headerlink" title="setup的两个注意点："></a>setup的两个注意点：</h1><ul><li><p><strong><code>setup</code>执行的时机</strong></p><ul><li><strong>在<code>beforeCreate</code>之前执行一次，<code>this</code>是<code>undefined</code>。</strong></li></ul></li><li><p><strong><code>setup</code>的参数</strong></p><ul><li><strong><code>props</code>：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</strong></li><li><strong><code>context</code>：上下文对象</strong><ul><li><strong><code>attrs</code>: 值为对象，包含：组件外部传递过来，但没有在<code>props</code>配置中声明的属性, 相当于 <code>this.$attrs</code>。</strong></li><li><em><code>slots</code>: 收到的插槽内容, 相当于 <code>this.$slots</code>。</em>*</li><li><strong><code>emit</code>: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</strong></li></ul></li></ul></li></ul><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h2><ul><li><strong>父组件</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Demo</span> @<span class="attr">hello</span>=<span class="string">&quot;showHelloMsg&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;你好啊&quot;</span> <span class="attr">school</span>=<span class="string">&quot;五邑大学&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 由于兼容性问题，Vue3中推荐使用v-slot来指定插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:qwe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>五邑大学<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:asd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>五邑大学<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Demo</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Demo&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;<span class="title class_">Demo</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 自定义事件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">showHelloMsg</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好啊，你触发了hello事件，我收到的参数是:<span class="subst">$&#123;value&#125;</span>！`</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">showHelloMsg</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>子组件</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一个人的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test&quot;</span>&gt;</span>测试触发一下Demo组件的Hello事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">props</span>:[<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;school&#x27;</span>],<span class="comment">//这里生命接受父组件传过来的参数props</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">emits</span>:[<span class="string">&#x27;hello&#x27;</span>],<span class="comment">//这里声明接收父组件传过来的自定义事件</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---setup---&#x27;</span>,props)<span class="comment">//声明接收props</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//这里的context相当于vuex中的context,里面饱含着一些你可能会用到的方法及属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---setup---&#x27;</span>,context)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---setup---&#x27;</span>,context.<span class="property">attrs</span>) <span class="comment">//相当与Vue2中的$attrs</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---setup---&#x27;</span>,context.<span class="property">emit</span>) <span class="comment">//触发自定义事件的。</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---setup---&#x27;</span>,context.<span class="property">slots</span>) <span class="comment">//插槽</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//方法</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">emit</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">666</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">person,</span></span><br><span class="line"><span class="language-javascript">test</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/Vue3-4/1.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> setup&#39;Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(3)-Vue3中的响应式原理</title>
      <link href="/2022/09/16/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
      <url>/2022/09/16/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3中的响应式原理"><a href="#Vue3中的响应式原理" class="headerlink" title="Vue3中的响应式原理"></a>Vue3中的响应式原理</h1><h2 id="复习Vue2中的响应式原理"><a href="#复习Vue2中的响应式原理" class="headerlink" title="复习Vue2中的响应式原理"></a>复习Vue2中的响应式原理</h2><ul><li><p><strong>实现原理：</strong></p><ul><li><p><strong>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</strong></p></li><li><p><strong>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</strong></p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>存在问题：(这些问题Vue3中不复存在)</strong></p><ul><li><strong>新增属性、删除属性, 界面不会更新。</strong></li><li><strong>直接通过下标修改数组, 界面不会自动更新。</strong></li></ul></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue2中的响应式原理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;person.name&quot;</span>&gt;</span>姓名:&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄:&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;person.sex&quot;</span>&gt;</span>性别:&#123;&#123;person.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>爱好:&#123;&#123;person.hobby&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加sex属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;deleteName&quot;</span>&gt;</span>删除name属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeHobby&quot;</span>&gt;</span>修改第一个爱好的名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入Vue</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">person</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          age : <span class="string">&#x27;18&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">addSex</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">sex</span>);<span class="comment">//undefined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 常规方法添加一个属性(Vue2中无法实现响应式,但是在Vue3中可以)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法1:使用$set方法添加一个响应式属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">person</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法2:使用Vue.set方法添加一个响应式属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Vue.set(this.person,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">sex</span>);<span class="comment">//男</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">deleteName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">name</span>);<span class="comment">//张三</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 常规方法删除一个属性(Vue2中无法实现响应式,但是在Vue3中可以)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">name</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法1:使用$delete方法添加一个响应式属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$delete(<span class="variable language_">this</span>.<span class="property">person</span>,<span class="string">&#x27;name&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法2:使用Vue.delete方法添加一个响应式属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Vue.delete(this.person,&#x27;name&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">name</span>);<span class="comment">//undefined</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">changeHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>[<span class="number">0</span>]);<span class="comment">//抽烟</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用常规方法修改数组里面的参数(Vue2中无法实现响应式,但是在Vue3中可以)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&#x27;学习&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法1:使用$set方法修改数组里的参数实现响应式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>,<span class="number">0</span>,<span class="string">&#x27;学习&#x27;</span>)<span class="comment">//将数组中的第0个参数改为学习</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法2:使用数组中的splice方法修改数组里面的参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;学习&#x27;</span>)<span class="comment">//将数组中的第0个参数改为学习</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">hobby</span>[<span class="number">0</span>]);<span class="comment">//学习</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/Vue3-2/3.gif" alt="image"></p><h2 id="Vue3中的响应式原理-1"><a href="#Vue3中的响应式原理-1" class="headerlink" title="Vue3中的响应式原理"></a>Vue3中的响应式原理</h2><p><strong>实现原理:</strong></p><ul><li><strong>通过<code>Proxy</code>（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</strong></li><li><strong>通过<code>Reflect</code>（反射）:  对源对象的属性进行操作。</strong></li><li><strong>MDN文档中描述的Proxy与Reflect：</strong><ul><li><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a></strong></p></li><li><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">Reflect</a></strong></p></li></ul></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//源数据</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟Vue2中实现响应式</span></span><br><span class="line"><span class="comment">/* let p = &#123;&#125;</span></span><br><span class="line"><span class="comment">Object.defineProperty(p,&#x27;name&#x27;,&#123;</span></span><br><span class="line"><span class="comment">configurable:true,</span></span><br><span class="line"><span class="comment">get()&#123; //有人读取name时调用</span></span><br><span class="line"><span class="comment">return person.name</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">set(value)&#123; //有人修改name时调用</span></span><br><span class="line"><span class="comment">console.log(&#x27;有人修改了name属性，我发现了，我要去更新界面！&#x27;)</span></span><br><span class="line"><span class="comment">person.name = value</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">Object.defineProperty(p,&#x27;age&#x27;,&#123;</span></span><br><span class="line"><span class="comment">get()&#123; //有人读取age时调用</span></span><br><span class="line"><span class="comment">return person.age</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">set(value)&#123; //有人修改age时调用</span></span><br><span class="line"><span class="comment">console.log(&#x27;有人修改了age属性，我发现了，我要去更新界面！&#x27;)</span></span><br><span class="line"><span class="comment">person.age = value</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"><span class="comment">//#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟Vue3中实现响应式(实现响应式的增删改查)</span></span><br><span class="line"><span class="comment">// 底层使用的是windows身上的proxy(代理对象)和reflect(反射对象)实现的</span></span><br><span class="line"><span class="comment">//#region </span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person,&#123;</span><br><span class="line"><span class="comment">//[查]: 有人读取p的某个属性时调用</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params">target,propName</span>)&#123;<span class="comment">//target:源对象person,propName:目标属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人读取了p身上的<span class="subst">$&#123;propName&#125;</span>属性`</span>)</span><br><span class="line"><span class="comment">// return target[propName]//通过[变量名]的方式读取对象上的某个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规读取</span></span><br><span class="line"><span class="comment">// return target[propName]</span></span><br><span class="line"><span class="comment">// 框架当中的读取</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,propName)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//[增,改]: 有人修改p的某个属性、或给p追加某个属性时调用</span></span><br><span class="line"><span class="title function_">set</span>(<span class="params">target,propName,value</span>)&#123;<span class="comment">//target:源对象person,propName:目标属性,value:目标属性要修改的属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人修改了p身上的<span class="subst">$&#123;propName&#125;</span>属性，我要去更新界面了！`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规修改和增加</span></span><br><span class="line"><span class="comment">// target[propName] = value</span></span><br><span class="line"><span class="comment">// 框架当中的读取和修改</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,propName,value)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//[删]: 有人删除p的某个属性时调用</span></span><br><span class="line"><span class="title function_">deleteProperty</span>(<span class="params">target,propName</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人删除了p身上的<span class="subst">$&#123;propName&#125;</span>属性，我要去更新界面了！`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规删除</span></span><br><span class="line"><span class="comment">// return delete target[propName]</span></span><br><span class="line"><span class="comment">// 框架当中的属性删除</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,propName)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/Vue3-2/6.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object.defineProperty </tag>
            
            <tag> Vue3 </tag>
            
            <tag> Vue中的响应式 </tag>
            
            <tag> Proxy </tag>
            
            <tag> Reflect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(2)-vue3中的新特性:setup,ref函数,reactive函数</title>
      <link href="/2022/09/16/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2022/09/16/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h1><ol><li><strong>理解：<code>Vue3.0</code>中一个新的配置项，值为一个函数。</strong></li><li><strong><code>setup</code>是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</strong></li><li><strong>组件中所用到的：数据、方法、生命周期等等，均要配置在setup中。</strong></li><li><strong><code>setup</code>函数的两种返回值：</strong><ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li><strong>注意点：</strong><ol><li>尽量不要与<code>Vue2.x</code>配置混用<ul><li><code>Vue2.x</code>配置（<code>data、methos、computed...</code>）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在<code>setup</code>中<strong style="color:#DD5145">不能访问到</strong><code>Vue2.x</code>配置（<code>data、methos、computed...</code>）。</li><li>如果有重名, <code>setup</code>优先。</li></ul></li><li><code>setup</code>不能是一个<code>async</code>函数，因为返回值不再是<code>return</code>的对象, 而是<code>promise</code>, 模板看不到<code>return</code>对象中的属性。（后期也可以返回一个<code>Promise</code>实例，但需要<code>Suspense</code>和异步组件的配合）</li></ol></li></ol><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Vue3新特性,模板结构中引用多个组件不再需要根标签(可有可无) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>张三的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayHello&quot;</span>&gt;</span>Vue2方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>Vue3方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入 h </span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// import &#123; h &#125; from &#x27;@vue/runtime-core&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue3全新的配置项，以往vue2的配置项(data,methods等全部配置在setup里面)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//切记,这里展示不考虑响应式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue3的写法&#x27;</span>,<span class="string">&#x27;Hello! Vue3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 最后通过return 返回整个对象后,里面的属性模板可以直接使用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name,</span></span><br><span class="line"><span class="language-javascript">        age,</span></span><br><span class="line"><span class="language-javascript">        sayHi</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 也可以直接返回渲染函数,不过很少用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return () =&gt; h(&#x27;h1&#x27; , &#x27;wyu&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue3是向下兼容的,也可以使用Vue2的写法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue2的写法&#x27;</span>,<span class="string">&#x27;Hello! Vue2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><ul><li><strong>1.使用渲染函数返回值(<code>return () =&gt; h(&#39;模板&#39; , &#39;值&#39;)</code>)</strong><br><img src="/../upload/Vue/Vue3-1/1.png" alt="image"></li><li><strong>2.使用对象返回值</strong><br><img src="/../upload/Vue/Vue3-1/2.png" alt="image"><br><img src="/../upload/Vue/Vue3-1/3.png" alt="image"></li></ul><h1 id="2-ref函数-与vue2中的ref属性是不一样的"><a href="#2-ref函数-与vue2中的ref属性是不一样的" class="headerlink" title="2.ref函数(与vue2中的ref属性是不一样的)"></a>2.ref函数(与vue2中的ref属性是不一样的)</h1><ul><li><strong>作用: 定义一个响应式的数据</strong></li><li><strong>语法: <code>const xxx = ref(initValue)</code></strong> <ul><li><strong>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</strong></li><li><strong>JS中操作数据： <code>xxx.value</code></strong></li><li><strong>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></strong></li></ul></li><li><strong>备注：</strong><ul><li><strong>接收的数据可以是：基本类型、也可以是对象类型。</strong></li><li><strong>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</strong></li><li><strong>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</strong></li></ul></li></ul><h2 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Vue3新特性,模板结构中引用多个组件不再需要根标签(可有可无) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>张三的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- (ref函数)模板中读取数据: 不需要.value,直接调属性名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>工作种类:&#123;&#123;job.type&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>薪水:&#123;&#123;job.salary&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeInfo&quot;</span>&gt;</span>更改信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入ref函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue3全新的配置项，以往vue2的配置项(data,methods等全部配置在setup里面)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这里的变量赋值不能写死(响应式是依靠ref函数来实现的)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// let name = &#x27;张三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// let age = 18</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 正确写法(基本数据类型)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;张三&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">18</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 对象数据类型</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> job = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>:<span class="string">&#x27;前端工程师&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">salary</span>: <span class="number">1000</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//切记,这里是使用的是ref读取的对象,所以要加.value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name , age , job.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 因为ref函数返回的是一个引用实现对象,所以现有修改引用实现对象里面的值就需要使用.value</span></span></span><br><span class="line"><span class="language-javascript">        name.<span class="property">value</span> = <span class="string">&#x27;李四&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        age.<span class="property">value</span> = <span class="string">&#x27;20&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//实现对象的ref函数修改,返回的是proxy对象,不再是refimp对象 </span></span></span><br><span class="line"><span class="language-javascript">        job.<span class="property">value</span>.<span class="property">type</span> = <span class="string">&#x27;泥水匠&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        job.<span class="property">value</span>.<span class="property">salary</span> = <span class="number">2000</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 最后通过return 返回整个对象后,里面的属性模板可以直接使用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name,</span></span><br><span class="line"><span class="language-javascript">        age,</span></span><br><span class="line"><span class="language-javascript">        job,</span></span><br><span class="line"><span class="language-javascript">        changeInfo</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/Vue3-1/1.gif" alt="image"><br><img src="/../upload/Vue/Vue3-1/4.png" alt="image"></p><h1 id="3-reactive函数-相较于ref读取对象更为方便简单"><a href="#3-reactive函数-相较于ref读取对象更为方便简单" class="headerlink" title="3. reactive函数(相较于ref读取对象更为方便简单)"></a>3. reactive函数(相较于ref读取对象更为方便简单)</h1><ul><li><strong>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</strong></li><li><strong>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></strong></li><li><strong>reactive定义的响应式数据是“深层次的”(即无论你的对象里面嵌套多少个对象,都可以读取到)。</strong></li><li><strong>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</strong></li></ul><h2 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一个人的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里读取reactive函数封装的对象属性时更加语义化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>工作种类：&#123;&#123;person.job.type&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>工作薪水：&#123;&#123;person.job.salary&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好：&#123;&#123;person.hobby&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>测试的数据c：&#123;&#123;person.job.a.b.c&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeInfo&quot;</span>&gt;</span>修改人的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入reactive函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数据(相较于ref函数一个一个的读取属性,reactive函数将变量封装成一个对象,更加简洁)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">job</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>:<span class="string">&#x27;前端工程师&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">salary</span>:<span class="string">&#x27;30K&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// reactive函数是深层次的读取,无论你对象套的有多深</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">a</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">b</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">c</span>:<span class="number">666</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// reactive函数还可以读取和修改数组</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//方法</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用reactive函数修改响应式属性时不再需要.value</span></span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">age</span> = <span class="number">48</span></span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">job</span>.<span class="property">type</span> = <span class="string">&#x27;泥水匠&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">job</span>.<span class="property">salary</span> = <span class="string">&#x27;2000&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">job</span>.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span> = <span class="number">999</span></span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&#x27;学习&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用ref函数修改属性时</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// person.value.属性(过于复杂)</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  person,</span></span><br><span class="line"><span class="language-javascript">  changeInfo</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/Vue3-1/2.gif" alt="image"><br><img src="/../upload/Vue/Vue3-1/5.png" alt="image"></p><h1 id="reactive对比ref-实际开发中-reactive用得较多"><a href="#reactive对比ref-实际开发中-reactive用得较多" class="headerlink" title="reactive对比ref(实际开发中,reactive用得较多)"></a>reactive对比ref(实际开发中,reactive用得较多)</h1><ul><li><strong>从定义数据角度对比：</strong><ul><li><strong><code>ref</code>用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</strong></li><li><strong><code>reactive</code>用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</strong></li><li><strong>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</strong></li></ul></li><li><strong>从原理角度对比：</strong><ul><li><strong><code>ref</code>通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</strong></li><li><strong><code>reactive</code>通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</strong></li></ul></li><li><strong>从使用角度对比：</strong><ul><li><strong><code>ref</code>定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</strong></li><li><strong><code>reactive</code>定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> setup </tag>
            
            <tag> ref函数 </tag>
            
            <tag> reactive函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记(1)-初识Vue3</title>
      <link href="/2022/09/16/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
      <url>/2022/09/16/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3初识介绍"><a href="#Vue3初识介绍" class="headerlink" title="Vue3初识介绍"></a><code>Vue3</code>初识介绍</h1><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.<code>Vue3</code>简介</h2><ul><li><strong>2020年9月18日，<code>Vue.js</code>发布3.0版本，代号：<code>One Piece（海贼王）</code></strong></li><li><strong>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a></strong></li><li><strong><a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">github上的tags地址</a></strong></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.<code>Vue3</code>带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p><strong>打包大小减少<code>41%</code></strong></p></li><li><p><strong>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code></strong></p></li><li><p><strong>内存减少<code>54%</code></strong></p><p><strong>等……</strong></p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p><strong>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式</strong></p></li><li><p><strong>重写<code>虚拟DOM</code>的实现和<code>Tree-Shaking</code></strong></p><p><strong>……</strong></p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱<code>TypeScript</code></h3><ul><li><strong><code>Vue3</code>可以更好的支持<code>TypeScript</code></strong></li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><strong><code>Composition API</code>（组合API）</strong><ul><li><strong><code>setup</code>配置</strong></li><li><strong><code>ref</code>与reactive&#96;</strong></li><li><strong><code>watch</code>与<code>watchEffect</code></strong></li><li><strong><code>provide</code>与<code>inject</code></strong></li><li><strong>……</strong></li></ul></li><li><strong>新的内置组件</strong><ul><li><strong><code>Fragment</code></strong></li><li><strong><code>Teleport</code></strong></li><li><strong><code>Suspense</code></strong></li></ul></li><li><strong>其他改变</strong><ul><li><strong>新的生命周期钩子</strong></li><li><strong><code>data</code> 选项应始终被声明为一个函数(<code>Vue2</code>中可以被设置成一个对象或方法)</strong></li><li><strong>移除<code>keyCode</code>支持作为 <code>v-on</code> 的修饰符(即不能再使用类似<code>@keyup.13</code>这种写法了!)</strong></li><li><strong>……</strong></li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><ul><li><strong><a href="**%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%9Ahttps://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create**">官方文档</a></strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-分析工程结构"><a href="#2-分析工程结构" class="headerlink" title="2.分析工程结构"></a>2.分析工程结构</h2><ul><li><strong><code>main.js</code>(对比Vue2)</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里不再是引入vue构造函数了，引入的是一个名为createApp的工厂函数(不再需要通过调用new实例来调用)</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入所有组件的父组件app</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建应用实例对象-app(类似于Vue2中的vm,但是app比vm更&quot;轻&quot;,圣上没有那么多方法和属性了)</span></span><br><span class="line"><span class="comment">// createApp(App).mount(&#x27;#app&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整写法</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(app);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载:mounte(&#x27;组件id&#x27;)</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载:unmounte(&#x27;组件&#x27;id)</span></span><br><span class="line"><span class="comment">// setTimeout(()=&gt;&#123;//设置延时1s卸载</span></span><br><span class="line"><span class="comment">//     app.unmount(&#x27;#app&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;,1000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue2写法(Vue3中不再支持这种写法)</span></span><br><span class="line"><span class="comment">// const vm = new Vue(&#123;</span></span><br><span class="line"><span class="comment">//     render:h =&gt; h(App)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// vm.$mounte(&#x27;#app&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><strong><code>App.vue</code></strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Vue3新特性,模板结构中引用多个组件不再需要根标签(可有可无) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HelloWorld</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie学习(js-cookie)</title>
      <link href="/2022/09/15/Cookie%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/15/Cookie%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie-js的基本使用"><a href="#Cookie-js的基本使用" class="headerlink" title="Cookie-js的基本使用:"></a><code>Cookie-js</code>的基本使用:</h1><h2 id="什么是cookie-为什么需要cookie"><a href="#什么是cookie-为什么需要cookie" class="headerlink" title="什么是cookie?为什么需要cookie"></a>什么是<code>cookie</code>?为什么需要<code>cookie</code></h2><ul><li><strong><code>cookie</code>的中文翻译是饼干的意思, 所谓<code>cookie</code>其实就是一些数据的信息,是一种保存在客户端(我们的电脑)的纯文本文件,当我们使用自己的电脑通过浏览器进行网页的访问的时候,服务器就会生成一个证书返回给我们的浏览器并写入我们的本地电脑,这个证书就是<code>cookie</code></strong></li><li><strong><code>cookie</code>最常用在记录用户的登录信息当中,假设我们正在浏览一个网站,网站的信息需要我们登录了才能观看,但我们进行了登陆操作后,浏览器会把我们填写的用户名和密码按照固定的格式发送给服务器,待服务器验证无误后,就会把我们请求的内容返回给我们的浏览器,这时我们就能查看到刚刚请求的页面了,但是要知道http协议是<code>无状态协议</code>,换而言之就是服务器并不会记录我们的登陆状态,因此当我们请求同一个网站的另一个页面时, 服务器会要求我们重新登陆, 这时你就会很崩溃,因为你在同一个网站点击一下, 浏览器就会叫你重新登陆!!! 但是现实生活中,这种情况并不会发生, 通常我们在同一个网站登录一次过后, 很长一段时间都不需要再次登录, 这就要归功于<code>cookie</code>了!</strong></li><li><strong><code>cookie</code>出现后,浏览器就有了记忆, 浏览器在收到服务器返回的页面时, 也会得到一个<code>cookie</code>,其中存放着我们的专属<code>id</code>也就是后面的<code>tooken</code>,浏览器会保存这个<code>cookie</code>,并且每一次请求同一个网站时,请求中都会附带这个记录着我们信息的<code>cookie</code>,这样服务器在收到请求后,可以通过<code>cookie</code>中的<code>id</code>,来辨别我们是谁,获取到我们的登陆状态! 不仅如此,<code>cookie</code>还能记录各种各样的信息, 例如我们使用的语言, 购物车中的商品 , 点击过的链接等…. 具体会记录哪些信息取决于网站本身。</strong></li></ul><h2 id="js-cookie是什么？"><a href="#js-cookie是什么？" class="headerlink" title="js-cookie是什么？"></a>js-cookie是什么？</h2><ul><li><strong><code>js-cookie</code>是一个简单的,轻量级的处理<code>cookies</code>的js <code>API</code>，用来处理<code>cookie</code>相关的插件</strong></li><li><strong><a href="https://www.npmjs.com/package/js-cookie">js-cookie官网</a></strong></li></ul><h3 id="js-cookie的使用方法"><a href="#js-cookie的使用方法" class="headerlink" title="js-cookie的使用方法:"></a><strong><code>js-cookie</code>的使用方法:</strong></h3><ol><li><strong>首先安装<code>js-cookie</code></strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save js-cookie</span><br></pre></td></tr></table></figure></li><li><strong>引入</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Cookies</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br></pre></td></tr></table></figure></li><li><strong><code>js-cookie</code>的添加 获取 删除</strong><ul><li><strong>添加<code>cookie</code></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个名称为name，对应值为value的cookie，由于没有设置失效时间，默认失效时间为该网站关闭时</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(name, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个有效时间为7天的cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(name, value, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个带有路径的cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(name, value, &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个value为对象的cookie</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;ryan&#x27;</span> &#125;</span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;user&#x27;</span>, obj)</span><br></pre></td></tr></table></figure></li><li><strong>获取<code>cookie</code></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取指定名称的cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(name) <span class="comment">// value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取value为对象的cookie</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;ryan&#x27;</span> &#125;</span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;user&#x27;</span>, obj)</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;user&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>()</span><br></pre></td></tr></table></figure></li><li><strong>删除<code>cookie</code></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除指定名称的cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(name) <span class="comment">// value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除带有路径的cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(name, value, &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(name, &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Cookie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MocK.Random的常见用法</title>
      <link href="/2022/09/14/MocK-Random%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/"/>
      <url>/2022/09/14/MocK-Random%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="模拟Web数据："><a href="#模拟Web数据：" class="headerlink" title="模拟Web数据："></a>模拟Web数据：</h1><ul><li><strong>生成随机域名(每次运行结果不同)：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">domain</span>()  <span class="comment">//   &quot;nhou.org.cn&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>生成随机IP(每次运行结果不同)</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">ip</span>()   <span class="comment">//  &quot;74.97.41.159&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>生成随机URL(每次运行结果不同)</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">url</span>()  <span class="comment">//   &quot;news://wrmt.na/rbcgbws&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="模拟地理位置数据："><a href="#模拟地理位置数据：" class="headerlink" title="模拟地理位置数据："></a>模拟地理位置数据：</h1><ul><li><strong>生成随机省份：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">province</span>()  <span class="comment">//&quot;海南省&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>生成随机城市：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">city</span>()   <span class="comment">// &quot;澳门半岛&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>生成在某个省份的某个城市：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">city</span>(<span class="literal">true</span>) <span class="comment">// &quot;广东省 广州市&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="模拟文本数据："><a href="#模拟文本数据：" class="headerlink" title="模拟文本数据："></a>模拟文本数据：</h1><ul><li><strong>生成一条随机的中文句子：(默认一条句子里的汉字个数在12和18之间)</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">csentence</span>()   <span class="comment">//  &quot;会候权以解包党心要按总场火义国而片精。&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>通过<code>Random.csentence( length )</code>指定句子的汉字个数：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Random</span>.<span class="title function_">csentence</span>(<span class="number">5</span>)  <span class="comment">// &quot;文斗领拉米。&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>通过<code>Random.csentence( min?, max? )</code>指定句子汉字个数的范围：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Random</span>.<span class="title function_">csentence</span>(<span class="number">3</span>, <span class="number">5</span>)  <span class="comment">// &quot;住验住&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>生成随机的中文段落：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">cparagraph</span>()  </span><br><span class="line"><span class="comment">// &quot;电力速率离老五准东其引是外适只王。体区先手天里己车发很指一照委争本。究利天易里根干铁多而提造干下志维。级素一门件一压路低表且太马。&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意:<code>cparagraph</code>可以看作是多条<code>csentence</code>以逗号连接后的字符串，默认条数为 3 到 7条<code>csentence</code>通过<code>Random.cparagraph(length )</code></strong></li></ul></li><li><strong>指定句子的个数</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Random</span>.<span class="title function_">cparagraph</span>(<span class="number">2</span>) </span><br><span class="line"><span class="comment">// “而易除应精基还主局按选际复格从导。天第们国分比积造业王该回过白亲。”</span></span><br></pre></td></tr></table></figure></li><li><strong>通过<code>Random.cparagraph(min?, max?）</code>指定句子的个数的范围：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Random</span>.<span class="title function_">cparagraph</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// “作养装军头确应当号天革来人车号把文。证细专物转民相解状律极或经较把马。其省级支际标业强龙算建物况。”</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="模拟颜色数据："><a href="#模拟颜色数据：" class="headerlink" title="模拟颜色数据："></a>模拟颜色数据：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Random</span> = <span class="title class_">Mock</span>.<span class="property">Random</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">rgba</span>()  <span class="comment">// &quot;rgba(122, 121, 242, 0.13)&quot;</span></span><br></pre></td></tr></table></figure><h1 id="模拟日期-x2F-时间数据："><a href="#模拟日期-x2F-时间数据：" class="headerlink" title="模拟日期&#x2F;时间数据："></a>模拟日期&#x2F;时间数据：</h1><ul><li><strong>日期：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Random</span>.<span class="title function_">date</span>(<span class="string">&#x27;yyyy-MM-dd&#x27;</span>)  <span class="comment">// &quot;1975-04-27&quot;</span></span><br><span class="line"><span class="title class_">Random</span>.<span class="title function_">date</span>(<span class="string">&#x27;yy-MM-dd&#x27;</span>)    <span class="comment">//   &quot;00-01-08&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>时间：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Random</span>.<span class="title function_">time</span>()   <span class="comment">// &quot;05:06:06&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>模拟图片：(不指定参数则取随机的宽高并显示对应的宽高数据)</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Random</span>.<span class="title function_">image</span>(<span class="string">&#x27;200x100&#x27;</span>, <span class="string">&#x27;#4A7BF7&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="模拟姓名数据："><a href="#模拟姓名数据：" class="headerlink" title="模拟姓名数据："></a>模拟姓名数据：</h1><ul><li><strong>模拟全名：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Random</span>.<span class="title function_">cname</span>()   <span class="comment">// &quot;黄秀英&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>模拟姓氏：</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Random</span>.<span class="title function_">cfirst</span>()   <span class="comment">// &quot;龙&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>模拟名字:</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Random</span>.<span class="title function_">clast</span>()  <span class="comment">// &quot;秀英&quot;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这篇博客引用了作者为”<strong>自由的音符</strong>“的文章<br>原文链接为:<a href="https://blog.csdn.net/weCat_s/article/details/104415610">CSDN</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Mock </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mock </tag>
            
            <tag> Mock.random常见用法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式复习(2)</title>
      <link href="/2022/09/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%8D%E4%B9%A02/"/>
      <url>/2022/09/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%8D%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式的限定符"><a href="#正则表达式的限定符" class="headerlink" title="正则表达式的限定符"></a>正则表达式的限定符</h1><ul><li><strong>写在<code>普通元字符</code>或<code>字符符号</code>的后面修饰前面 <strong>一个符号</strong> 出现的<code>次数</code></strong><ul><li><strong>1、<code>* </code> 表示出现 0 ~ 多次（包括0次）</strong></li><li><strong>2、<code>+ </code> 表示出现 1 ~ 多次（包括1次）</strong></li><li><strong>3、<code>?</code>  表示出现 0 ~ 1次（包括0次）</strong></li><li><strong>4、<code>&#123;n&#125;</code>  表示出现 n 次（包括n次）</strong></li><li><strong>5、<code>&#123;n,&#125;</code>  表示出现 n ~ 多次（包括n次）</strong><ul><li><strong>&#x3D;&gt;<code>&#123;0,&#125;</code> 等价于 <code>*</code></strong></li><li><strong>&#x3D;&gt;<code>&#123;1,&#125;</code> 等价于 <code>+</code></strong></li></ul></li><li><strong>6、<code>&#123;n,m&#125;</code>  表示出现 n ~ m（包括n次）</strong><ul><li><strong>&#x3D;&gt;<code>&#123;0,1&#125;</code> 等价于 <code>?</code></strong></li></ul></li></ul></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、 *</span></span><br><span class="line"><span class="comment">// 表示你的字符串里面需要出现一个 0 ~ 多个 的数字组成的片段</span></span><br><span class="line"><span class="comment">// 即只要出现了数字就符合要求,不出现也算，0次</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="regexp">/\d*/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">test</span>(<span class="string">&#x27;1hdjkha&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示你的字符串只能由 0 ~ 多个数字组成</span></span><br><span class="line"><span class="keyword">const</span> res1 = <span class="regexp">/^\d*$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">//ture 0次也算   </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="title function_">test</span>(<span class="string">&#x27;212131&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="title function_">test</span>(<span class="string">&#x27;2132sssk&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、 +</span></span><br><span class="line"><span class="comment">// 表示你的字符串里面需要出现一个 1 ~ 多个 的数字组成的片段</span></span><br><span class="line"><span class="comment">// 即只要出现了一个数字就符合要求</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">test</span>(<span class="string">&#x27;1hdjkha&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示你的字符串只能由 0 ~ 多个数字组成</span></span><br><span class="line"><span class="keyword">const</span> a1 = <span class="regexp">/^\d+$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">//false  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1.<span class="title function_">test</span>(<span class="string">&#x27;212131&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1.<span class="title function_">test</span>(<span class="string">&#x27;2132sssk&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、 ?</span></span><br><span class="line"><span class="comment">// 表示你的字符串里面需要出现一个 0 ~ 1个 的数字组成的片段</span></span><br><span class="line"><span class="comment">// 即只要出现了数字就符合要求,不出现也算，0次</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="regexp">/\d?/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">test</span>(<span class="string">&#x27;121hdjkha&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示你的字符串只能由3个数字组成</span></span><br><span class="line"><span class="keyword">const</span> b1 = <span class="regexp">/^\d?$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b1.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">//true  0个数字组成</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b1.<span class="title function_">test</span>(<span class="string">&#x27;2&#x27;</span>));<span class="comment">//ture 1个数子组成</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b1.<span class="title function_">test</span>(<span class="string">&#x27;2132sssk&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、 &#123;n&#125;</span></span><br><span class="line"><span class="comment">// 表示你的字符串里面需要出现一个 n个 的数字组成的片段</span></span><br><span class="line"><span class="comment">// 即只要出现了n个数字组成的片段就符合要求</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="regexp">/\d&#123;3&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="title function_">test</span>(<span class="string">&#x27;1hd123jkha&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示你的字符串只能由 3个数字组成</span></span><br><span class="line"><span class="keyword">const</span> c1 = <span class="regexp">/^\d&#123;3&#125;$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">//false   </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="title function_">test</span>(<span class="string">&#x27;212&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="title function_">test</span>(<span class="string">&#x27;2132sssk&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、 &#123;n,&#125;</span></span><br><span class="line"><span class="comment">// 表示你的字符串里面需要出现一个 n个以上 的数字组成的片段,(包括n个)</span></span><br><span class="line"><span class="comment">// 即只要出现了n个数字或以上组成的片段就符合要求</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="regexp">/\d&#123;3,&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="title function_">test</span>(<span class="string">&#x27;1hd123jkha&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示你的字符串只能由 3个数字组成</span></span><br><span class="line"><span class="keyword">const</span> d1 = <span class="regexp">/^\d&#123;3,&#125;$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d1.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">//false   </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d1.<span class="title function_">test</span>(<span class="string">&#x27;212&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d1.<span class="title function_">test</span>(<span class="string">&#x27;2132&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、 &#123;n,m&#125;</span></span><br><span class="line"><span class="comment">// 表示你的字符串里面需要出现一个 n ~ m 个数字组成的片段,(包括n个)</span></span><br><span class="line"><span class="comment">// 即只要出现了n ~ m 个数字或以上组成的片段就符合要求</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="regexp">/\d&#123;3,6&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">test</span>(<span class="string">&#x27;1hd123jkha&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示你的字符串只能由 3个数字组成</span></span><br><span class="line"><span class="keyword">const</span> f1 = <span class="regexp">/^\d&#123;3,6&#125;$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">//false   </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">test</span>(<span class="string">&#x27;212&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">test</span>(<span class="string">&#x27;213212131321&#x27;</span>));<span class="comment">//false 超过范围</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/zhengze/7.png" alt="image"></p><h1 id="正则表达式验证数字范围"><a href="#正则表达式验证数字范围" class="headerlink" title="正则表达式验证数字范围"></a>正则表达式验证数字范围</h1><ul><li><strong>一般不用正则表达式来验证数字范围，因为过于复杂，逻辑过于难懂</strong></li></ul><h2 id="这里就展示一下验证逻辑"><a href="#这里就展示一下验证逻辑" class="headerlink" title="这里就展示一下验证逻辑"></a>这里就展示一下验证逻辑</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    正则验证数字范围</span></span><br><span class="line"><span class="comment">     验证：0-255</span></span><br><span class="line"><span class="comment">     思路：</span></span><br><span class="line"><span class="comment">      =》把 0 - 255 的数字分成几类</span></span><br><span class="line"><span class="comment">      =》一位数                          \d          0-9</span></span><br><span class="line"><span class="comment">      =》两位数                          \d&#123;2&#125;       10-99</span></span><br><span class="line"><span class="comment">      =》1 开头的三位数                   1\d&#123;2&#125;      100-199</span></span><br><span class="line"><span class="comment">      =》2 开头的 十位位0-4的三位数       2[0-4]\d    200-249</span></span><br><span class="line"><span class="comment">      =》2 开头 5位十位的三位数           25[0-5]     250-255</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    正则：</span></span><br><span class="line"><span class="comment">     =》/^(\d|\d&#123;2&#125;|1\d&#123;2&#125;|2[0-4]\d|25[0-5])$/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/^(\d|\d&#123;2&#125;|1\d&#123;2&#125;|2[0-4]\d|25[0-5])$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;5&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;56&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;156&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;234&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;255&#x27;</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/zhengze/8.png" alt="image"></p><h1 id="正则的贪婪和非贪婪性"><a href="#正则的贪婪和非贪婪性" class="headerlink" title="正则的贪婪和非贪婪性"></a>正则的贪婪和非贪婪性</h1><ul><li><strong>正则的贪婪性(默认)与非贪婪性</strong><ul><li><strong><code>贪婪性</code>:</strong><ul><li><strong>当你给一个符号使用限定符的时候,在你捕获的时候,它会尽可能的多去捕获内容,我们管这个特性叫做正则的贪婪特性</strong></li></ul></li><li><strong><code>非贪婪性</code></strong><ul><li><strong>正则在捕获的时候尽可能的按照最小值来捕获,在写限定符的时候,在后面多加一个 ?</strong></li></ul></li></ul></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 贪婪性例子</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="comment">// 在捕获的时候他会捕获它能够捕获的最大长度,就是 &#x27;121231231&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">exec</span>(<span class="string">&#x27;abc121231231abc&#x27;</span>));<span class="comment">//[&#x27;121231231&#x27;, index: 3, input: &#x27;abc121231231abc&#x27;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非贪婪性例子</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="regexp">/\d*?/</span>;</span><br><span class="line"><span class="comment">// 在捕获的时候他会捕获它能够捕获的最大长度,就是 &#x27;&#x27;,包括0个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">exec</span>(<span class="string">&#x27;abc121231231abc&#x27;</span>));<span class="comment">//[&#x27;&#x27;, index: 0, input: &#x27;abc121231231abc&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">exec</span>(<span class="string">&#x27;121231231abc&#x27;</span>));<span class="comment">//</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/zhengze/9.png" alt="image"></p><h1 id="正则的预查"><a href="#正则的预查" class="headerlink" title="正则的预查"></a>正则的预查</h1><ul><li><strong>1、正向预查</strong><ul><li><strong><code>=》</code>正向肯定预查</strong><ul><li><strong><code>-&gt;</code> 当我们在捕获一个内容时，后面必须跟着的是我选择的某一个才可以</strong></li><li><strong><code>-&gt;</code> 符号(?&#x3D;)</strong></li></ul></li><li><strong><code>=》</code>正向否定预查</strong><ul><li><strong><code>-&gt;</code> 当我们在捕获一个内容时，后面必须跟着的不是我选择的某一个才可以</strong></li><li><strong><code>-&gt;</code> 符号(?!)</strong></li></ul></li></ul></li><li><strong>2、负向预查</strong><ul><li><strong><code>=》</code>负向肯定预查</strong><ul><li><strong><code>-&gt;</code> 当我们在捕获一个内容时，前面必须跟着的是我选择的某一个才可以</strong></li><li><strong><code>-&gt;</code> 符号(?&lt;&#x3D;)</strong></li></ul></li><li><strong><code>=》</code>负向否定预查</strong><ul><li><strong><code>-&gt;</code> 当我们在捕获一个内容时，前面必须跟着的不是我选择的某一个才可以</strong></li><li><strong><code>-&gt;</code> 符号(?&lt;!)</strong></li></ul></li></ul></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例子：&#x27;ES2015 ES2016 ES2017&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、正向肯定预查(我要捕获后面必须写着的是2015或者2016的ES)</span></span><br><span class="line"><span class="keyword">const</span> a1 = <span class="regexp">/ES(?=2015|2016)/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1.<span class="title function_">exec</span>(<span class="string">&#x27;ES2015&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1.<span class="title function_">exec</span>(<span class="string">&#x27;ES2016&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1.<span class="title function_">exec</span>(<span class="string">&#x27;ES2017&#x27;</span>));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、正向否定预查(我要捕获后面不能写着的是2015或者2016的ES)</span></span><br><span class="line"><span class="keyword">const</span> a2 = <span class="regexp">/ES(?!2015|2016)/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2.<span class="title function_">exec</span>(<span class="string">&#x27;ES2015&#x27;</span>));<span class="comment">//null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2.<span class="title function_">exec</span>(<span class="string">&#x27;ES2016&#x27;</span>));<span class="comment">//null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2.<span class="title function_">exec</span>(<span class="string">&#x27;ES2017&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、负向肯定预查(我要捕获前面必须写着的是2015或者2016的ES)</span></span><br><span class="line"><span class="keyword">const</span> a3 = <span class="regexp">/(?&lt;=2015|2016)ES/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3.<span class="title function_">exec</span>(<span class="string">&#x27;2015ES&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3.<span class="title function_">exec</span>(<span class="string">&#x27;2016ES&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3.<span class="title function_">exec</span>(<span class="string">&#x27;2017ES&#x27;</span>));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、负向否定预查(我要捕获前面必须写着的是2015或者2016的ES)</span></span><br><span class="line"><span class="keyword">const</span> a4 = <span class="regexp">/(?&lt;!2015|2016)ES/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a4.<span class="title function_">exec</span>(<span class="string">&#x27;2015ES&#x27;</span>));<span class="comment">//null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a4.<span class="title function_">exec</span>(<span class="string">&#x27;2016ES&#x27;</span>));<span class="comment">//null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a4.<span class="title function_">exec</span>(<span class="string">&#x27;2017ES&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/zhengze/10.png" alt="image"><br><img src="/../upload/zhengze/11.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式复习(1)</title>
      <link href="/2022/09/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/09/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是<code>正则表达式</code>？</h1><ul><li><strong><code>正则表达式</code>也叫<code>规则表达式</code>,是一个复杂的数据类型：<code>object</code></strong></li></ul><h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><ul><li><strong>1、专门用于验证<code>字符串</code>是否符合规则</strong></li><li><strong>2、从<code>字符串</code>中获取一部分符合规则的内容</strong></li></ul><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><ul><li><strong><code>=》</code>使用一些<code>特定的符号</code>来组合成一个表达式</strong></li><li><strong><code>=》</code>使用这个表达式去<code>验证字符串</code>，或者从字符串里面获取一些内容</strong></li></ul><h2 id="创建正则表达式的两种方式"><a href="#创建正则表达式的两种方式" class="headerlink" title="创建正则表达式的两种方式:"></a>创建正则表达式的两种方式:</h2><ul><li><strong>1、以字面量创建</strong></li><li><strong>2、内置构造函数创建</strong></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、以字面量创建</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="regexp">/abcd/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">///abcd/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);<span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、内置构造函数创建</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">// /abcd/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 意义:字符串里面包含一段&#x27;abcd&#x27;,字母即可，切记是一段字符串</span></span><br><span class="line">    <span class="comment">// =》aabbccdd  不包含&#x27;abcd&#x27;</span></span><br><span class="line">    <span class="comment">// =》aaabcdd   包含&#x27;abcd&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/zhengze/1.png" alt="image"></p><h1 id="正则表达式的边界元字符"><a href="#正则表达式的边界元字符" class="headerlink" title="正则表达式的边界元字符"></a>正则表达式的边界元字符</h1><ul><li><strong>1、 <code>^</code> ：表示字符串的开始 (写在转义符 <code>\</code> 的前面)</strong></li><li><strong>2、 <code>$</code> ：表示字符串结束   (写在基础元字符的后面 例：<code>\d$</code>)</strong></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、 ^</span></span><br><span class="line"><span class="comment">// 表示你的字符串需要以一个数字开头</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="regexp">/^\d/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">test</span>(<span class="string">&#x27;asxd12131&#x27;</span>));<span class="comment">//false 因为这个字符串没有以数字开头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">test</span>(<span class="string">&#x27;1sgskjhgka&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2、 $</span></span><br><span class="line"><span class="comment">// 表示你的字符串需要以一个数字结尾</span></span><br><span class="line"><span class="keyword">const</span> res1 = <span class="regexp">/\d$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="title function_">test</span>(<span class="string">&#x27;asxd12131bhsb&#x27;</span>));<span class="comment">//false 因为这个字符串没有以数字结尾</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="title function_">test</span>(<span class="string">&#x27;1sgskjhgka123&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特例：表示你的字符串从开头到结尾只能有一个数字</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="regexp">/^\d$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">test</span>(<span class="string">&#x27;2&#x27;</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/zhengze/2.png" alt="image"></p><h1 id="正则表达式的基础元字符"><a href="#正则表达式的基础元字符" class="headerlink" title="正则表达式的基础元字符"></a>正则表达式的基础元字符</h1><ul><li><p><strong>元字符：组成正则表达式的基本符号</strong></p><ul><li><strong><code>=》</code>以符号的形式来代替文本内容</strong></li><li><strong><code>=》</code>把所有的文本内容归结成一些符号来代替</strong></li></ul></li><li><p><strong>1、<code>\s</code>   表示一个空格(只需有一个空格即可)</strong></p></li><li><p><strong>2、<code>\S</code>   表示一个非空格(只需有一个非空格即可)</strong></p></li><li><p><strong>3、<code>\t</code>   表示一个制表符(即我们常常按的tab键)</strong></p></li><li><p><strong>4、<code>\d</code>   表示一个数字(只需要有一个数字即可)</strong></p></li><li><p><strong>5、<code>\D</code>   表示一个非数字(即检测的字符串里面不能全是数字)</strong></p></li><li><p><strong>6、<code>\w</code>   表示 数字 字母 下划线都可以</strong></p><ul><li><strong>&#x3D;》数字 字母 下划线 这三个当中选一个要有</strong></li></ul></li><li><p><strong>7、<code>\W</code>   表示 数字 字母 下划线以外</strong></p><ul><li><strong>&#x3D;》数字 字母 下划线以外任意一个都行</strong></li></ul></li><li><p><strong>8、<code>(.)</code>  表示非换行内容(即要检测的内容当中需要有一个非换行内容，就是不能全是换行内容)</strong></p></li><li><p><strong>9、<code>\(单个\)</code> 表示转义符</strong></p><ul><li><strong>&#x3D;》把没有意义的内容转换成有意义的内容</strong></li><li><strong>&#x3D;》把有意义的内容转换成没有意义的内容</strong></li></ul></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、 \s</span></span><br><span class="line"><span class="comment">// 表示字符串里面需要有一个 空格 字符</span></span><br><span class="line"><span class="keyword">const</span> reg =  <span class="regexp">/\s/</span>;<span class="comment">//  相当于 / /</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaabbbcccddd&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaab b b c ccddd&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、 \S</span></span><br><span class="line"><span class="comment">// 表示字符串里面需要有一个 非空格 字符</span></span><br><span class="line"><span class="keyword">const</span> res =  <span class="regexp">/\S/</span>;<span class="comment">//  相当于 /非空格/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">test</span>(<span class="string">&#x27;aaabbbcccddd&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">test</span>(<span class="string">&#x27;  &#x27;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、 \t</span></span><br><span class="line"><span class="comment">// 表示字符串里面需要有一个 制表符(tab) 字符</span></span><br><span class="line"><span class="keyword">const</span> res1 =  <span class="regexp">/\t/</span>;<span class="comment">//  相当于 /  /里面其实不是空格键，是tab</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="title function_">test</span>(<span class="string">&#x27;aaabbbcccddd&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="title function_">test</span>(<span class="string">&#x27; &#x27;</span>));<span class="comment">//false 这里是一个空格键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">//true  这里是一个tab键(一个制表符)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、 \d</span></span><br><span class="line"><span class="comment">// 表示字符串里面需要有一个 数字</span></span><br><span class="line"><span class="keyword">const</span> res2 =  <span class="regexp">/\d/</span>;<span class="comment">//  相当于 /数字/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2.<span class="title function_">test</span>(<span class="string">&#x27; &#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2.<span class="title function_">test</span>(<span class="string">&#x27;  123shuia&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、 \D</span></span><br><span class="line"><span class="comment">// 表示字符串里面需要有一个 数字</span></span><br><span class="line"><span class="keyword">const</span> res3 =  <span class="regexp">/\D/</span>;<span class="comment">//  相当于 /数字/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3.<span class="title function_">test</span>(<span class="string">&#x27;121231231231&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3.<span class="title function_">test</span>(<span class="string">&#x27;  123shuia&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、 \w</span></span><br><span class="line"><span class="comment">// 表示字符串里面需要有一个 数字 字母 下划线 三选一</span></span><br><span class="line"><span class="keyword">const</span> res4 =  <span class="regexp">/\w/</span>;<span class="comment">//  相当于 /三选一/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res4.<span class="title function_">test</span>(<span class="string">&#x27;##￥@￥￥%…………&amp;&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res4.<span class="title function_">test</span>(<span class="string">&#x27;1shhuj4545_&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7、 \W</span></span><br><span class="line"><span class="comment">// 表示字符串里面需要有一个 数字 字母 下划线以外的</span></span><br><span class="line"><span class="keyword">const</span> res5 =  <span class="regexp">/\W/</span>;<span class="comment">//  相当于 /数字 字母 下划线以外的/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res5.<span class="title function_">test</span>(<span class="string">&#x27;##￥@￥￥%…………&amp;&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res5.<span class="title function_">test</span>(<span class="string">&#x27;11212sghjghhjks__&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7、 (.)</span></span><br><span class="line"><span class="comment">// 表示内容里面需要有一个非换行内容</span></span><br><span class="line"><span class="keyword">const</span> res6 =  <span class="regexp">/./</span>;<span class="comment">//  相当于 /不能全是换行内容/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">test</span>(<span class="string">&#x27;\n\n\n\n&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res6.<span class="title function_">test</span>(<span class="string">&#x27;11212sgh\njghhjks__&#x27;</span>));<span class="comment">//true        </span></span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/zhengze/3.png" alt="image"></p><h1 id="正则表达式的两个方法"><a href="#正则表达式的两个方法" class="headerlink" title="正则表达式的两个方法:"></a>正则表达式的两个方法:</h1><ul><li><strong>1、<code>匹配</code>：验证字符串是不是符合正则表达式</strong><ul><li><strong><code>=》</code>语法：正则<code>.test</code>(你要检测的字符串)</strong></li><li><strong><code>=》</code>返回值：<code>true</code> ， <code>false</code></strong></li></ul></li><li><strong>2、<code>捕获</code>：从字符串里面获取符合正则规则的那一部分片段</strong><ul><li><strong><code>=》</code>语法：正则.exec(你要捕获的字符串)</strong></li><li><strong><code>=》</code>返回值：</strong><ul><li><p><strong>1、字符串里若是没有符合规则的片段</strong></p><ul><li><strong>-》返回null</strong></li></ul></li><li><p><strong>2、基础捕获</strong></p><ul><li><strong><code>-》</code>返回值是一个数组</strong></li><li><strong><code>-》</code>[0] 是捕获出来的片段</strong></li><li><strong><code>-》</code>不过有多少个片段，都只是捕获第一个片段</strong></li><li><strong><code>-》</code>不管捕获多少次，都只是捕获第一个片段</strong></li></ul></li></ul></li></ul></li></ul><h3 id="代码展示-3"><a href="#代码展示-3" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0、准备一个正则</span></span><br><span class="line"><span class="comment">// 表示字符串内需要有一个 abcd 的片段</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/abcd/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、test()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaabbbcccddd&#x27;</span>));<span class="comment">//false  不符合</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaabcddddddd&#x27;</span>));<span class="comment">//true    符合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、exec()</span></span><br><span class="line"><span class="keyword">const</span> res = reg.<span class="title function_">exec</span>(<span class="string">&#x27;aaabbbcccddd&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//null   不符合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res2 = reg.<span class="title function_">exec</span>(<span class="string">&#x27;aaabcdddddd&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2 , <span class="keyword">typeof</span> res2);<span class="comment">//一个对象，里面有捕获的片段&#x27;abcd&#x27; , 片段的起始位置：index：2 ，片段来源：aaabcdddddd</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/zhengze/4.png" alt="image"></p><h1 id="正则表达式的特数符号"><a href="#正则表达式的特数符号" class="headerlink" title="正则表达式的特数符号"></a>正则表达式的特数符号</h1><ul><li><p><strong>1、<code>()</code></strong></p><ul><li><strong>1-1、表示一个整体</strong></li><li><strong>1-2、单独捕获</strong><ul><li><strong><code>=》</code>在你捕获一个字符串的时候</strong></li><li><strong><code>=》</code>从左到右开始每一个小括号依次是数组里面的 [1] 开始的内容</strong></li><li><strong><code>=》</code>从左到右依次书小括号的开始括号</strong></li></ul></li></ul></li><li><p><strong>2、<code>(?:)</code></strong></p><ul><li><strong>表示整体匹配但是不捕获</strong></li></ul></li><li><p><strong>3、<code>|</code> (表示或者)</strong></p><ul><li><strong><code>=》</code>占位符</strong></li><li><strong><code>=》</code>表示左边或者右边都行</strong></li><li><strong><code>=》</code>大部分时候和()连用，表示一个整体 或者 另一个整体</strong></li><li><strong>注意：分开的是左边和右边的整个</strong></li></ul></li><li><p><strong>4、<code>[]</code></strong></p><ul><li><strong><code>=》</code>表示[]里面存在的任意一个都可以</strong></li></ul></li><li><p><strong>5、<code>[^]</code></strong></p><ul><li><strong><code>=》</code>表示<code>[^]</code>不能全部由里面的字符组成</strong></li><li><strong><code>=》</code>即只要存在不是<code>[^]</code>内指定的字符即可</strong></li></ul></li><li><p><strong>6、<code>-</code></strong></p><ul><li><strong><code>=》</code>表示从 到 或者 到</strong></li><li><strong><code>=》</code>这是一个使用在[]里面的一个符号</strong></li><li><strong><code>=》</code>表示哪一个字符到哪一个字符</strong></li><li><strong><code>=》</code>前提是他们在ASCII码里面连着的(字母区分大小写)</strong></li></ul></li><li><p><strong>常见的组合形式</strong></p><ul><li><strong>1、<code>[0-9a-zA-Z_]</code> 等价于 \w  (表示 数字 字母 下划线都可以 三者之一)</strong></li><li><strong>2、<code>[^0-9a-zA-Z_]</code> 等价于 \W (表示 数字 字母 下划线以外)</strong></li><li><strong>3、<code>[0-9]</code>        等价于 \d  (表示一个数字(只需要有一个数字即可))</strong></li><li><strong>4、<code>[^0-9]</code>       等价于 \D  (表示一个非数字(即检测的字符串里面不能全是数字))</strong></li><li><strong>5、<code>[ ]</code>          等价于 \s  (表示一个空格(只需有一个空格即可))</strong></li><li><strong>6、<code>[^ ]</code>         等价于 \S  (表示一个非空格(只需有一个非空格即可))</strong></li></ul></li><li><p><strong>特殊说明：</strong></p><ul><li><strong><code>=》</code>当 点<code>(.)</code>  出现在<code>[]</code> 或者 <code>[^ ]</code> 里面时表示一个文本</strong></li></ul></li></ul><h3 id="代码展示-4"><a href="#代码展示-4" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、()</span></span><br><span class="line"><span class="comment">// 1-1、表示一个整体</span></span><br><span class="line"><span class="keyword">const</span> a1 = <span class="regexp">/(abc)&#123;2&#125;/</span>;<span class="comment">//表示abc出现两次</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1.<span class="title function_">test</span>(<span class="string">&#x27;abcabcasxd&#x27;</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="comment">// 1-2、单独捕获(将括号内的东西单独捕获出来)</span></span><br><span class="line"><span class="keyword">const</span> a2 = <span class="regexp">/\d+(\s+)\d+/</span>;<span class="comment">//表示该字符串可以由 数字 + 空格 + 数字 组成</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2.<span class="title function_">exec</span>(<span class="string">&#x27;123 123&#x27;</span>));</span><br><span class="line"><span class="comment">// 返回值：[123 123] ， 0: &quot;123 123&quot; 1: &quot; &quot;  将括号内的空格单独捕获出来，index值是1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、(?:)</span></span><br><span class="line"><span class="comment">// 表示只是标志但是不捕获</span></span><br><span class="line"><span class="keyword">const</span> a3 = <span class="regexp">/\d+(?:\s+)\d+/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3.<span class="title function_">exec</span>(<span class="string">&#x27;123   123&#x27;</span>));<span class="comment">//[123  123]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、| (占位或)</span></span><br><span class="line"><span class="keyword">const</span> a4 = <span class="regexp">/(abc|def)/</span>;<span class="comment">//(表示有c或者有d都可以)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a4.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a4.<span class="title function_">test</span>(<span class="string">&#x27;def&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a4.<span class="title function_">test</span>(<span class="string">&#x27;abcdef&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a4.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、[]</span></span><br><span class="line"><span class="keyword">const</span> a5 = <span class="regexp">/[abcd]/</span>;<span class="comment">//只要里面存在abcd中的任意一个都可以</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a5.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a5.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a5.<span class="title function_">test</span>(<span class="string">&#x27;cs&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a5.<span class="title function_">test</span>(<span class="string">&#x27;s&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="comment">// 小练习：要求只要是abcd中的任意一个字符且只能是一个</span></span><br><span class="line"><span class="keyword">const</span> a6 = <span class="regexp">/^[abcd]$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a6.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a6.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a6.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>))<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、[^]</span></span><br><span class="line"><span class="keyword">const</span> a7 = <span class="regexp">/[^abcd]/</span>;<span class="comment">//表示字符串不能全部由[^]里面指定的字符组成</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a7.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a7.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、-</span></span><br><span class="line"><span class="keyword">const</span> a8 = <span class="regexp">/^[0-9]$/</span>;<span class="comment">//表示一位数字组成，这个数字可以是 0 - 9 中的任意一位</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a8.<span class="title function_">test</span>(<span class="string">&#x27;5&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="keyword">const</span> a9 = <span class="regexp">/^[a-z]$/</span>;<span class="comment">//表示一位字母组成，这个数字可以是 a - z 中的任意一位</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a9.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小练习</span></span><br><span class="line"><span class="comment">// 他表示只要是括号内两部分的一部分即可，不需要一定是相同的两个内容</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/^(abc|def)&#123;2&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcabc&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;defdef&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcdef&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小练习2(常见的账号注册)</span></span><br><span class="line"><span class="comment">// 要求：验证一个字符，只能由数字字符和下划线组成，但是不能由下划线开头，6-12位</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="regexp">/^[0-9a-zA-Z]\w&#123;5,11&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">test</span>(<span class="string">&#x27;abxd121321_&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">test</span>(<span class="string">&#x27;-123131sgdbd&#x27;</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-4"><a href="#结果展示-4" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/zhengze/5.png" alt="image"><br><img src="/../upload/zhengze/6.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mock学习</title>
      <link href="/2022/09/14/Mock%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/14/Mock%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="mock-js学习"><a href="#mock-js学习" class="headerlink" title="mock.js学习"></a><code>mock.js</code>学习</h1><h2 id="mock初识"><a href="#mock初识" class="headerlink" title="mock初识:"></a><code>mock</code>初识:</h2><ul><li><strong><code>mock</code>是一种<code>模拟后端接口的解决方案</code>,能够让我们提前调用模拟接口,完成前端开发,本质上是一个<code>第三方的模块</code></strong></li><li><strong><a href="http://mockjs.com/">mock官网</a></strong></li><li><strong>项目当中<code>mock</code>替换后端接口请求的流程图[<code>过程</code>]:</strong><br><img src="/../upload/mock/mock.png" alt="image"></li><li><strong>mock的优点:</strong><ul><li><strong><code>前后端分离</code>:让前端工程师独立于后端进行开发</strong></li><li><strong><code>开发无侵入</code>:不需要更改现有的代码就可以拦截ajax请求,返回模拟的响应数据</strong></li><li><strong><code>数据类型丰富</code>:&#96;支持生成司机的文本,数字,布尔值,日期,邮箱,链接,图片,颜色等…</strong></li><li><strong><code>增加单元测试的真实性</code>:通过随机数据,模拟各种场景</strong></li><li><strong><code>用法简单</code>:符合直接的接口</strong></li><li><strong><code>方便扩展</code>:支持扩展更多的数据类型,支持自定义函数和正则</strong></li></ul></li></ul><h2 id="mock-js环境的搭建"><a href="#mock-js环境的搭建" class="headerlink" title="mock.js环境的搭建"></a><code>mock.js</code>环境的搭建</h2><ul><li><strong><code>mock</code>的安装</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install mockjs</span><br></pre></td></tr></table></figure></li><li><strong>导入</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node.js中:</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Mock</span> = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6中</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br></pre></td></tr></table></figure></li><li><strong>使用流程:</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;...[对象]&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Mock-js的语法规范包括两部分"><a href="#Mock-js的语法规范包括两部分" class="headerlink" title=" Mock.js的语法规范包括两部分:"></a><code> Mock.js</code>的语法规范包括两部分:</h2><h3 id="1-数据模板定义规范"><a href="#1-数据模板定义规范" class="headerlink" title="1.数据模板定义规范:"></a>1.数据模板定义规范:</h3><ul><li><strong>数据模板中的每一个属性由3个部分组成:<code>属性名(name)</code>, <code>生成规则(rule)</code>, <code>属性值(value)</code></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;name|rule&#x27;</span>: value</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-数据占位符定义规范"><a href="#2-数据占位符定义规范" class="headerlink" title="2.数据占位符定义规范"></a><strong>2.数据占位符定义规范</strong></h3><ul><li><strong>占位符 只是在属性值字符串中占个位置,并不出现在最终的属性值中</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">​@占位符</span><br><span class="line"></span><br><span class="line">​@占位符(参数 [, 参数])</span><br></pre></td></tr></table></figure></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="1-数据模板定义"><a href="#1-数据模板定义" class="headerlink" title="1.数据模板定义"></a><strong>1.数据模板定义</strong></h3><ul><li><strong>属性值是字符串形式:<code>String</code></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; name|min-max &#x27;</span> : <span class="string">&#x27; string &#x27;</span></span><br></pre></td></tr></table></figure></li><li><strong>通过重复的<code>string</code>生成一个字符串,重复次数介于<code>min</code> 到<code>max</code>之间</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; name|count &#x27;</span> : <span class="string">&#x27; string &#x27;</span></span><br></pre></td></tr></table></figure></li><li><strong>通过重复的<code>string</code>生成一个字符串,重复次数等于<code>count</code></strong></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入mock(两种方法)</span></span><br><span class="line"><span class="comment">// import Mock from &#x27;mockjs&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mock</span> = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用Mock方法,生成模拟数据</span></span><br><span class="line"><span class="comment">// 1.生成一个username *出现次数为1-10次</span></span><br><span class="line"><span class="keyword">var</span> data1 = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;<span class="string">&#x27;username|1-10&#x27;</span>:<span class="string">&#x27;*&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一个username *出现次数为5次</span></span><br><span class="line"><span class="keyword">var</span> data2 = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;<span class="string">&#x27;username|5&#x27;</span>:<span class="string">&#x27;*&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;随机出现1-10次的data1&#x27;</span>,data1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现5次的data2&#x27;</span>,data2);</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/mock/1.png" alt="image"></p><ul><li><strong>属性值是数值形式:<code>Number</code></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; name|min-max &#x27;</span> : <span class="string">&#x27; number &#x27;</span></span><br></pre></td></tr></table></figure></li><li><strong>生成一个介于<code>min</code>到<code>max</code>之间的整数,属性值<code>number</code>只是用来确定类型</strong></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.生成一个数值类型的模拟数据</span></span><br><span class="line"><span class="comment">// 生成一个年龄介于18-40的数值(这里的初始值给0即可)</span></span><br><span class="line"><span class="keyword">var</span> data3 = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;<span class="string">&#x27;age|18-40&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;年龄:&#x27;</span>,data3);</span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/mock/2.png" alt="image"></p><h3 id="2-数据占位符定义"><a href="#2-数据占位符定义" class="headerlink" title="2.数据占位符定义"></a><strong>2.数据占位符定义</strong></h3><ul><li><strong><code>@id()&amp;&amp;@guid;</code>等到一个随机生成的id(或者:<code>Mock.Random.guid();</code>)</strong></li><li><strong><code>@cname()</code>:得到一个随机的生成的中文名字</strong></li><li><strong><code>@date(&#39;yyyy-MM-dd&#39;)</code>:得到一个随机生成的日期</strong></li><li><strong><code>@paragraph()</code>:得到一个随机生成的描述</strong></li><li><strong><code>@email</code>:得到一个随机生成的邮箱地址</strong></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.数据占位符定义</span></span><br><span class="line"><span class="keyword">var</span> data4 = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&#x27;@id()&#x27;</span>,<span class="comment">//id = Mock.mock(&quot;@guid&quot;);</span></span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;@cname()&#x27;</span>,</span><br><span class="line">    <span class="attr">date</span>:<span class="string">&#x27;@date(yyyy-MM-dd)&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>:<span class="string">&#x27;@paragraph()&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>:<span class="string">&#x27;@email()&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age|18-40&#x27;</span>:<span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data4);</span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/mock/3.png" alt="image"></p><h2 id="Mock-js在Vue项目中的使用"><a href="#Mock-js在Vue项目中的使用" class="headerlink" title="Mock.js在Vue项目中的使用"></a><code>Mock.js</code>在<code>Vue</code>项目中的使用</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤:"></a>使用步骤:</h3><ul><li><p><strong>1.在项目的根目录下新建<code>.env.development</code>文件,并填入以下代码用于确定是否启用<code>mock</code>接口来模拟数据还是向后台请求数据</strong><br><img src="/../upload/mock/6.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这里添加mock接口的开关</span><br><span class="line"># 控制是否需要使用到mock模拟生成的数据,还是向后端发请求,请求数据</span><br><span class="line"># Mock = ture :使用mock模拟数据,false:不使用mock模拟数据而是向后台请求数据</span><br><span class="line"></span><br><span class="line">Mock = false</span><br></pre></td></tr></table></figure></li><li><p><strong>2.定义接口路由,在接口中返回<code>mock</code>模拟的数据(在<code>mock</code>文件夹下的<code>index.js</code>当中)</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入mock(两种方法)</span></span><br><span class="line"><span class="comment">// import Mock from &#x27;mockjs&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mock</span> = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)<span class="comment">//推荐使用nodejs写法,因为配置文件用的就是commonjs写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让它随机生成一个对象</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&#x27;@id()&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;@cname()&#x27;</span>,</span><br><span class="line">    <span class="attr">date</span>:<span class="string">&#x27;@date(yyyy-MM-dd)&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>:<span class="string">&#x27;@paragraph()&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>:<span class="string">&#x27;@email()&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age|18-40&#x27;</span>:<span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;使用mock随机生成的对象&#x27;</span>,data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由接口,在接口中返回mock的数据</span></span><br><span class="line"><span class="comment">// 首先将服务器的接口函数暴露出去(node中的express框架)</span></span><br><span class="line"><span class="comment">// 实际上vue-cli中集成的就是express框架[服务器]</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">devServer</span>)&#123;</span><br><span class="line">    <span class="comment">// 添加判断,mock接口是否为true(是否使用mock模拟数据)</span></span><br><span class="line">    <span class="keyword">if</span>(process.<span class="property">env</span>.<span class="property">Mock</span> === <span class="string">&#x27;ture&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// 参数1:接口地址(真正的后端接口) ,参数2: 服务器处理函数(req请求对象,res响应对象)</span></span><br><span class="line">        <span class="comment">// app就是创造的服务器实例 </span></span><br><span class="line">        devServer.<span class="property">app</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/userinfo&#x27;</span> , <span class="function">(<span class="params">req , res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 将模拟的数据以json格式返回给客户端(浏览器)</span></span><br><span class="line">            res.<span class="title function_">json</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p><strong>3.在<code>vue.config.js</code>中配置<code>devServer</code>,在<code>onBeforeSetupMiddleware</code>属性中引入接口路由函数</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// 关闭依法提示</span></span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="comment">/* vue-cli跑起来的时候会自动的起一个服务器,</span></span><br><span class="line"><span class="comment">    该服务器在向后端发送请求的时候,</span></span><br><span class="line"><span class="comment">    会先经过这里的before有没有返回接口数据,</span></span><br><span class="line"><span class="comment">    如果有的话就直接返回before这里的数据不会再向下走了,</span></span><br><span class="line"><span class="comment">    如果没有才会向后端发送请求</span></span><br><span class="line"><span class="comment">    就相当于一个拦截器 */</span></span><br><span class="line">    <span class="attr">onBeforeSetupMiddleware</span>: <span class="built_in">require</span>(<span class="string">&#x27;./mock/index.js&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>4.在对应的组件(该组件向后台请求数据)当中使用axios调用该接口,获取数据</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里展示的是App组件的代码片段(练习使用的是app组件向外发送请求) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入axios</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 前端调用接口请求数据</span></span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/userinfo&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><strong>当<code>Mock = true</code>时[使用mock模拟数据]</strong><br><img src="/../upload/mock/4.png" alt="image"></li><li><strong>当<code>Mock = false</code>时[根据url像后端请求数据]</strong><br><img src="/../upload/mock/5.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Mock </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mock </tag>
            
            <tag> axios </tag>
            
            <tag> 数据请求 </tag>
            
            <tag> 模拟数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6复习(3)</title>
      <link href="/2022/09/13/ES6%E5%A4%8D%E4%B9%A03/"/>
      <url>/2022/09/13/ES6%E5%A4%8D%E4%B9%A03/</url>
      
        <content type="html"><![CDATA[<h1 id="Es6学习笔记-3"><a href="#Es6学习笔记-3" class="headerlink" title="Es6学习笔记(3)"></a>Es6学习笔记(3)</h1><h2 id="1-class类与对象参考往期博客"><a href="#1-class类与对象参考往期博客" class="headerlink" title="1.class类与对象参考往期博客"></a>1.<strong style="color:red">class</strong>类与对象参考往期博客</h2><h2 id="2-Set集合"><a href="#2-Set集合" class="headerlink" title="2.Set集合"></a>2.<strong style="color:red">Set</strong>集合</h2><ul><li><strong><code>ES6</code> 提供了新的<code>数据结构 ``Set（集合）</code>。它类似于<code>数组</code>，但成员的值都是唯一的，集合实现了 <code>iterator 接口</code>，所以可以使用<code>『扩展运算符』</code>和<code>『for…of…』</code>进行<code>遍历，集合的属性和方法</code>：</strong><ul><li><strong>1)<code>size </code>      返回集合的元素个数</strong></li><li><strong>2)<code>add</code>        增加一个新元素，返回当前集合</strong></li><li><strong>3)<code>delete</code>   删除元素，返回 <code>boolean</code> 值</strong></li><li><strong>4)<code>has</code>       检测集合中是否包含某个元素，返回 <code>boolean</code> 值</strong></li><li><strong>5)<code>clear</code>   清空集合，返回 <code>undefined</code></strong></li></ul></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建一个集合</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();<span class="comment">//Set(0) &#123;size: 0&#125; &quot;object&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.集合里面可以接受一个可迭代数据,一般是给里面传入一个数组</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;大事儿&#x27;</span>,<span class="string">&#x27;小事儿&#x27;</span>,<span class="string">&#x27;好事儿&#x27;</span>,<span class="string">&#x27;坏事儿&#x27;</span>,<span class="string">&#x27;小事儿&#x27;</span>])</span><br><span class="line"><span class="comment">// Set(4) &#123;&#x27;大事儿&#x27;, &#x27;小事儿&#x27;, &#x27;好事儿&#x27;, &#x27;坏事儿&#x27;&#125;,自动去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.元素个数</span></span><br><span class="line"><span class="comment">// console.log(s1.size); //4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.添加新的元素</span></span><br><span class="line">s1.<span class="title function_">add</span>(<span class="string">&#x27;喜事儿&#x27;</span>)<span class="comment">//Set(5) &#123;&#x27;大事儿&#x27;, &#x27;小事儿&#x27;, &#x27;好事儿&#x27;, &#x27;坏事儿&#x27;, &#x27;喜事儿&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.删除元素</span></span><br><span class="line">s1.<span class="title function_">delete</span>(<span class="string">&#x27;坏事儿&#x27;</span>) <span class="comment">//Set(4) &#123;&#x27;大事儿&#x27;, &#x27;小事儿&#x27;, &#x27;好事儿&#x27;, &#x27;喜事儿&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.检测集合中是否包含某个元素，返回true或者false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( s1.<span class="title function_">has</span>(<span class="string">&#x27;喜事儿&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7.清空集合</span></span><br><span class="line"><span class="comment">// s1.clear() //Set(0) &#123;size: 0&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们还可以用for of来遍历元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s1)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L3/1.png" alt="image"></p><h2 id="3-map与其api的介绍"><a href="#3-map与其api的介绍" class="headerlink" title="3.map与其api的介绍"></a>3.<strong style="color:red">map</strong>与其<code>api</code>的介绍</h2><ul><li><strong><code>ES6</code> 提供了 <code>Map</code> 数据结构。它<code>类似于对象</code>，也是<code>键值对的集合</code>。但是“键” 的范围不限于字符串，各种类型的值（包括对象）都可以当作键。<code>Map</code> 也实现了<code>iterator</code> 接口，所以可以使用<code>『扩展运算符』</code>和<code>『for…of…』</code>进行遍历。</strong></li><li><strong><code>Map</code> 的属性和方法：</strong><ul><li><strong>1)<code>size</code>  返回 Map 的元素个数</strong></li><li><strong>2)<code>set</code>  增加一个新元素，返回当前 Map</strong></li><li><strong>3)<code>get</code>  返回键名对象的键值</strong></li><li><strong>4)<code>has</code>  检测 Map 中是否包含某个元素，返回 boolean 值</strong></li><li><strong>5)<code>clear</code>  清空集合，返回 undefined</strong></li></ul></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Map相当于一个加强版的对象,因为他可以将对象作为键(key)</span></span><br><span class="line"><span class="comment">// 1.创建一个Map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m , <span class="keyword">typeof</span> m); <span class="comment">//Map(0) &#x27;object&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.给Map添加元素</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;肥林&#x27;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;school&#x27;</span>, <span class="string">&#x27;五邑大学&#x27;</span>);</span><br><span class="line"><span class="comment">// 还可以添加方法</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;way to school&#x27;</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;乘坐大巴!&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 还可以添加对象</span></span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">    专业 : <span class="string">&#x27;电子信息工程&#x27;</span>,</span><br><span class="line">    学部 : <span class="string">&#x27;智能制造学部&#x27;</span> </span><br><span class="line">&#125;</span><br><span class="line">m.<span class="title function_">set</span>(key)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.获取Map中元素个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.删除元素</span></span><br><span class="line">m.<span class="title function_">delete</span>(key)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.检测存在元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(key));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.清空集合</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">clear</span>());<span class="comment">//返回undefined  </span></span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="/../upload/Es6/L3/2.png" alt="image"></p><h2 id="4-Object-defineProperty方法"><a href="#4-Object-defineProperty方法" class="headerlink" title="4.Object.defineProperty方法"></a>4.<strong style="color:red">Object.defineProperty</strong>方法</h2><ul><li><p><strong>作用:</strong></p><ul><li><strong>给目标对象定义一个新属性,或者修改一个已经存在的属性</strong></li></ul></li><li><p><strong>语法格式:</strong></p><ul><li><strong><code>Object.defineProperty(obj,prop,description)</code></strong></li><li><strong><code>obj</code>:          <code>必须</code> 目标对象</strong></li><li><strong><code>prop</code>:         <code>必须</code> 需要定义或修改的属性名字(你要修改的是哪一个属性)</strong></li><li><strong><code>description</code>:  <code>必须</code> 目标属性所拥有的特性 (要改的属性有什么样的特性,说明,属性值),一般为对象形式</strong></li></ul></li><li><p><strong><code>description</code>的常用属性值:</strong></p><ul><li><strong>1.<code>value</code>: 设置属性的值  默认为undefined</strong></li><li><strong>2.<code>writable</code>: 值是否可以重写。true | false  默认为false</strong></li><li><strong>3.<code>enumerable</code>: 目标属性是否可以被枚举。true | false 默认为 false</strong></li><li><strong>4.<code>configurable</code>: 目标属性是否可以被删除或是否可以再次修改特性 true | false  默认为false</strong></li></ul></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object.defineProperty()方法用于定义新属性或修改原有的属性值</span></span><br><span class="line"><span class="comment">// 先创建一个对象</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Cheung Pui Lam&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;五邑大学&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 常用的添加属性的方法1</span></span><br><span class="line">a.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">a.<span class="property">subject</span> = <span class="string">&#x27;电子信息工程&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用的添加属性的方法2-Object.defineProperty()</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a , <span class="string">&#x27;age&#x27;</span> , &#123;<span class="comment">//这里将 age 这个属性改为了18</span></span><br><span class="line">    <span class="comment">//1.value: 设置或修改属性的值  默认为undefined</span></span><br><span class="line">    value : <span class="number">18</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.writable: 值是否可以重写。true | false  默认为false</span></span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,<span class="comment">//此时的age就不能被修改了!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.enumerable: 目标属性是否可以被枚举(就是遍历)。true | false 默认为 false</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,<span class="comment">//此时这个age属性就无法被枚举(遍历)了!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.configurable: 目标属性是否可以被删除或是否可以再次修改特性 true | false  默认为false</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span><span class="comment">//表示现在的 age 属性不能被删除和修改特性(后面不能再修改)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">a.<span class="property">age</span> = <span class="number">10</span>;<span class="comment">//age依然是 18  =&gt; 对应的是 writable: false 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(a));<span class="comment">//使用keys()方法来遍历,没有出现 age属性 =&gt; 对应 enumerable: false 属性</span></span><br><span class="line"><span class="keyword">delete</span> a.<span class="property">age</span>;<span class="comment">//但是结果依然有age属性 =&gt; 对应 configurable: true 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L3/3.png" alt="image"></p><h3 id="Object-defineProperty的两个高级用法"><a href="#Object-defineProperty的两个高级用法" class="headerlink" title="Object.defineProperty的两个高级用法"></a><strong style="color:red">Object.defineProperty</strong>的两个高级用法</h3><ul><li><strong>这里介绍 <code>Object.defineProperty()</code> 方法的两个高级用法:内置的<code>get()</code> 和 <code>set()</code> 方法</strong><ul><li><strong><code>get() 方法</code>:当有人读取目标对象的某一个属性时,就会执行这个该函数,且返回值就是目标属性(该属性)的值</strong></li><li><strong><code>set(形参)方法</code>:当有人修改目标对象的某一个属性时,就会执行这个该函数,且返回值就是目标属性(该属性)的值</strong></li></ul></li></ul><h3 id="代码展示-3"><a href="#代码展示-3" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object.defineProperty()方法用于定义新属性或修改原有的属性值</span></span><br><span class="line"><span class="comment">// 先创建一个对象</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">20</span>;<span class="comment">//这里设置一个冰凉用于传递和接收 age属性的属性值 </span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Cheung Pui Lam&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: num,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;五邑大学&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用的添加属性的方法2-Object.defineProperty()</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a , <span class="string">&#x27;age&#x27;</span> , &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;<span class="comment">//每当读取 age属性(目标属性)时就会调用这个函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;给属性被读取了!&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> num;<span class="comment">//一定要有返回值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;<span class="comment">//每当修改 age属性(目标属性)时就会调用这个函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;该属性被修改了!,且该属性值是&#x27;</span>, value );</span><br><span class="line">        num = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L3/1.gif" alt="image"></p><h2 id="5-模块化"><a href="#5-模块化" class="headerlink" title="5.模块化"></a>5.模块化</h2><ul><li><strong>1.<code>引入</code>的三种方法</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 浏览器中一般是之间在script标签中引入路径即可 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一定要添加 type=&quot;module&quot; 这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 引入一般有三种方法:</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.通用的引入方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import * as m from &quot;./m.js&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(m);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.解构赋值的形式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import &#123;school , say , jod&#125; from &quot;./m.js&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(school); // 五邑大学</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(say);//ƒ say()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(jod);//ƒ jod()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 默认暴露</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import&#123;default as m&#125; from &quot;./m.js&quot;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.简单形式 但是只能针对默认暴露</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> m <span class="keyword">from</span> <span class="string">&quot;./m.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">//&#123;school: &#x27;五邑大学&#x27;, say: ƒ, jod: ƒ&#125;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>2.<code>暴露</code>的三种方法</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 暴露数据的三种方法</span></span><br><span class="line"><span class="comment">// 1.分别暴露</span></span><br><span class="line"><span class="comment">// export let school = &#x27;五邑大学&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// export function say()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;欢迎来到邑大!&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// export function jod() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;这里可以帮你找到心仪的工作!&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.统一暴露</span></span><br><span class="line"><span class="comment">// export &#123;school , say , jod&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    school : <span class="string">&#x27;五邑大学&#x27;</span>,</span><br><span class="line">    say : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;欢迎来到邑大!&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    jod : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这里可以帮你找到心仪的工作!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-4"><a href="#结果展示-4" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L3/4.png" alt="image"></p><h2 id="6-扩展"><a href="#6-扩展" class="headerlink" title="6.扩展"></a>6.扩展</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">### 字符串扩展</span><br><span class="line">* <span class="string">`str.includes(str)`</span> 判断是否包含指定字符串</span><br><span class="line">* <span class="string">`str.startWith(str)`</span> 判断是否以指定字符串开头</span><br><span class="line">* <span class="string">`str.endWith(str)`</span> 判断是否以指定字符串结尾</span><br><span class="line">* <span class="string">`str.repeat(count)`</span>   返回重复了指定次数的字符串</span><br><span class="line">### 数值扩展</span><br><span class="line">* 二进制与八进制表示法：0b开头表示二进制，0o表示八进制</span><br><span class="line">* <span class="string">`number.isFinite(i)`</span> 判断是否是有限数</span><br><span class="line">* <span class="string">`number.isNaN(i)`</span> 判断是否是<span class="title class_">NaN</span></span><br><span class="line">* <span class="string">`number.parseInt(str)`</span> 字符串转化为整数</span><br><span class="line">* <span class="string">`number.isInteger(i)`</span> 判断是否是整数</span><br><span class="line">* <span class="string">`Math.trunc(i)`</span>   小数转化为整数</span><br><span class="line">### 数组对象的扩展</span><br><span class="line">* <span class="string">`Array.from(v)`</span> 将伪数组转化为真数组</span><br><span class="line">* <span class="string">`Array.of(v1,v2,v3)`</span>  将一系列数据转化为数组</span><br><span class="line">* <span class="string">`Array.find(function(item, index, arr)&#123;&#125;)`</span>    找到满足条件的第一个值</span><br><span class="line"> </span><br><span class="line">对象的扩展</span><br><span class="line">* <span class="string">`Object.is(v1, v2)`</span>   判断两个数据是否相等，底层是判断字符串</span><br><span class="line">* <span class="string">`Object.assign(target, source, [source, source])`</span> 将源对象的属性添加到目标对象上</span><br><span class="line">* 从<span class="title class_">ES6</span>开始__proto__可以被操作</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> class类 </tag>
            
            <tag> Set集合 </tag>
            
            <tag> map </tag>
            
            <tag> Object.defineProperty </tag>
            
            <tag> 模块化 </tag>
            
            <tag> 扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6复习(2)</title>
      <link href="/2022/09/13/ES6%E5%A4%8D%E4%B9%A02/"/>
      <url>/2022/09/13/ES6%E5%A4%8D%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h1 id="Es6学习笔记（2）"><a href="#Es6学习笔记（2）" class="headerlink" title="Es6学习笔记（2）"></a>Es6学习笔记（2）</h1><h2 id="1-…-拓展运算符"><a href="#1-…-拓展运算符" class="headerlink" title="1.(…)拓展运算符"></a>1.<strong style="color:red">(…)</strong>拓展运算符</h2><ul><li><strong>es6新增的扩展运算符<code>...</code></strong></li><li><strong>作用：</strong><ul><li><strong>所有能够被迭代的东西，都可以被展开运算符…，进行展开,即可将数组展开变成参数序列，将字符串展开变成单一的字符</strong></li></ul></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 『...』 扩展运算符能将『数组』转换为逗号分隔的『参数序列』</span></span><br><span class="line"><span class="comment">//声明一个数组 ...</span></span><br><span class="line"><span class="keyword">const</span> tfboys = [<span class="string">&#x27;易烊千玺&#x27;</span>,<span class="string">&#x27;王源&#x27;</span>,<span class="string">&#x27;王俊凯&#x27;</span>];</span><br><span class="line"><span class="comment">// =&gt; &#x27;易烊千玺&#x27;,&#x27;王源&#x27;,&#x27;王俊凯&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">chunwan</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">chunwan</span>(tfboys);<span class="comment">//结果只有一个参数，即一个数组</span></span><br><span class="line"><span class="title function_">chunwan</span>(...tfboys);<span class="comment">//结果有三个参数，相当于转换成chunwan(&#x27;易烊千玺&#x27;,&#x27;王源&#x27;,&#x27;王俊凯&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L2/1.png" alt="image"></p><h3 id="拓展运算符的应用"><a href="#拓展运算符的应用" class="headerlink" title="拓展运算符的应用:"></a>拓展运算符的应用:</h3><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 数组的合并：相当于把每一个目标数组变成对应的参数序列，然后再传进新数组里面</span></span><br><span class="line"><span class="keyword">const</span> kuaizi = [<span class="string">&#x27;王太利&#x27;</span>,<span class="string">&#x27;肖央&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> fenghuang = [<span class="string">&#x27;曾毅&#x27;</span>,<span class="string">&#x27;玲花&#x27;</span>];</span><br><span class="line"><span class="comment">// es5的数组合并方法：数组1.concat(数组2) = 数组[1 + 2]</span></span><br><span class="line"><span class="comment">// const zuixuanxiaopingguo = kuaizi.concat(fenghuang);</span></span><br><span class="line"><span class="keyword">const</span> zuixuanxiaopingguo = [...kuaizi, ...fenghuang];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zuixuanxiaopingguo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 数组的克隆</span></span><br><span class="line"><span class="keyword">const</span> sanzhihua = [<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;M&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> sanyecao = [...sanzhihua];<span class="comment">//  [&#x27;E&#x27;,&#x27;G&#x27;,&#x27;M&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sanyecao);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 将伪数组转为真正的数组</span></span><br><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> divArr = [...divs];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divArr);<span class="comment">// arguments  </span></span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L2/2.png" alt="image"></p><h2 id="2-rest形参的默认值-代替arguments"><a href="#2-rest形参的默认值-代替arguments" class="headerlink" title="2.rest形参的默认值(代替arguments)"></a>2.<strong style="color:red">rest</strong>形参的默认值(代替<code>arguments</code>)</h2><ul><li><strong><code>arguments</code>参数的复习：</strong><ul><li><strong>在每一个函数内，都有一个内置的数组，是一个变量，叫做<code>arguments</code>。<code>arguments</code>可以存储当前函数传入的所有参数，而且，是通过传参的顺序，进行排列的</strong></li></ul></li><li><strong><code>rest</code>参数导读：</strong><ul><li><strong><code>ES6</code>中引入<code>rest参数</code>(形式为’…变量名’)，用于获取函数的多余参数。<code>rest参数</code>之后不能再有其他参数(即只能是最后一个参数)。</strong></li></ul></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments</span></span><br><span class="line"><span class="comment">// ES5 获取实参的方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">date</span>(<span class="string">&#x27;白芷&#x27;</span>,<span class="string">&#x27;阿娇&#x27;</span>,<span class="string">&#x27;思慧&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest 参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);<span class="comment">// filter some every map </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">date</span>(<span class="string">&#x27;阿娇&#x27;</span>,<span class="string">&#x27;柏芝&#x27;</span>,<span class="string">&#x27;思慧&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest 参数必须要放到参数最后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b,...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L2/3.png" alt="image"></p><h2 id="3-promise的使用翻阅前面的博客"><a href="#3-promise的使用翻阅前面的博客" class="headerlink" title="3.promise的使用翻阅前面的博客"></a>3.<code>promise</code>的使用翻阅前面的博客</h2><h2 id="4-symbol新数据类型"><a href="#4-symbol新数据类型" class="headerlink" title="4.symbol新数据类型"></a>4.<strong style="color:red">symbol</strong>新数据类型</h2><ul><li><strong><code>ES6</code> 引入了一种新的原始数据类型 <code>Symbol</code>， 表示独一无二的值。它是<code>JavaScript</code> 语言的第七种数据类型，是一种<code>类似于字符串的数据类型</code>。</strong></li><li><strong><code>Symbol</code> 特点</strong><ul><li><strong>1)<code>Symbol</code> 的值是唯一的，用来解决命名冲突的问题</strong></li><li><strong>2)<code>Symbol</code> 值不能与其他数据进行运算</strong></li><li><strong>3)<code>Symbol</code> 定义的对象属性不能使用 <code>for…in</code> 循环遍历， 但是可以使用<code>Reflect.ownKeys</code> 来获取对象的所有键名</strong></li></ul></li></ul><h3 id="代码展示-3"><a href="#代码展示-3" class="headerlink" title="代码展示"></a>代码展示</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s, <span class="keyword">typeof</span> s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;五邑大学&#x27;</span>);<span class="comment">//创建symbol时，我们可以给其添加一个字符串描述</span></span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;五邑大学&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 === s3);<span class="comment">//false,唯一性，symbol只是代表标志，即通过这种方创建的symbol值是相对独立的，每一个都不一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Symbol.for 创建（函数对象），通过这种方法创建的symbol是唯一的symbol值（根据括号内的字符串对应唯一的symbol值）</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;五邑大学&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;五邑大学&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4 , <span class="keyword">typeof</span> s4);<span class="comment">//Symbol(五邑大学) &#x27;symbol&#x27; , 同样也是symbol类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4 === s5);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不能与其他数据进行运算和字符串的拼接</span></span><br><span class="line"><span class="comment">//    let result = s + 100;</span></span><br><span class="line"><span class="comment">//    let result = s &gt; 100;</span></span><br><span class="line"><span class="comment">//    let result = s + s;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结以下我们学过的七种数据类型</span></span><br><span class="line"><span class="comment">// USONB  you are so niubility </span></span><br><span class="line"><span class="comment">// u  undefined</span></span><br><span class="line"><span class="comment">// s  string  symbol</span></span><br><span class="line"><span class="comment">// o  object</span></span><br><span class="line"><span class="comment">// n  null number</span></span><br><span class="line"><span class="comment">// b  boolean</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L2/4.png" alt="image"></p><h3 id="symbol的使用场景"><a href="#symbol的使用场景" class="headerlink" title="symbol的使用场景:"></a><code>symbol</code>的使用场景:</h3><ul><li><strong><code>symbol</code>由于它的唯一性，使用场景一般是给<code>对象添加属性和方法</code></strong></li><li><strong><a href="https://es6.ruanyifeng.com/#docs/symbol">symbol参考手册</a>(学习symbol的内置值)</strong></li></ul><h3 id="代码展示-4"><a href="#代码展示-4" class="headerlink" title="代码展示"></a>代码展示</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用场景一：作为属性名symbol</span></span><br><span class="line"><span class="comment">// 由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，</span></span><br><span class="line"><span class="comment">// 就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖</span></span><br><span class="line"><span class="keyword">let</span> mySymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> mySymbol);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">let</span> b = &#123;&#125;;</span><br><span class="line">b[mySymbol] = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，Symbol 值作为对象属性名时，不能用点运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//&#123;Symbol(你好): &#x27;Hello!&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b[mySymbol], b[mySymbol]);<span class="comment">//string Hello!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    [mySymbol]: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用场景二：作为对象的属性值添加到对象当中去</span></span><br><span class="line"><span class="comment">// Symbol 类型还可以用于定义一组常量，保证这组常量的值都是不相等的。</span></span><br><span class="line"><span class="keyword">const</span> log = &#123;</span><br><span class="line">    <span class="attr">DEBUG</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;debug&#x27;</span>),</span><br><span class="line">    <span class="attr">INFO</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;info&#x27;</span>),</span><br><span class="line">    <span class="attr">WARN</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;warn&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(log[<span class="string">&#x27;DEBUG&#x27;</span>]);<span class="comment">//Symbol(debug)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上的用法：就是为了给一些大型项目当中添加一些属性和方法，但是又怕原与对象当中的属性和方法冲突了，</span></span><br><span class="line"><span class="comment">// 所以可以用symbol来添加独一无二的属性和方法来解决属性名或方法名冲突的情况</span></span><br><span class="line"><span class="comment">// 给对象添加symbol属性</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line">log[s] = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好！&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(log);<span class="comment">//输出一个对象，里面包含添加的 ‘s’ symbol属性</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-4"><a href="#结果展示-4" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L2/4.png" alt="image"></p><h2 id="4-iterator遍历器"><a href="#4-iterator遍历器" class="headerlink" title="4.iterator遍历器"></a>4.<strong style="color:red">iterator</strong>遍历器</h2><ul><li><strong>所谓<code>迭代器</code>，即<code>遍历器（Iterator）</code>就是一种机制。它是一种接口(这里的接口就是对象里的属性)，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 <code>Iterator</code> 接口，就可以完成遍历操作。</strong></li><li><strong>1)<code>ES6</code> 创造了一种新的<code>遍历命令</code> <code>for...of</code> 循环，<code>Iterator</code> 接口主要供 <code>for...of</code> 消费</strong></li><li><strong>2)原生具备 <code>iterator</code> 接口的数据(可用 <code>for of</code> 遍历)</strong><ul><li><strong>a)Array</strong></li><li><strong>b)Arguments</strong></li><li><strong>c)Set</strong></li><li><strong>d)Map</strong></li><li><strong>e)String</strong></li><li><strong>f)TypedArray</strong></li><li><strong>g)NodeList</strong></li></ul></li><li><strong>3)工作原理</strong><ul><li><strong>a)创建一个指针对象，指向当前数据结构的起始位置</strong></li><li><strong>b)第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</strong></li><li><strong>c)接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</strong></li><li><strong>d)每调用 next 方法返回一个包含 value 和done 属性的对象注: 需要自定义遍历数据的时候，要想到迭代器。</strong></li></ul></li></ul><h3 id="代码展示-5"><a href="#代码展示-5" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> west = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用for....of循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> west) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);<span class="comment">//唐僧 孙悟空 沙僧 猪八戒</span></span><br><span class="line">    <span class="comment">// 由此可见，for of循环的v变量保存的是数组的键值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用for....in循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">in</span> west) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);<span class="comment">//0 1 2 3 </span></span><br><span class="line">    <span class="comment">// 由此可见，for in循环的v变量保存的是数组的键名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么数组能够使用for of遍历呢？？</span></span><br><span class="line"><span class="comment">// 只要对象里面有symbol，Iterator属性都能可以</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(west);<span class="comment">//里面有：Symbol(Symbol.iterator): ƒ values()，这是一个方法（函数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对symbol进行一个复习</span></span><br><span class="line"><span class="comment">// 这里调用一下这个函数(方法)</span></span><br><span class="line"><span class="keyword">let</span> iterator = west[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator);<span class="comment">//里面有：next: ƒ next() ， 这是一个方法（函数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  工作原理</span></span><br><span class="line"><span class="comment">// a) 创建一个指针对象，指向当前数据结构的起始位置</span></span><br><span class="line"><span class="comment">// b)第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</span></span><br><span class="line"><span class="comment">// c)接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</span></span><br><span class="line"><span class="comment">// d)每调用 next 方法返回一个包含 value 和done 属性的对象注: 需要自定义遍历数据的时候，要想到迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &#x27;唐僧&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &#x27;孙悟空&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &#x27;沙僧&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &#x27;猪八戒&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="comment">// 解析：next每调用一次，都会返回新的值(指针一直向后移动，直到返回最后一个成员)，</span></span><br><span class="line"><span class="comment">// 这里的done属性是度的一个完成时，这里表示是否遍历完成，false表示遍历未完成，true表示遍历完成</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-5"><a href="#结果展示-5" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L2/5.png" alt="image"></p><h3 id="迭代器的应用"><a href="#迭代器的应用" class="headerlink" title="迭代器的应用:"></a>迭代器的应用:</h3><ul><li><strong>迭代器的应用多用于自定遍历数据，按照我们的意愿来遍历数据</strong><ul><li><strong>a) 创建一个指针对象，指向当前数据结构的起始位置</strong></li><li><strong>b)第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</strong></li><li><strong>c)接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</strong></li><li><strong>d)每调用 next 方法返回一个包含 value 和done 属性的对象注: 需要自定义遍历数据的时候，要想到迭代器。</strong></li></ul></li></ul><h3 id="代码展示-6"><a href="#代码展示-6" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">const</span> class1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;终极一班&quot;</span>,</span><br><span class="line">    <span class="attr">member</span>:[</span><br><span class="line">        <span class="string">&#x27;张三&#x27;</span> ,</span><br><span class="line">        <span class="string">&#x27;李四&#x27;</span> ,</span><br><span class="line">        <span class="string">&#x27;陈五&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//重点： 自定义遍历要求：使用迭代器和for of方法遍历上面对象中的数组，这里考察对迭代器工作原理的理解</span></span><br><span class="line">    <span class="comment">// 首先创建指针对象</span></span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">        <span class="comment">// 设置索引变量，用于后续索引数组元素</span></span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 这个Symbol.iterator方法的返回值需是一个对象</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 设置next方法，这里用的是箭头函数创建方法，若是用function，需要将this向上一级嵌套，</span></span><br><span class="line">            <span class="comment">// 即在[Symbol.iterator]()的外层嵌套一个_this = this，但是用箭头函数创建不用，因为它是静态的，</span></span><br><span class="line">            <span class="comment">// 自动向外层寻找 </span></span><br><span class="line">            <span class="attr">next</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 这里就是常规的遍历循环</span></span><br><span class="line">                <span class="keyword">if</span>(i &lt; <span class="variable language_">this</span>.<span class="property">member</span>.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="comment">// done是标志位，用于判断遍历是否完成</span></span><br><span class="line">                    <span class="keyword">const</span> result = &#123;<span class="attr">value</span>:<span class="variable language_">this</span>.<span class="property">member</span>[i] , <span class="attr">done</span>:<span class="literal">false</span>&#125;;</span><br><span class="line">                    <span class="comment">// 下标自增</span></span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="comment">// 返回结果</span></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span>&#123;<span class="attr">value</span>:<span class="literal">undefined</span> , <span class="attr">done</span>:<span class="literal">true</span>&#125;<span class="comment">//done:true 表示完成遍历</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(class1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规的数组遍历方法：forEach(),但是不符合面向对象的要求</span></span><br><span class="line"><span class="comment">// class1.member.forEach();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重点： 自定义遍历要求：使用迭代器和for of方法遍历上面对象中的数组，这里考察对迭代器工作原理的理解</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> class1)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果展示-6"><a href="#结果展示-6" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L2/6.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> ES6 </category>
          
          <category> rest参数 </category>
          
          <category> promise </category>
          
          <category> symbol数据类型 </category>
          
          <category> iterator迭代器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 拓展运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6复习(1)</title>
      <link href="/2022/09/13/ES6%E5%A4%8D%E4%B9%A01/"/>
      <url>/2022/09/13/ES6%E5%A4%8D%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h1 id="Es6学习笔记（1）"><a href="#Es6学习笔记（1）" class="headerlink" title="Es6学习笔记（1）"></a>Es6学习笔记（1）</h1><h2 id="1-let声明变量"><a href="#1-let声明变量" class="headerlink" title="1.let声明变量"></a>1.<strong style="color:red">let</strong>声明变量</h2><ul><li><strong><code>let</code>关键字是用于声明变量(存在作用域,不能进行变量提升)，作用与var基本一样</strong></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明变量</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b,c,d;</span><br><span class="line"><span class="keyword">let</span> e = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">521</span>, g = <span class="string">&#x27;iloveyou&#x27;</span>, h = [];<span class="comment">//赋值，字符串，数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 变量不能重复声明</span></span><br><span class="line"><span class="comment">// let star = &#x27;罗志祥&#x27;;</span></span><br><span class="line"><span class="comment">// let star = &#x27;小猪&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 块级作用域  全局, 函数, eval</span></span><br><span class="line"><span class="comment">// if else while for </span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     let girl = &#x27;周扬青&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(girl);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 不存在变量提升(let直接报错)</span></span><br><span class="line"><span class="comment">// 什么是变量提升呢：就是先调用变量，在声明变量，浏览器就会输出一个undefined</span></span><br><span class="line"><span class="comment">// console.log(song);</span></span><br><span class="line"><span class="comment">// let song = &#x27;恋爱达人&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 不影响作用域链</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L1/1.png" alt="image"><br><img src="/../upload/Es6/L1/2.png" alt="image"><br><img src="/../upload/Es6/L1/3.png" alt="image"></p><h2 id="2-const声明变量"><a href="#2-const声明变量" class="headerlink" title="2.const声明变量"></a>2.<strong style="color:red">const</strong>声明变量</h2><ul><li><strong><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</strong></li><li><strong><code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值</strong></li><li><strong><code>const</code>的作用域与let命令相同：只在声明所在的块级作用域内有效。</strong></li><li><strong><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</strong></li></ul><h2 id="3-解构赋值"><a href="#3-解构赋值" class="headerlink" title="3.解构赋值"></a>3.<strong style="color:red">解构赋值</strong></h2><ul><li><strong><code>ES6</code> 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为<code>解构赋值</code>。</strong></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 数组的结构</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">F4</span> = [<span class="string">&#x27;小沈阳&#x27;</span>,<span class="string">&#x27;刘能&#x27;</span>,<span class="string">&#x27;赵四&#x27;</span>,<span class="string">&#x27;宋小宝&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [xiao, liu, zhao, song] = <span class="variable constant_">F4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiao);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(liu);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhao);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 对象的解构</span></span><br><span class="line"><span class="keyword">const</span> shan = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;赵本山&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;不详&#x27;</span>,</span><br><span class="line">    <span class="attr">xiaopin</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以演小品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, xiaopin&#125; = shan;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaopin);</span><br><span class="line"><span class="title function_">xiaopin</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这可以让我们的代码写起来更加的简洁</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L1/4.png" alt="image"></p><h2 id="4-模板字符串"><a href="#4-模板字符串" class="headerlink" title="4.模板字符串"></a>4.<strong style="color:red">模板字符串</strong></h2><ul><li><strong><code>ES6</code> 引入新的声明字符串的方式 『&#96;&#96;』 ‘’ “”</strong></li><li><strong>作用:</strong><ul><li><strong>简化字符串的拼接</strong></li><li><strong>使用&#96;&#96;对字符串进行拼接</strong></li><li><strong>变量的部分使用${xxx}代替</strong></li></ul></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 声明字符串</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">`我也是一个字符串哦!`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="keyword">typeof</span> a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 内容中可以直接出现换行符,而var则需要用&#x27;+&#x27;来进行拼接，非常的麻烦</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;沈腾&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;玛丽&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;魏翔&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;艾伦&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 变量拼接(可以直接进行变量的拼接，不需要再借助+，固定格式$&#123;变量名&#125;)</span></span><br><span class="line"><span class="keyword">let</span> lovest = <span class="string">&#x27;魏翔&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;lovest&#125;</span>是我心目中最搞笑的演员!!`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out);</span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L1/5.png" alt="image"></p><h2 id="5-对象的简化写法"><a href="#5-对象的简化写法" class="headerlink" title="5.对象的简化写法"></a>5.<strong style="color:red">对象的简化写法</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。</span></span><br><span class="line"><span class="comment">//这样的书写更加简洁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先在对象外设置变量和方法</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;山东蓝翔&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们可以改变你!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在对象中引入设置好的变量和方法</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    name,</span><br><span class="line">    change,</span><br><span class="line">    <span class="comment">// 这里的方法可以省略 :function</span></span><br><span class="line">    <span class="title function_">improve</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以提高你的技能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br><span class="line">school.<span class="title function_">improve</span>();</span><br></pre></td></tr></table></figure><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L1/6.png" alt="image"></p><h2 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6.箭头函数"></a>6.<strong style="color:red">箭头函数</strong></h2><ul><li><strong>特点:</strong><ul><li><strong>箭头函数无<code>this</code>指向,会向外层寻找<code>this</code>指向,如果它定义在一个对象身上,那么该<code>箭头函数的this</code>就指向该对象,若该箭头函数外层什么也没有就会默认指向<code>windows</code></strong></li><li><strong>相较于传统的定义函数更为简洁</strong></li><li><strong>不能作为<code>构建实例化对象</code></strong></li><li><strong>不能使用<code>arguments</code>变量</strong></li></ul></li><li><strong>使用场景:</strong><ul><li><strong>箭头函数适合与 <code>this</code> 无关的回调. <code>定时器</code>, <code>数组的方法回调</code></strong></li><li><strong>箭头函数不适合与 <code>this</code> 有关的回调.  <code>事件回调</code>, <code>对象的方法</code></strong></li></ul></li></ul><h3 id="代码展示-3"><a href="#代码展示-3" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 允许使用「箭头」（=&gt;）定义函数。</span></span><br><span class="line"><span class="comment">//声明一个函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">a,b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. this 是静态的. this 始终指向函数声明时所在作用域下的 this 的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getName2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 window 对象的 name 属性</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;五邑大学&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;wyu&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接调用</span></span><br><span class="line"><span class="title function_">getName</span>();<span class="comment">//五邑大学</span></span><br><span class="line"><span class="title function_">getName2</span>();<span class="comment">//五邑大学</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//call 方法调用，call方法：调用指定对象的方法，即将原函数中的this指向目标对象的属性</span></span><br><span class="line">getName.<span class="title function_">call</span>(school);<span class="comment">//wyu function存在变量提升</span></span><br><span class="line">getName2.<span class="title function_">call</span>(school);<span class="comment">//五邑大学(因为let没有变量提升,因此它始终指向函数声明时所在作用域下的this值，</span></span><br><span class="line"><span class="comment">// 该函数定义在window下，即它始终指向五邑大学)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 不能作为构造实例化对象</span></span><br><span class="line"><span class="comment">// let Person = (name, age) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     this.name = name;</span></span><br><span class="line"><span class="comment">//     this.age = age;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let me = new Person(&#x27;xiao&#x27;,30);</span></span><br><span class="line"><span class="comment">// console.log(me);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 不能使用 arguments 变量</span></span><br><span class="line"><span class="comment">// let fn = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(arguments);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fn(1,2,3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 箭头函数的简写</span></span><br><span class="line">    <span class="comment">//1) 省略小括号, 当形参有且只有一个的时候</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">add</span> = n =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> n + n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">9</span>));</span><br><span class="line">    <span class="comment">//2) 省略花括号, 当代码体只有一条语句的时候, 此时 return 必须省略</span></span><br><span class="line">    <span class="comment">// 而且语句的执行结果就是函数的返回值</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">pow</span> = n =&gt; n * n;</span><br><span class="line">        </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow</span>(<span class="number">8</span>));    </span><br></pre></td></tr></table></figure><h3 id="结果展示-4"><a href="#结果展示-4" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L1/7.png" alt="image"></p><h3 id="箭头函数的使用场景"><a href="#箭头函数的使用场景" class="headerlink" title="箭头函数的使用场景"></a><strong>箭头函数的<code>使用场景</code></strong></h3><ul><li><strong>定时器复习</strong><ul><li><strong>1.间隔定时器(每隔一段时间执行一次代码)</strong><ul><li><strong><code>setInterval(函数，时间)</code> &#x2F;&#x2F;时间单位是毫秒，每隔设置的时间执行函数里的内容一遍(一直执行)</strong></li></ul></li><li><strong>2.延时定时器(规定时间执行代码)</strong><ul><li><strong><code>setTimeout(函数，时间)</code> &#x2F;&#x2F;到达相应是时间执行代码(只执行一遍)</strong></li></ul></li><li><strong>3.关闭定时器和定时器返回值</strong><ul><li><strong><code>clearTimeout(延时定时器)</code></strong></li><li><strong><code>clearInterval(间隔定时器)</code></strong></li></ul></li></ul></li><li><strong><code>filter</code>(函数)方法的作用：对指定数组按照指定的函数方法进行过滤</strong></li></ul><h3 id="代码展示-4"><a href="#代码展示-4" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实践1：点击div两秒过后变为粉色</span></span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.div&#x27;</span>);</span><br><span class="line"><span class="comment">// 注册点击事件</span></span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span> , <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 设置两秒的定时器</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 这里用了箭头函数，this静态指向的是外层作用域，即指向点击事件的对应的div，到了外层的function函数，就动态的指向div了</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span>= <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实践2：返回数组中的偶数</span></span><br><span class="line"><span class="comment">// 复习：filter(函数)方法的作用：对指定数组按照指定的函数方法进行过滤</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span> , <span class="number">5</span> , <span class="number">6</span> , <span class="number">8</span> , <span class="number">16</span> , <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// let result = arr.filter((item) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     if (item%2 === 0) &#123;</span></span><br><span class="line"><span class="comment">//         return true;</span></span><br><span class="line"><span class="comment">//     &#125; else &#123;</span></span><br><span class="line"><span class="comment">//         return false;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可简写为以下(非常的简单)</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item%<span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数的使用场景：</span></span><br><span class="line"><span class="comment">// 箭头函数适合与 this 无关的回调. 定时器, 数组的方法回调</span></span><br><span class="line"><span class="comment">// 箭头函数不适合与 this 有关的回调.  事件回调, 对象的方法</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-5"><a href="#结果展示-5" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Es6/L1/1.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> let </tag>
            
            <tag> const </tag>
            
            <tag> 解构赋值 </tag>
            
            <tag> 模板字符串 </tag>
            
            <tag> 对象的简化写法 </tag>
            
            <tag> 箭头函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel项目部署</title>
      <link href="/2022/09/13/vercel%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/09/13/vercel%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Vercel服务器免费部署上线自己的项目"><a href="#使用Vercel服务器免费部署上线自己的项目" class="headerlink" title="使用Vercel服务器免费部署上线自己的项目"></a>使用<strong style="color:red">Vercel</strong>服务器免费部署上线自己的项目</h1><h2 id="介绍一下vercel"><a href="#介绍一下vercel" class="headerlink" title="介绍一下vercel"></a>介绍一下<strong style="color:red">vercel</strong></h2><ul><li><strong><strong style="color:red">vercel</strong> 是一个站点托管平台，提供<strong style="color:red">CDN</strong>加速，同类的平台有<strong style="color:red">Netlify </strong>和 <strong style="color:red">github Page</strong>，相比之下，<strong style="color:red">vercel</strong> 国内的访问速度更快，并且提供<strong style="color:red">Production</strong>环境和<strong style="color:red">development</strong>环境，对于项目开发非常的有用的，并且支持持续集成，一次<strong style="color:red">push</strong>或者一次<strong style="color:red">PR</strong>会自动化构建发布，发布在<strong style="color:red">development</strong>环境，都会生成不一样的链接可供预览。</strong></li><li><strong>并且<strong style="color:red">vercel</strong>针对个人用户是免费的，针对<strong style="color:red">teams</strong>用户是收费的！</strong></li><li><strong><strong style="color:red">vercel</strong>类似于<strong style="color:red">github Page</strong>，但远比<strong style="color:red">github Page</strong>强大，速度也快得多得多，而且将<strong style="color:red">github</strong>授权给<strong style="color:red">vercel</strong>后，可以达到最优雅的发布体验，只需将代码轻轻一推，项目就自动更新部署了。</strong></li><li><strong><strong style="color:red">vercel</strong> 还支持部署<strong style="color:red">serverless接口</strong> 。那代表着，其不仅仅可以部署静态网站，甚至可以部署动态网站，而这些功能，统统都是免费的，<strong style="color:red">vercel</strong> 还支持自动配置<strong style="color:red">https</strong> ，不用自己去<strong style="color:red">freeSSL</strong> 申请证书，更是省去了一大堆证书的配置</strong></li></ul><h1 id="部署方式：github仓库部署-和-本地部署"><a href="#部署方式：github仓库部署-和-本地部署" class="headerlink" title="部署方式：github仓库部署 和 本地部署"></a>部署方式：<strong style="color:red">github</strong>仓库部署 和 <strong style="color:red">本地</strong>部署</h1><h2 id="一-github仓库部署（这里展示使用网易云后端接口）"><a href="#一-github仓库部署（这里展示使用网易云后端接口）" class="headerlink" title="一.github仓库部署（这里展示使用网易云后端接口）"></a>一.<strong style="color:red">github</strong>仓库部署（这里展示使用网易云后端接口）</h2><h3 id="1-搜索vercel进入其官网，使用github登录好后点击new-project："><a href="#1-搜索vercel进入其官网，使用github登录好后点击new-project：" class="headerlink" title="1. 搜索vercel进入其官网，使用github登录好后点击new project："></a>1. <strong>搜索<strong style="color:red">vercel</strong>进入其官网，使用<strong style="color:red">github</strong>登录好后点击<strong style="color:red">new project</strong>：</strong></h3><p><img src="/../upload/vercel/1.png" alt="image"></p><h3 id="2-找到在github仓库中自己想要部署上线的项目，点击import："><a href="#2-找到在github仓库中自己想要部署上线的项目，点击import：" class="headerlink" title="2. 找到在github仓库中自己想要部署上线的项目，点击import："></a>2. <strong>找到在<strong style="color:red">github仓库</strong>中自己想要部署上线的项目，点击<strong style="color:red">import</strong>：</strong></h3><p><img src="/../upload/vercel/2.png" alt="image"></p><h3 id="3-填写好项目名字，点击deploy，等待创建"><a href="#3-填写好项目名字，点击deploy，等待创建" class="headerlink" title="3. 填写好项目名字，点击deploy，等待创建"></a>3. <strong>填写好项目名字，点击<strong style="color:red">deploy</strong>，等待创建</strong></h3><p><img src="/../upload/vercel/3.png" alt="image"></p><h3 id="4-创建成功，出现如下-三个域名-："><a href="#4-创建成功，出现如下-三个域名-：" class="headerlink" title="4. 创建成功，出现如下(三个域名)："></a>4. <strong>创建成功，出现如下(三个域名)：</strong></h3><p><img src="/../upload/vercel/4.png" alt="image"></p><ol><li><strong>然后我们随意点击三个中的一个<strong style="color:red">域名</strong></strong><br><img src="/../upload/vercel/5.png" alt="image"></li></ol><h2 id="二-本地部署"><a href="#二-本地部署" class="headerlink" title="二.本地部署"></a>二.<strong style="color:red">本地</strong>部署</h2><h4 id="有时候我们在本地电脑写好的项目也想部署到vercel上该如何操作呢"><a href="#有时候我们在本地电脑写好的项目也想部署到vercel上该如何操作呢" class="headerlink" title="有时候我们在本地电脑写好的项目也想部署到vercel上该如何操作呢?"></a>有时候我们在本地电脑写好的项目也想部署到<strong style="color:red">vercel</strong>上该如何操作呢?</h4><h3 id="1-首先在项目的根目录新建vercel-json文件，内容："><a href="#1-首先在项目的根目录新建vercel-json文件，内容：" class="headerlink" title="1. 首先在项目的根目录新建vercel.json文件，内容："></a>1. <strong>首先在项目的根目录新建<strong style="color:red">vercel.json</strong>文件，内容：</strong></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rewrites&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;source&quot;</span><span class="punctuation">:</span><span class="string">&quot;api/(.*)&quot;</span><span class="punctuation">,</span><span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span><span class="string">&quot;/api&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../upload/vercel/6.png" alt="image"></p><h3 id="2-在根目录新建api文件夹，里面新建文件index-js，index-js内容："><a href="#2-在根目录新建api文件夹，里面新建文件index-js，index-js内容：" class="headerlink" title="2. 在根目录新建api文件夹，里面新建文件index.js，index.js内容："></a>2. <strong>在根目录新建<strong style="color:red">api文件夹</strong>，里面新建文件<strong style="color:red">index.js</strong>，<strong style="color:red">index.js</strong>内容：</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;../dist&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app</span><br></pre></td></tr></table></figure><p><img src="/../upload/vercel/7.png" alt="image"></p><h3 id="3-项目安装vercel-在终端中输入以下代码"><a href="#3-项目安装vercel-在终端中输入以下代码" class="headerlink" title="3. 项目安装vercel[在终端中输入以下代码]"></a>3. <strong>项目安装<strong style="color:red">vercel</strong>[在终端中输入以下代码]</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i vercel -g</span><br></pre></td></tr></table></figure><h3 id="4-安装好后，终端输入"><a href="#4-安装好后，终端输入" class="headerlink" title="4. 安装好后，终端输入:"></a>4. <strong>安装好后，终端输入:</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vercel login</span><br></pre></td></tr></table></figure><h3 id="5-选择-Log-in-to-Vercel-github"><a href="#5-选择-Log-in-to-Vercel-github" class="headerlink" title="5. 选择 Log in to Vercel github"></a>5. <strong>选择 <strong style="color:red">Log in to Vercel github</strong></strong></h3><h3 id="6-终端输入：vercel"><a href="#6-终端输入：vercel" class="headerlink" title="6. 终端输入：vercel"></a>6. <strong>终端输入：<strong style="color:red">vercel</strong></strong></h3><h3 id="7-狂点回车键"><a href="#7-狂点回车键" class="headerlink" title="7. 狂点回车键"></a>7. <strong>狂点回车键</strong></h3><h3 id="8-生成一个网址，就是我们部署上线的项目的地址了-域名-："><a href="#8-生成一个网址，就是我们部署上线的项目的地址了-域名-：" class="headerlink" title="8. 生成一个网址，就是我们部署上线的项目的地址了(域名)："></a>8. <strong>生成一个网址，就是我们部署上线的项目的地址了(域名)：</strong></h3><p><img src="/../upload/vercel/8.png" alt="image"><br> <strong>同时我们也可以在<strong style="color:red">vercel</strong>的官网上查看到我们部署上线了的项目</strong><br><img src="/../upload/vercel/9.png" alt="image"></p><h3 id="9-修改了项目，想要重新部署？终端输入"><a href="#9-修改了项目，想要重新部署？终端输入" class="headerlink" title="9. 修改了项目，想要重新部署？终端输入:"></a>9. <strong>修改了项目，想要重新部署？终端输入:</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vercel --prod</span><br></pre></td></tr></table></figure><blockquote><p>这篇博客引用了作者为”<strong>SoSalty</strong>“的文章<br>原文链接为:<a href="https://blog.csdn.net/SoSalty/article/details/124516171">CSDN</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vercel </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(35)-Vue中路由器的两种工作模式</title>
      <link href="/2022/09/04/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B035/"/>
      <url>/2022/09/04/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B035/</url>
      
        <content type="html"><![CDATA[<h1 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h1><ol><li><strong>对于一个<strong style="color:red">url</strong>来说，什么是<strong style="color:red">hash</strong>值？—— #及其后面的内容就是<strong style="color:red">hash</strong>值。</strong></li><li><strong><strong style="color:red">hash</strong>值不会包含在 HTTP 请求中，即：<strong style="color:red">hash</strong>值不会带给服务器。</strong></li></ol><h2 id="hash模式："><a href="#hash模式：" class="headerlink" title="hash模式："></a><strong><strong style="color:red">hash</strong>模式：</strong></h2><ul><li><ol><li><strong>地址中永远带着<strong style="color:red">#</strong>号，不美观 。</strong></li></ol></li><li><ol start="2"><li><strong>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</strong></li></ol></li><li><ol start="3"><li><strong>兼容性较好。</strong></li></ol></li></ul><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示:"></a>效果展示:</h3><p><img src="/../upload/Vue/V35/1.png" alt="image"></p><h2 id="history模式："><a href="#history模式：" class="headerlink" title="history模式："></a><strong style="color:red">history</strong>模式：</h2><ul><li><ol><li><strong>地址干净，美观 。</strong></li></ol></li><li><ol start="2"><li><strong>兼容性和<strong style="color:red">hash</strong>模式相比略差。</strong></li></ol></li><li><ol start="3"><li><strong>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</strong></li></ol></li></ul><h3 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示:"></a>效果展示:</h3><p><img src="/../upload/Vue/V35/2.png" alt="image"></p><h2 id="案例代码展示"><a href="#案例代码展示" class="headerlink" title="案例代码展示:"></a>案例代码展示:</h2><ul><li><strong>router-index.js</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里配置路由(创建整个应用页面的路由器)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先引入路由</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入各个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="comment">// 设置路由器的工作模式</span></span><br><span class="line"><span class="comment">// 1.hash: 网页url上有 &quot;/#/&quot; ,不美观但是不兼容性较好</span></span><br><span class="line"><span class="comment">// 2.history : 网页url上没有 &quot;/#/&quot; 简洁美观但是兼容性较差</span></span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;hash&#x27;</span>,</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:About</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;关于&#x27;</span>&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:Home</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;shouye&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;主页&#x27;</span>&#125;,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">            <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">                    <span class="comment">// 设置路由的元信息(程序员自定义的一些信息)</span></span><br><span class="line">                    <span class="attr">meta</span>:&#123;</span><br><span class="line">                        <span class="comment">// 设置鉴权标志,to带有这个标志的一律鉴定权限</span></span><br><span class="line">                        <span class="attr">isAuth</span>:<span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">title</span>:<span class="string">&#x27;消息&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 使用三级路由</span></span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 给这个三级路由命名未&quot;xiangqing&quot;</span></span><br><span class="line">                            name : <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">                            <span class="title function_">props</span>(<span class="params">route</span>)&#123;<span class="comment">//这里传入route($route也可以)就能获取到本地路由上的所有数据</span></span><br><span class="line">                                <span class="keyword">return</span> &#123;</span><br><span class="line">                                    <span class="comment">// 在通过对象赋值的方式传递数到指定的组件(route组件)即可</span></span><br><span class="line">                                    <span class="attr">id</span>: route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">                                    <span class="attr">title</span>: route.<span class="property">query</span>.<span class="property">title</span> </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line"></span><br><span class="line">                            <span class="attr">meta</span>:&#123;</span><br><span class="line">                                <span class="comment">// 设置鉴权标志,to带有这个标志的一律鉴定权限</span></span><br><span class="line">                                <span class="attr">isAuth</span>:<span class="literal">true</span>,</span><br><span class="line">                                <span class="attr">title</span>:<span class="string">&#x27;详情&#x27;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                    <span class="attr">meta</span>:&#123;</span><br><span class="line">                        <span class="comment">// 设置鉴权标志,to带有这个标志的一律鉴定权限</span></span><br><span class="line">                        <span class="attr">isAuth</span>:<span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">title</span>:<span class="string">&#x27;新闻&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置独享路由守卫(只有一个api,无前置后置之分)</span></span><br><span class="line"><span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;路由守卫的三个参数:&#x27;</span>,to , <span class="keyword">from</span>, next);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置访问权限(localhost里面存数据为school:wyu为放行可见message组件和news组件)</span></span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;<span class="comment">//检查meta信息判断是否需要鉴定权限</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;wyu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()<span class="comment">//调用放行属性,允许访问该路由组件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;学校名不对,无权限查看!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()<span class="comment">//不需要鉴权则直接放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置全局后置路由守卫-初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;后置路由守卫&#x27;,to,from)</span></span><br><span class="line"><span class="comment">// 路由跳转后将meta下的title属性同步到网页标题上</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;wyu&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(34)-Vue中的路由守卫</title>
      <link href="/2022/09/04/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B034/"/>
      <url>/2022/09/04/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B034/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中的路由守卫-路由跳转前中后的一些钩子函数"><a href="#Vue中的路由守卫-路由跳转前中后的一些钩子函数" class="headerlink" title="Vue中的路由守卫(路由跳转前中后的一些钩子函数)"></a>Vue中的路由守卫(路由跳转前中后的一些钩子函数)</h1><ul><li><strong>作用:对路由进行权限的控制</strong></li></ul><h2 id="Vue中的路由守卫分为三种"><a href="#Vue中的路由守卫分为三种" class="headerlink" title="Vue中的路由守卫分为三种"></a>Vue中的路由守卫分为三种</h2><ol><li><strong>全局路由守卫（前置和后置）</strong></li><li><strong>独享路由守卫</strong></li><li><strong>3.组件内路由守卫</strong></li></ol><h3 id="1-全局路由守卫-所有路由组件都会经过"><a href="#1-全局路由守卫-所有路由组件都会经过" class="headerlink" title="(1)-全局路由守卫(所有路由组件都会经过)"></a>(1)-全局路由守卫(所有路由组件都会经过)</h3><ul><li><p><strong>1.全局前置路由守卫(在<strong style="color:red">index.js</strong>中暴露路由组件之前编写)</strong></p><ul><li><strong>初始化以及每次路由跳转之前调用这个给<strong style="color:red">api</strong>里面的函数</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前置全局路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>回调函数中的参数，<strong style="color:red">to</strong>：进入到哪个路由去，<strong style="color:red">from</strong>：从哪个路由离开，<strong style="color:red">next()</strong>：放行函数，决定是否展示你要看到的路由页面。</strong></p></li><li><p><strong>从名字全局前置守卫不难理解，它是全局的，即对 <strong style="color:red">整个单页面应用(SPA)</strong> 中的所有路由都生效，所以当定义了全局的前置守卫，在进入每一个路由之前都会调用这个回调，那么如果你在回调中对路由的跳转条件判断出错，简单点就是死循环…因为你遗漏了某种路由跳转的情况，守卫会一直执行。所以在使用全局前置守卫的时候一定要判断清楚可能会出现的路由跳转的情况。在的项目当中常用于进行权限的判断,相当于门卫查看你进门的证件</strong></p></li><li><p><strong>2.全局后置路由守卫(在index.js中暴露路由组件之前编写)</strong></p><ul><li><strong>初始化以及每次路由跳转之后调用这个给api里面的函数</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局后置路由守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;&#125;）</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>回调函数中只有两个参数，<strong style="color:red">to</strong>：进入到哪个路由去，<strong style="color:red">from</strong>：从哪个路由离。</strong></p></li><li><p><strong>理解了全局前置守卫，那么全局后置守卫也就那么一回事。全局后置守卫是整个单页应用中每一次路由跳转后都会执行其中的回调。所以多用于路由跳转后的相应页面操作，并不像全局前置守卫那样会在回调中进行页面的重定向或跳转。项目当中常用于进行路由跳转网页标题的自定义</strong></p></li></ul><h3 id="案例代码展示"><a href="#案例代码展示" class="headerlink" title="案例代码展示:"></a>案例代码展示:</h3><ul><li><strong>要求:通过设置<strong style="color:red">全局路由守卫(前置和后置)</strong>控制访问<strong style="color:red">home</strong>组件下的<strong style="color:red">news</strong>和<strong style="color:red">message</strong>组件需要权限{localhost下需要有school:wyu}[前置路由守卫],并且路由的跳转,页面的标题也随之改变(通过<strong style="color:red">meta</strong>属性设置参数实现)[后置路由守卫]</strong></li><li><strong><strong style="color:red">router-index.js</strong></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里配置路由(创建整个应用页面的路由器)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先引入路由</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入各个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:About</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;关于&#x27;</span>&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:Home</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;shouye&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;主页&#x27;</span>&#125;,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">            <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">                    <span class="comment">// 设置路由的元信息(程序员自定义的一些信息)</span></span><br><span class="line">                    <span class="attr">meta</span>:&#123;</span><br><span class="line">                        <span class="comment">// 设置鉴权标志,to带有这个标志的一律鉴定权限</span></span><br><span class="line">                        <span class="attr">isAuth</span>:<span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">title</span>:<span class="string">&#x27;消息&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 使用三级路由</span></span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 给这个三级路由命名未&quot;xiangqing&quot;</span></span><br><span class="line">                            name : <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">                            <span class="title function_">props</span>(<span class="params">route</span>)&#123;<span class="comment">//这里传入route($route也可以)就能获取到本地路由上的所有数据</span></span><br><span class="line">                                <span class="keyword">return</span> &#123;</span><br><span class="line">                                    <span class="comment">// 在通过对象赋值的方式传递数到指定的组件(route组件)即可</span></span><br><span class="line">                                    <span class="attr">id</span>: route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">                                    <span class="attr">title</span>: route.<span class="property">query</span>.<span class="property">title</span> </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line"></span><br><span class="line">                            <span class="attr">meta</span>:&#123;</span><br><span class="line">                                <span class="comment">// 设置鉴权标志,to带有这个标志的一律鉴定权限</span></span><br><span class="line">                                <span class="attr">isAuth</span>:<span class="literal">true</span>,</span><br><span class="line">                                <span class="attr">title</span>:<span class="string">&#x27;详情&#x27;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                    <span class="attr">meta</span>:&#123;</span><br><span class="line">                        <span class="comment">// 设置鉴权标志,to带有这个标志的一律鉴定权限</span></span><br><span class="line">                        <span class="attr">isAuth</span>:<span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">title</span>:<span class="string">&#x27;新闻&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置全局路由守卫(在暴露路由之前)</span></span><br><span class="line"><span class="comment">// 1.全局前置路由守卫</span></span><br><span class="line"><span class="comment">// 使用路由全新的api: beforeEach(函数)</span></span><br><span class="line"><span class="comment">// 表示:初始化以及每次路由跳转之前调用这个给api里面的函数</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 里面接收三个参数:to(跳向哪个路由组件) from(来自哪个路由组件) next(放行)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前置路由守卫的三个参数:&#x27;</span>,to , <span class="keyword">from</span>, next);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置访问权限(localhost里面存数据为school:wyu为放行可见message组件和news组件)</span></span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;<span class="comment">//检查meta信息判断是否需要鉴定权限</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;wyu&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()<span class="comment">//调用放行属性,允许访问该路由组件</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对,无权限查看!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()<span class="comment">//不需要鉴权则直接放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.全局后置路由守卫</span></span><br><span class="line"><span class="comment">// 使用路由全新的api: afterEach(函数)</span></span><br><span class="line"><span class="comment">// 表示:初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line"><span class="comment">// 项目当中一般是用于转换页面标题为自定义的title</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 里面接收两个参数:to(跳向哪个路由组件) from(来自哪个路由组件)</span></span><br><span class="line"><span class="comment">// console.log(&#x27;后置路由守卫&#x27;,to,from)</span></span><br><span class="line">    <span class="comment">//每次跳转展示对应的路由组件标题(meta里面的title属性)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;wyu&#x27;</span> </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V34/2.gif" alt="image"></p><h3 id="2-独享路由守卫-指定路由组件独有的并且只有前置没有后置"><a href="#2-独享路由守卫-指定路由组件独有的并且只有前置没有后置" class="headerlink" title="(2)-独享路由守卫(指定路由组件独有的并且只有前置没有后置)"></a>(2)-独享路由守卫(指定路由组件独有的并且只有前置没有后置)</h3><ul><li><strong>1.独享路由守卫(在index.js中对应的路由组件规则里编写)</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//独享路由守卫</span></span><br><span class="line"><span class="attr">beforeEnter</span>:<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>与全局路由守卫用法一致，但是只能针对一个页面使用,但是没有独享后置路由守卫</strong></li></ul><h3 id="案例代码展示-1"><a href="#案例代码展示-1" class="headerlink" title="案例代码展示:"></a>案例代码展示:</h3><ul><li><strong>要求:通过设置<strong style="color:red">独享路由守卫</strong>控制访问访问<strong style="color:red">home</strong>组件下的<strong style="color:red">news</strong>组件需要权限{localhost下需要有school:wyu},并且路由的跳转,页面的标题也随之改变(通过meta属性设置参数实现)[后置路由守卫]</strong></li><li><strong><strong style="color:red">router-index.js</strong></strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里配置路由(创建整个应用页面的路由器)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先引入路由</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入各个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:About</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;关于&#x27;</span>&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:Home</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;shouye&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;主页&#x27;</span>&#125;,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">            <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">                    <span class="comment">// 设置路由的元信息(程序员自定义的一些信息)</span></span><br><span class="line">                    <span class="attr">meta</span>:&#123;</span><br><span class="line">                        <span class="comment">// 设置鉴权标志,to带有这个标志的一律鉴定权限</span></span><br><span class="line">                        <span class="attr">isAuth</span>:<span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">title</span>:<span class="string">&#x27;消息&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 使用三级路由</span></span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 给这个三级路由命名未&quot;xiangqing&quot;</span></span><br><span class="line">                            name : <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">                            <span class="title function_">props</span>(<span class="params">route</span>)&#123;<span class="comment">//这里传入route($route也可以)就能获取到本地路由上的所有数据</span></span><br><span class="line">                                <span class="keyword">return</span> &#123;</span><br><span class="line">                                    <span class="comment">// 在通过对象赋值的方式传递数到指定的组件(route组件)即可</span></span><br><span class="line">                                    <span class="attr">id</span>: route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">                                    <span class="attr">title</span>: route.<span class="property">query</span>.<span class="property">title</span> </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line"></span><br><span class="line">                            <span class="attr">meta</span>:&#123;</span><br><span class="line">                                <span class="comment">// 设置鉴权标志,to带有这个标志的一律鉴定权限</span></span><br><span class="line">                                <span class="attr">isAuth</span>:<span class="literal">true</span>,</span><br><span class="line">                                <span class="attr">title</span>:<span class="string">&#x27;详情&#x27;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                    <span class="attr">meta</span>:&#123;</span><br><span class="line">                        <span class="comment">// 设置鉴权标志,to带有这个标志的一律鉴定权限</span></span><br><span class="line">                        <span class="attr">isAuth</span>:<span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">title</span>:<span class="string">&#x27;新闻&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置独享路由守卫</span></span><br><span class="line"><span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 设置访问权限(localhost里面存数据为school:wyu为放行可见message组件和news组件)</span></span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;<span class="comment">//检查meta信息判断是否需要鉴定权限</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;wyu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()<span class="comment">//调用放行属性,允许访问该路由组件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;学校名不对,无权限查看!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()<span class="comment">//不需要鉴权则直接放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置全局后置路由守卫-初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="comment">// 路由跳转后将meta下的title属性同步到网页标题上</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;wyu&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V34/3.gif" alt="image"></p><h3 id="3-组件路由守卫-在对应的组件-组件-vue-当中编写"><a href="#3-组件路由守卫-在对应的组件-组件-vue-当中编写" class="headerlink" title="(3)-组件路由守卫(在对应的组件(组件.vue)当中编写)"></a>(3)-组件路由守卫(在对应的组件(组件.vue)当中编写)</h3><ul><li><strong>1.通过路由规则(index.js中定义)进入该组件</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入组件api</span></span><br><span class="line"><span class="attr">beforeRouteEnter</span>:<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>2.通过路由规则(index.js中定义)离开该组件</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//离开组件api</span></span><br><span class="line"><span class="attr">beforeRouteLeave</span>:<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>上面三个参数(to,from,next)的使用基本一致</strong></li></ul><h3 id="案例代码展示-2"><a href="#案例代码展示-2" class="headerlink" title="案例代码展示:"></a>案例代码展示:</h3><ul><li><strong>要求:通过设置<strong style="color:red">组件路由守卫</strong>控制访问访问<strong style="color:red">about</strong>组件需要权限{localhost下需要有school:wyu},并且路由的跳转,页面的标题也随之改变(通过meta属性设置参数实现)[后置路由守卫]</strong></li><li><strong>About组件</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是About的内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        name : <span class="string">&#x27;About&#x27;</span> ,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 设置组件路由守卫</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//1.进入组件路由守卫：通过路由规则(不能通过a标签或者是组件标签表用)，进入该组件时被调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你通过路由规则进入了App组件&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 设置访问权限(localhost里面存数据为school:wyu为放行可见message组件和news组件)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;<span class="comment">//检查meta信息判断是否需要鉴定权限</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;wyu&#x27;</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">next</span>()<span class="comment">//调用放行属性,允许访问该路由组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对,无权限查看!&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">next</span>()<span class="comment">//不需要鉴权则直接放行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//2.离开组件路由守卫：通过路由规则(不能通过a标签或者是组件标签表用)，离开该组件时被调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 可以设置一些离开组件时的逻辑</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你通过路由规则离开了About组件&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 但是一定要记得调用next(),不然就不能离开该组件了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">next</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V34/4.gif" alt="image"></p><h2 id="三个参数-to-from-next-的展示"><a href="#三个参数-to-from-next-的展示" class="headerlink" title="三个参数(to,from,next)的展示"></a>三个参数(to,from,next)的展示</h2><p><img src="/../upload/Vue/V34/1.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(33)-两个新的生命周期钩子（路由专属）</title>
      <link href="/2022/09/03/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B033/"/>
      <url>/2022/09/03/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B033/</url>
      
        <content type="html"><![CDATA[<h1 id="两个新的生命周期钩子（路由专属）"><a href="#两个新的生命周期钩子（路由专属）" class="headerlink" title="两个新的生命周期钩子（路由专属）"></a>两个新的生命周期钩子（路由专属）</h1><ul><li><p><strong>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</strong></p></li><li><p><strong>具体名字：</strong></p><ol><li><strong><code>activated</code>路由组件被激活(获取该路由组件焦点)时触发。</strong></li><li><strong><code>deactivated</code>路由组件失活(失去该路由组件焦点)时触发。</strong></li></ol></li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><strong>使用场景</strong></h2><ul><li><strong>在渲染路由组件时 我们可能会为了保留组件内填写的数据 通过<code>&lt;keep-alive include=&quot;Home&quot;&gt;</code>标签缓存路由组件使组件不被销毁，从而监测不到组件内的beforeDestroy()销毁组件之前的钩子来进行销毁前的工作比如清除定时器等等…</strong></li><li><strong>这个时候我们就可以通过deactivated()方法来替代beforeDestroy()来进行最后的收尾工作</strong></li></ul><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h2><h3 id="要求-实现”Hello-Vue标题的渐变”"><a href="#要求-实现”Hello-Vue标题的渐变”" class="headerlink" title="要求:实现”Hello Vue标题的渐变”"></a>要求:实现”Hello Vue标题的渐变”</h3><ul><li><strong>News组件</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>Hello Vue!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给这些新闻后面加入输入框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>news001<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>news002<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>news003<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;News&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 设置透明度初识值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">opacity</span>: <span class="number">1</span>  </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 引出两个生命周期钩子(路由专属)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.activated钩子是该路由在激活(显示该路由组件)时执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">activated</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;news组件被激活了!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这里我们可以设置透明度的衰减来实现标题的变换</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 用于判断定时器是否挂载和清除</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">opacity</span>-=<span class="number">0.01</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 设置判断逻辑</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span>&lt;=<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.deactivated钩子是在路由组件失活(离开该路由组件)时触发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">deactivated</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;news组件失活了!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 清除计时器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V33/1.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello！欢迎来到我的仓库！</title>
      <link href="/2022/09/03/Hello-Blog/"/>
      <url>/2022/09/03/Hello-Blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-欢迎来到我的博客"><a href="#Hello-欢迎来到我的博客" class="headerlink" title="Hello!欢迎来到我的博客!"></a>Hello!欢迎来到我的博客!</h1><h3 id="这是我的第一篇博客，用来记录这个博客网站的诞生！"><a href="#这是我的第一篇博客，用来记录这个博客网站的诞生！" class="headerlink" title="这是我的第一篇博客，用来记录这个博客网站的诞生！"></a>这是我的第一篇博客，用来记录这个博客网站的诞生！</h3><h3 id="后续我将会在这个博客中记录自己的前端学习历程！"><a href="#后续我将会在这个博客中记录自己的前端学习历程！" class="headerlink" title="后续我将会在这个博客中记录自己的前端学习历程！"></a>后续我将会在这个博客中记录自己的前端学习历程！</h3><ul><li><ul><li><ul><li><ul><li><strong>该博客站点诞生于2022年7月13日</strong></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博主个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(32)-编程式路由导航以及缓存路由组件</title>
      <link href="/2022/09/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B032/"/>
      <url>/2022/09/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B032/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue路由（route）-编程式路由导航"><a href="#Vue路由（route）-编程式路由导航" class="headerlink" title="Vue路由（route）-编程式路由导航"></a>Vue路由（route）-编程式路由导航</h1><h2 id="为什么会需要编程式路由导航？"><a href="#为什么会需要编程式路由导航？" class="headerlink" title="为什么会需要编程式路由导航？"></a>为什么会需要编程式路由导航？</h2><ul><li><strong>我们之前学习的Vue路由(route)是通过<strong style="color:red"><router-link></strong>标签实现页面的跳转的<strong style="color:red">(声明式路由导航)</strong>,而<strong style="color:red"><router-link></strong>标签最终会解析成<strong style="color:red">&lt;\a&gt;</strong>标签渲染到页面上,但是我们都知道真正实际的开发中不可能全部路由组件都由<strong style="color:red">&lt;\a&gt;</strong>标签来引导,有时候,我们会设置一个<strong style="color:red"><button></strong>来实现点击页面(路由)的跳转,这时就用到了”<strong style="color:red">编程式路由导航</strong>”。</strong></li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理:"></a>实现原理:</h2><ul><li><strong>所谓”<strong style="color:red">编程式路由导航</strong>”其实就相当于使用<strong style="color:red">全局路由器($router)</strong>身上的一些特殊的<strong style="color:red">api</strong>配合<strong style="color:red">Vue组件</strong>的<strong style="color:red">methods</strong>方法来操控浏览器的历史记录</strong></li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h2><ul><li><strong>使路由的跳转无需再借助<strong style="color:red"><router-link></strong>标签,更加灵活!</strong></li></ul><h2 id="有5个常用的api"><a href="#有5个常用的api" class="headerlink" title="有5个常用的api"></a>有5个常用的api</h2><p><img src="/../upload/Vue/V32/1.png" alt="image"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h2><ul><li><p><strong>1.<strong style="color:red">push</strong>(压栈式路由跳转,会给浏览器留下历史记录)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串式</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象式</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名路由</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数(query或者params)，变成 /message?id=666</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">id</span>: <span class="string">&#x27;666&#x27;</span> &#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>2.<strong style="color:red">replace</strong>(取代式路由跳转,不会给浏览器留下历史记录)2.Replace(取代式路由跳转,不会给浏览器留下历史记录)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>3.<strong style="color:red">back</strong>(相当于浏览器左上角的 ”<strong style="color:red">《-</strong>”)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//实现浏览器的回退(相当于浏览器左上角的 “&lt;-” )</span></span><br></pre></td></tr></table></figure></li><li><p><strong>4.<strong style="color:red">forward</strong>(相当于浏览器左上角的 ”<strong style="color:red">-&gt;</strong>”)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//实现浏览器的前进(相当于浏览器左上角的 “-&gt;” )</span></span><br></pre></td></tr></table></figure></li><li><p><strong>5.<strong style="color:red">go</strong>(即可实现浏览器的回退又可实现浏览器的前进)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//靠go(参数),这里面的参数决定浏览器是回退还是前进</span></span><br><span class="line"><span class="comment">//当参数为-n时,回退n步,当参数为+n时,前进n步  </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="案例代码实现"><a href="#案例代码实现" class="headerlink" title="案例代码实现:"></a>案例代码实现:</h2><ul><li><p><strong><strong style="color:red">router-index.js</strong></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里配置路由(创建整个应用页面的路由器)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先引入路由</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入各个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并向外暴露路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:About</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:Home</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">            <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 使用三级路由</span></span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 给这个三级路由命名未&quot;xiangqing&quot;</span></span><br><span class="line">                            name : <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">                            <span class="title function_">props</span>(<span class="params">route</span>)&#123;<span class="comment">//这里传入route($route也可以)就能获取到本地路由上的所有数据</span></span><br><span class="line">                                <span class="keyword">return</span> &#123;</span><br><span class="line">                                    <span class="comment">// 在通过对象赋值的方式传递数到指定的组件(route组件)即可</span></span><br><span class="line">                                    <span class="attr">id</span>: route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">                                    <span class="attr">title</span>: route.<span class="property">query</span>.<span class="property">title</span> </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong><strong style="color:red">Message组件</strong></strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>  <span class="attr">v-for</span>=<span class="string">&quot;m in messageList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;m.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里使用常规的方法然url携带query[与ajax里面的query参数一致]参数 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- query参数是用于携带url信息的 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 跳转路由并携带query参数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                    // 使用路由的名字来调用路由更加简单</span></span></span><br><span class="line"><span class="string"><span class="tag">                    name : &#x27;xiangqing&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    query: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                        id: m.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">                        title: m.title&#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    &#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>&#123;&#123;m.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 将数据 m 参数传过去methods方便使用 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;push(m)&quot;</span>&gt;</span>push查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;replace(m)&quot;</span>&gt;</span>replace查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;News&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                messageList : [</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息001&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息002&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息003&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用methods配合 编程式路由导航 实现路由的切换更加灵活</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 压栈式路由跳转,会给浏览器留下历史记录(相当于点击路由链接)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">push</span>(<span class="params">m</span>)&#123;<span class="comment">//这里接收上面模板传过来的m参数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(this.$router);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 使用路由的名字来调用路由更加简单</span></span></span><br><span class="line"><span class="language-javascript">                    name : <span class="string">&#x27;xiangqing&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">query</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: m.<span class="property">id</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>: m.<span class="property">title</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 取代式路由跳转,不会给浏览器留下历史记录(相当于用新路由替换当前路由)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">replace</span>(<span class="params">m</span>)&#123;<span class="comment">//这里接收上面模板传过来的m参数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 使用路由的名字来调用路由更加简单</span></span></span><br><span class="line"><span class="language-javascript">                    name : <span class="string">&#x27;xiangqing&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">query</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: m.<span class="property">id</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>: m.<span class="property">title</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><strong style="color:red">Banner组件</strong></strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Vue Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定back()-api回退浏览器历史记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;backoff&quot;</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定forward()-api前进浏览器历史记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;ahead&quot;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定go(n)-api控制浏览器历史记录的回退和前进 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;go&quot;</span>&gt;</span>测试go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Banner&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">backoff</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 直接调用back的api即可(请求[返回]上一个记录路由)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>()</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">ahead</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 直接调用forward的api即可(请求[返回]上一个记录路由)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>()</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">go</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// go需要传递一个数值型参数进去控制浏览器历史记录的前进和后退</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">2</span>)<span class="comment">//按着浏览器的历史记录回退2步</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><strong style="color:red">Detail组件</strong></strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号:&#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题:&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Detail&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法三(直接接收query传过来的参数可直接在模板上使用)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置props接收路由传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 输出本地的route发现里面多了一个params参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// params参数里面携带者url传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;   </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V32/3.gif" alt="image"></p><h1 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h1><ul><li><strong>我们都知道,经过路由去指向组件的跳转的时候,当指向从一个组件跳向另一个组件的时候,流程是:先销毁前一个组件,再挂载下一个组件,即:隐藏组件实质是<strong style="color:red">销毁</strong>组件，显示组件实质是<strong style="color:red">挂载</strong>组件。但是有些时候,我们想保留前一个组件再跳到下一个组件,即让前一个组件保持挂载,这时我们就用到了”<strong style="color:red">缓存路由组件</strong>”</strong></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景:"></a>应用场景:</h2><ul><li><strong>是当我们想对现在这个页面如数一些信息时,但此时我们有需要跳转到下一个页面去查找需要填入的信息,这时我们需要保持上一个页面填好的信息,待我们在下一个页面查找到我们需要的信息时,返回上一个页面,我们之前填写的信息还在而不是需要重新填写</strong><br><img src="/../upload/Vue/V32/4.gif" alt="image"></li></ul><h2 id="缓存路由组件-lt-keep-alive-include-”组件名”-gt-lt-keep-alive-gt"><a href="#缓存路由组件-lt-keep-alive-include-”组件名”-gt-lt-keep-alive-gt" class="headerlink" title="缓存路由组件:&lt;keep-alive include=”组件名”&gt;&lt;/keep-alive&gt;"></a>缓存路由组件:<code>&lt;keep-alive include=”组件名”&gt;&lt;/keep-alive&gt;</code></h2><ul><li><strong>作用：让不展示的路由组件保持挂载，不被销毁。</strong></li><li><strong>使用方法</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;要保持挂载的组件名&quot;</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="案例代码展示"><a href="#案例代码展示" class="headerlink" title="案例代码展示:"></a>案例代码展示:</h2><ul><li><p><strong><strong style="color:red">Home组件</strong></strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home组件内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用路由提供的router-link实现页面跳转--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- (router-link最终会转化为a白标签显示到页面上)  --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用active-class属性能够实现响应式切换css样式 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用to=&quot;/指定组件拼接的网址url(在路由器里面设定的path属性)&quot; --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 这里的to属性路径要补全: /home/news(指定跳向一级路由下的二级(嵌套或多级)路由)--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用路由提供的router-link实现页面跳转--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- (router-link最终会转化为a白标签显示到页面上)  --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用active-class属性能够实现响应式切换css样式 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用to=&quot;/指定组件拼接的网址url(在路由器里面设定的path属性)&quot; --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 这里的to属性路径要补全: /home/news(指定跳向一级路由下的二级(嵌套或多级)路由)--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home/message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 缓存路由组件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 缓存多个路由组件(不写include属性默认缓存该父组件管辖下所有的子组件) --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;keep-alive :include=&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;&gt; --&gt;</span></span><br><span class="line">                    </span><br><span class="line">                <span class="comment">&lt;!-- 缓存一个路由组件(不写include属性默认缓存该父组件管辖下所有的子组件) --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;News&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用vue-router插件库提供的router-view标签实现指定区域显示组件 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Home&#x27;</span> ,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><strong style="color:red">News组件</strong></strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给这些新闻后面加入输入框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>news001<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>news002<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>news003<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;News&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V32/5.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(31)-Vue路由(route)中的props配置以及&lt;router-link&gt;的replace属性</title>
      <link href="/2022/09/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B031/"/>
      <url>/2022/09/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B031/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue路由-route-中的props配置"><a href="#Vue路由-route-中的props配置" class="headerlink" title="Vue路由(route)中的props配置"></a>Vue路由(route)中的<strong style="color:red">props</strong>配置</h1><ul><li><strong>并非组件间(父组件&#x3D;&gt;子组件)有<strong style="color:red">props</strong>配置传递参数,路由(route)当中也有<strong style="color:red">props</strong>配置传递参数,数据的.</strong></li><li><strong><strong style="color:red">Vue-router</strong>中的<strong style="color:red">props</strong>配置的作用是让路由组件更加方便的接收到参数</strong></li></ul><h2 id="使用场景如下所示"><a href="#使用场景如下所示" class="headerlink" title="使用场景如下所示:"></a><strong>使用场景如下所示:</strong></h2><ul><li><strong>当我们使用路由(route)去接收组件通过<strong style="color:red">query</strong>或者<strong style="color:red">params</strong>传过来的参数时,一般是这样设置接收的</strong><br><img src="/../upload/Vue/V31/1.png" alt="image"></li><li><strong>当要求接收的参数过多时,模板代码就会显得非常的复杂冗余,如下:</strong><br><img src="/../upload/Vue/V31/2.png" alt="image"></li><li><strong>这时我么也许会想到使用<strong style="color:red">计算属性(computed)</strong>去解决问题,如下:</strong><br><img src="/../upload/Vue/V31/3.png" alt="image"></li><li><strong>但是当要求接收的参数很多时,你的计算属性就同样会要求写非常多重复的代码去代替插值入口,因此使用计算属性去简化接收参数并不是最好的办法反而会让问题变得更加复杂.</strong></li></ul><h2 id="Vue中的props配置"><a href="#Vue中的props配置" class="headerlink" title="Vue中的props配置"></a>Vue中的<strong style="color:red">props</strong>配置</h2><ul><li><strong>作用:让路由组件更方便的接收到参数</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">   <span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给指定组件(这里是Detail组件)</span></span><br><span class="line">   <span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给传给指定组件(这里是Detail组件)</span></span><br><span class="line">   <span class="comment">// props:true</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给指定组件(这里是Detail组件)</span></span><br><span class="line">   <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">         <span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="案例代码展示"><a href="#案例代码展示" class="headerlink" title="案例代码展示:"></a>案例代码展示:</h2><h3 id="写法一"><a href="#写法一" class="headerlink" title="写法一:"></a><strong>写法一:</strong></h3><ul><li><strong><strong style="color:red">router-index.js</strong>[显示代码片段]</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一级路由</span></span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment">//设置管理路由:Home</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">        <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 使用三级路由</span></span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 给这个三级路由命名未&quot;xiangqing&quot;</span></span><br><span class="line">                        name : <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                        <span class="comment">//后面两个(/:id/:title)为params的占位符</span></span><br><span class="line">                        <span class="comment">// 一定要设置,否者会接收不到参数</span></span><br><span class="line">                        <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// props的第一种写法,值为对象</span></span><br><span class="line">                        <span class="comment">// 声明props配置,该对象中所有的key-value的组合最终都会通过props传给指定组件(这里是Detail组件)</span></span><br><span class="line">                        <span class="attr">props</span>:&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">Detail组件</strong>(路由组件)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出本地route上的params身上的指定参数即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号:&#123;&#123;this.$route.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题:&#123;&#123;this.$route.params.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>a:&#123;&#123;a&#125;&#125;,b:&#123;&#123;b&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Detail&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 方法一(接收路由传过来的数据可直接在模板上使用)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置props接收路由传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 输出本地的route发现里面多了一个params参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// params参数里面携带者url传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;   </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V31/4.png" alt="image"></p><h3 id="缺点-项目开发基本不用-因为它只能用来传死数据"><a href="#缺点-项目开发基本不用-因为它只能用来传死数据" class="headerlink" title="缺点:项目开发基本不用,因为它只能用来传死数据"></a>缺点:项目开发基本不用,因为它只能用来传死数据</h3><h3 id="写法二"><a href="#写法二" class="headerlink" title="写法二:"></a>写法二:</h3><ul><li><strong><strong style="color:red">router-index.js</strong>[显示代码片段]</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一级路由</span></span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment">//设置管理路由:Home</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">        <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 使用三级路由</span></span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 给这个三级路由命名未&quot;xiangqing&quot;</span></span><br><span class="line">                        name : <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                        <span class="comment">//后面两个(/:id/:title)为params的占位符</span></span><br><span class="line">                        <span class="comment">// 一定要设置,否者会接收不到参数</span></span><br><span class="line">                        <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// props的第一种写法,值为对象</span></span><br><span class="line">                        <span class="comment">// 声明props配置,该对象中所有的key-value的组合最终都会通过props传给指定组件(这里是Detail组件)</span></span><br><span class="line">                        <span class="comment">// props:&#123;a:1,b:&#x27;hello&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// props的第一种写法,值为布尔值</span></span><br><span class="line">                        <span class="comment">// 声明props配置,布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">                        <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">Detail组件</strong>(路由组件)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出本地route上的params身上的指定参数即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号:&#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题:&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Detail&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法二(直接接收params传过来的参数可直接在模板上使用)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置props接收路由传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 输出本地的route发现里面多了一个params参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// params参数里面携带者url传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;   </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-通过params传过来的id和title可以正常读取"><a href="#结果展示-通过params传过来的id和title可以正常读取" class="headerlink" title="结果展示:(通过params传过来的id和title可以正常读取)"></a>结果展示:(通过params传过来的id和title可以正常读取)</h3><p><img src="/../upload/Vue/V31/2.gif" alt="image"></p><h3 id="缺点-只能将params参数通过props传给组件，query不行！"><a href="#缺点-只能将params参数通过props传给组件，query不行！" class="headerlink" title="缺点:只能将params参数通过props传给组件，query不行！"></a>缺点:只能将params参数通过props传给组件，query不行！</h3><h3 id="写法三"><a href="#写法三" class="headerlink" title="写法三:"></a>写法三:</h3><ul><li><strong><strong style="color:red">router-index.js</strong>[显示代码片段]</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一级路由</span></span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment">//设置管理路由:Home</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">        <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 使用三级路由</span></span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 给这个三级路由命名未&quot;xiangqing&quot;</span></span><br><span class="line">                        name : <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                        <span class="comment">//后面两个(/:id/:title)为params的占位符</span></span><br><span class="line">                        <span class="comment">// 一定要设置,否者会接收不到参数</span></span><br><span class="line">                        <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// props的第一种写法,值为对象</span></span><br><span class="line">                        <span class="comment">// 声明props配置,该对象中所有的key-value的组合最终都会通过props传给指定组件(这里是Detail组件)</span></span><br><span class="line">                        <span class="comment">// props:&#123;a:1,b:&#x27;hello&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// props的第二种写法,值为布尔值</span></span><br><span class="line">                        <span class="comment">// 声明props配置,布尔值为true，则把路由收到的所有params参数通过props传给指定组件(这里是Detail组件)</span></span><br><span class="line">                        <span class="comment">// props: true</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// props的第三种写法,值为函数(较为高端的用法)</span></span><br><span class="line">                        <span class="comment">// 声明props配置,该函数返回的对象中每一组key-value都会通过props传给指定组件(这里是Detail组件)</span></span><br><span class="line">                        <span class="title function_">props</span>(<span class="params">route</span>)&#123;<span class="comment">//这里传入route($route也可以)就能获取到本地路由上的所有数据</span></span><br><span class="line">                            <span class="keyword">return</span> &#123;</span><br><span class="line">                                <span class="comment">// 在通过对象赋值的方式传递数到指定的组件(route组件)即可</span></span><br><span class="line">                                <span class="attr">id</span>: route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">                                <span class="attr">title</span>: route.<span class="property">query</span>.<span class="property">title</span> </span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 可以使用es6解构赋值写法更简单</span></span><br><span class="line">                        <span class="comment">//props(&#123;query: &#123;id, title&#125;&#125;)&#123;</span></span><br><span class="line">                        <span class="comment">//    return &#123;id, title&#125;</span></span><br><span class="line">                        <span class="comment">//&#125;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">Detail组件</strong>(路由组件)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出本地route上的params身上的指定参数即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号:&#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题:&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Detail&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法三(直接接收query传过来的参数可直接在模板上使用)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置props接收路由传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 输出本地的route发现里面多了一个params参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// params参数里面携带者url传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;   </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-通过query传过来的id和title可以正常读取"><a href="#结果展示-通过query传过来的id和title可以正常读取" class="headerlink" title="结果展示:(通过query传过来的id和title可以正常读取)"></a>结果展示:(通过query传过来的id和title可以正常读取)</h3><p><img src="/../upload/Vue/V31/2.gif" alt="image"></p><h3 id="优点-基本上没有什么限制-但是用法较为巧妙"><a href="#优点-基本上没有什么限制-但是用法较为巧妙" class="headerlink" title="优点:基本上没有什么限制,但是用法较为巧妙"></a>优点:基本上没有什么限制,但是用法较为巧妙</h3><h1 id="lt-router-link-gt-的replace属性"><a href="#lt-router-link-gt-的replace属性" class="headerlink" title="&lt;router-link&gt;的replace属性"></a><code>&lt;router-link&gt;</code>的replace属性</h1><ol><li><strong>作用：控制路由跳转时操作浏览器历史记录的模式[相当于堆栈]</strong></li><li><strong>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录[压栈]，<code>replace</code>是替换当前记录[浏览器无法回退和前进网页]。路由跳转时候默认为<code>push</code></strong></li><li><strong>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(30)-命名路由及params参数的传递</title>
      <link href="/2022/09/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B030/"/>
      <url>/2022/09/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B030/</url>
      
        <content type="html"><![CDATA[<h1 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h1><ul><li><strong>作用:用于简化路由的跳转(简化<strong style="color:red">path</strong>和<strong style="color:red">url</strong>的编写)</strong></li></ul><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程:"></a><strong>使用流程:</strong></h2><ul><li><strong>1.首先给路由添加<strong style="color:red">name</strong>属性(给指定路由添加一个名字)</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一级路由</span></span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment">//设置管理路由:Home</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">        <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 使用三级路由</span></span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 给这个三级路由命名未&quot;xiangqing&quot;</span></span><br><span class="line">                        name : <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                        <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><strong>2.简化跳转</strong></li><li><strong>前提是你的<strong style="color:red">to</strong>指向必须是使用<strong style="color:red">对象式</strong>,不能是<strong style="color:red">字符串式</strong></strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--简化前，需要写完整的路径(三级路由十分的繁琐) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/demo/test/welcome&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--简化后，直接通过名字跳转(三级路由直接调用名字很快捷) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--简化写法配合传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      name:&#x27;hello&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">      query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">         id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">            title:&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">   &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="案例代码展示"><a href="#案例代码展示" class="headerlink" title="案例代码展示:"></a>案例代码展示:</h2><ul><li><strong><strong style="color:red">router-Index.js</strong></strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里配置路由(创建整个应用页面的路由器)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先引入路由</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入各个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并向外暴露路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:About</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:Home</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">            <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 使用三级路由</span></span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 给这个三级路由命名未&quot;xiangqing&quot;</span></span><br><span class="line">                            name : <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">Message组件</strong>(调用路由):</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>  <span class="attr">v-for</span>=<span class="string">&quot;m in messageList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;m.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里使用常规的方法然url携带query[与ajax里面的query参数一致]参数 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- query参数是用于携带url信息的 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 跳转路由并携带query参数 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 使用ES6的模板字符串``携带数据即可($&#123;需要携带的数据&#125;) --&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 方法一[to的字符串写法]:比较笨重,不推荐 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 方法二[to的对象写法]:使用对象的形式携带数据,简洁推荐 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                    // 使用路由的名字来调用路由更加简单</span></span></span><br><span class="line"><span class="string"><span class="tag">                    name : &#x27;xiangqing&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    // path: &#x27;/home/message/detail&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    query: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                        id: m.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">                        title: m.title&#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    &#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>&#123;&#123;m.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;News&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                messageList : [</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息001&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息002&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息003&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V30/2.gif" alt="image"></p><h1 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a><strong style="color:red">params</strong>参数</h1><ul><li><strong>这里的<strong style="color:red">params</strong>参数与<strong style="color:red">query</strong>参数也是非常的相似,都是用于给路由传递参数的,但是相较于<strong style="color:red">query</strong>参数,<strong style="color:red">params</strong>参数使用起来流程更为繁杂,但是给to属性(url)编写携带数据却更为简洁</strong></li></ul><h2 id="使用流程如下"><a href="#使用流程如下" class="headerlink" title="使用流程如下:"></a>使用流程如下:</h2><ul><li><p><strong>1.配置路由，声明接收<strong style="color:red">params</strong>参数</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;do&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;demo/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>2. 传递参数</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/demo/666/你好阿!`&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">               </span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用对象写法一定要用name属性去指向路由,不能使用path属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">     name:&#x27;do&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">     params:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">        id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">           title:&#x27;你好阿!&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">     &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>特别注意：路由携带<strong style="color:red">params</strong>参数时，若使用<strong style="color:red">to</strong>的对象写法，则不能使用<strong style="color:red">path</strong>配置项，必须使用<strong style="color:red">name</strong>配置！</strong></p></blockquote></li><li><p><strong>3. 接收参数：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> $route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line"> $route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="这样就相当于给path的请求者发送了一个query对象，里面包含着：id：666，title：你好阿！"><a href="#这样就相当于给path的请求者发送了一个query对象，里面包含着：id：666，title：你好阿！" class="headerlink" title="这样就相当于给path的请求者发送了一个query对象，里面包含着：id：666，title：你好阿！"></a>这样就相当于给path的请求者发送了一个<strong style="color:red">query</strong>对象，里面包含着：id：666，title：你好阿！</h3><p><img src="/../upload/Vue/V30/1.png" alt="image"></p><h2 id="案例实践"><a href="#案例实践" class="headerlink" title="案例实践:"></a>案例实践:</h2><ul><li><p><strong>除去main.js和其他无关紧要的组件[与上一个案例:多级路由的使用一致]</strong></p></li><li><p><strong>要求：消息组件下还有一个三级路由，管理消息的发放</strong></p></li><li><p><strong><strong style="color:red">router-index.js</strong></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里配置路由(创建整个应用页面的路由器)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先引入路由</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入各个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并向外暴露路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:About</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:Home</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">            <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 使用三级路由</span></span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 给这个三级路由命名未&quot;xiangqing&quot;</span></span><br><span class="line">                            name : <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="comment">//后面两个(/:id/:title)为params的占位符</span></span><br><span class="line">                            <span class="comment">// 一定要设置,否者会接收不到参数</span></span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong><strong style="color:red">Message组件</strong>(除去css样式)</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>  <span class="attr">v-for</span>=<span class="string">&quot;m in messageList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;m.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里使用常规的方法然url携带params[与ajax里面的params参数一致]参数 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- params参数是用于携带url信息的 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 跳转路由并携带params参数 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 使用ES6的模板字符串``携带数据即可($&#123;需要携带的数据&#125;) --&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 方法一[to的字符串写法]:比较笨重,不推荐 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 方法二[to的对象写法]:使用对象的形式携带数据,简洁推荐 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                    //使用params阐述传递数据必须使用 name来指定路由,否者会报错</span></span></span><br><span class="line"><span class="string"><span class="tag">                    name : &#x27;xiangqing&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    params: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                        id: m.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">                        title: m.title&#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    &#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>&#123;&#123;m.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;News&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                messageList : [</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息001&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息002&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息003&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><strong style="color:red">Detail组件</strong>(三级路由,由Message组件管理)</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出本地route上的params身上的指定参数即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号:&#123;&#123;this.$route.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题:&#123;&#123;this.$route.params.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Detail&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 输出本地的route发现里面多了一个params参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// params参数里面携带者url传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;   </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V30/2.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(29)-多级(嵌套)路由以及query参数的传递</title>
      <link href="/2022/09/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B029/"/>
      <url>/2022/09/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B029/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue路由-多级-嵌套-路由"><a href="#Vue路由-多级-嵌套-路由" class="headerlink" title="Vue路由-多级(嵌套)路由"></a>Vue路由-多级(嵌套)路由</h1><ul><li><strong>多级路由的使用其实与一级路由是十分相似的,但是有以下几个注意点:</strong></li><li><strong>在一级路由下(父级路由下)添加一个受其管理的二级路由需要用到<strong style="color:red">children</strong>属性如下:</strong></li><li><strong>router-index.js</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建并向外暴露路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:About</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:Home</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">            <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><strong>2.在组件当中跳转子级路由需要写完整路径:</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="完整代码如下-除去About组件-与一级路由没区别"><a href="#完整代码如下-除去About组件-与一级路由没区别" class="headerlink" title="完整代码如下:(除去About组件,与一级路由没区别)"></a>完整代码如下:(除去About组件,与一级路由没区别)</h2><ul><li><strong><strong style="color:red">index.js</strong></strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里配置路由(创建整个应用页面的路由器)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先引入路由</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入各个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并向外暴露路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:About</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:Home</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">            <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">Home组件</strong>(除去css样式)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home组件内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用路由提供的router-link实现页面跳转--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- (router-link最终会转化为a白标签显示到页面上)  --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用active-class属性能够实现响应式切换css样式 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用to=&quot;/指定组件拼接的网址url(在路由器里面设定的path属性)&quot; --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 这里的to属性路径要补全: /home/news(指定跳向一级路由下的二级(嵌套或多级)路由)--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用路由提供的router-link实现页面跳转--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- (router-link最终会转化为a白标签显示到页面上)  --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用active-class属性能够实现响应式切换css样式 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用to=&quot;/指定组件拼接的网址url(在路由器里面设定的path属性)&quot; --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 这里的to属性路径要补全: /home/news(指定跳向一级路由下的二级(嵌套或多级)路由)--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home/message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 使用vue-router插件库提供的router-view标签实现指定区域显示组件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Home&#x27;</span> ,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">Message组件</strong></strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message1&quot;</span>&gt;</span>message001<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message2&quot;</span>&gt;</span>message002<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message/3&quot;</span>&gt;</span>message003<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;News&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">News组件</strong></strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>news001<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>news002<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>news003<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        name : <span class="string">&#x27;News&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><ul><li><strong>页面发生跳转但是浏览器没有刷新,观察网页<strong style="color:red">url</strong>也发生了变化</strong><br><img src="/../upload/Vue/V29/1.gif" alt="image"></li></ul><h1 id="2-query参数-主要用于参数的传递"><a href="#2-query参数-主要用于参数的传递" class="headerlink" title="2.query参数(主要用于参数的传递)"></a>2.<strong style="color:red">query</strong>参数(主要用于参数的传递)</h1><ul><li><strong>路由中的<strong style="color:red">query</strong>参数与ajax中的<strong style="color:red">query</strong>参数是非常的相似的,基本上都是写在<strong style="color:red">path</strong>或者<strong style="color:red">url</strong>上用于给请求者携带额外的数据的,一般用”?”分割<strong style="color:red">path</strong>或者<strong style="color:red">url</strong>,用”&amp;”拼接数据如下:</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/home/message/detail?id=666&amp;title=你好阿!`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/../upload/Vue/V29/1.png" alt="image"></li></ul><h2 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示:"></a>案例展示:</h2><ul><li><p><strong>除去main.js和其他无关紧要的组件[与上一个案例:多级路由的使用一致]</strong></p></li><li><p><strong>要求：消息组件下还有一个三级路由，管理消息的发放</strong></p></li><li><p><strong><strong style="color:red">router-index.js</strong></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里配置路由(创建整个应用页面的路由器)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先引入路由</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入各个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并向外暴露路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:About</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:Home</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 二级路由(children属性)</span></span><br><span class="line">            <span class="attr">children</span>:[<span class="comment">//通过children配置子级路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 使用三级路由</span></span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 使用二级路由过后的path不需要再加上&quot;/&quot;</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong><strong style="color:red">Message组件</strong>(除去css样式)</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>  <span class="attr">v-for</span>=<span class="string">&quot;m in messageList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;m.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里使用常规的方法然url携带query[与ajax里面的query参数一致]参数 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- query参数是用于携带url信息的 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 跳转路由并携带query参数 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 使用ES6的模板字符串``携带数据即可($&#123;需要携带的数据&#125;) --&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 方法一[to的字符串写法]:比较笨重,不推荐 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 方法二[to的对象写法]:使用对象的形式携带数据,简洁推荐 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                    path: &#x27;/home/message/detail&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    query: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                        id: m.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">                        title: m.title&#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    &#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>&#123;&#123;m.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;News&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                messageList : [</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息001&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息002&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息003&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><strong style="color:red">Detail组件</strong>(三级路由,由Message组件管理)</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出本地route上的query身上的指定参数即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号:&#123;&#123;this.$route.query.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题:&#123;&#123;this.$route.query.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Detail&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 输出本地的route发现里面多了一个query参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// query参数里面携带者url传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;   </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>从这个mounted钩子上可以观察到query参数的传递存在本地路由$route身上</strong><br><img src="/../upload/Vue/V29/2.png" alt="image"></p></li></ul><h2 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V29/2.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(28)-Vue路由（route）[一级路由]的基本使用</title>
      <link href="/2022/09/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B028/"/>
      <url>/2022/09/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B028/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue路由（route）-一级路由-的基本使用"><a href="#Vue路由（route）-一级路由-的基本使用" class="headerlink" title="Vue路由（route）[一级路由]的基本使用"></a>Vue路由（route）[一级路由]的基本使用</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><strong>由于2022年2月起发布了Vue3.0过后,我们每一次<strong style="color:red">全局安装的vue-router就是默认的4.0版本</strong>,但是<strong style="color:red">使用Vue2来搭建项目就必须使用vue-router3.0版本</strong>,所以这是就看我们自己所需要搭建的项目是使用什么Vue版本了,<strong style="color:red">使用Vue2开发项目就安装vue-router3版本,使用Vue3开发项目就使用vue-router4版本</strong></strong></li><li><strong>安装vue-router 3版本</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> i vue-router@3</span><br></pre></td></tr></table></figure></li><li><strong>安装vue-router 4版本</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> i vue-router</span><br></pre></td></tr></table></figure></li></ul><h2 id="搭建vue-router开发环境"><a href="#搭建vue-router开发环境" class="headerlink" title="搭建vue-router开发环境"></a>搭建vue-router开发环境</h2><ul><li><strong>官网推荐格式:首先在项目的<strong style="color:red">src</strong>文件夹当中,创建一个名为 <strong style="color:red">router </strong> 的文件夹,里面新建一个<strong style="color:red">index.js</strong>文件用于创建<strong style="color:red">创建整个页面的路由器</strong></strong><br><img src="/../upload/Vue/V28/1.png" alt="image"></li></ul><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a><strong>代码如下：</strong></h2><ul><li><p><strong>Index.js</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">     &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p><strong>实现切换（active-class可配置高亮样式）[一般是App组件当中配置]</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用路由提供的router-link实现页面跳转--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- (router-link最终会转化为a白标签显示到页面上)  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用active-class属性能够实现响应式切换css样式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用to=&quot;/指定组件拼接的网址url(在路由器里面设定的path属性)&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">active-class</span>=<span class="string">&quot; active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>指定展示位置[一般是App组件当中配置]</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用vue-router插件库提供的router-view标签实现指定区域显示组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="案例实践-一级路由"><a href="#案例实践-一级路由" class="headerlink" title="案例实践:[一级路由]"></a>案例实践:[一级路由]</h1><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h2><ul><li><strong><strong style="color:red">About组件</strong>(就显示简单的一段话)</strong> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是About的内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;About&#x27;</span> ,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">Home组件</strong>(就显示简单的一段话)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Home的内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Home&#x27;</span> ,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">router里面的index.js</strong>(配置路由器)</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里配置路由(创建整个应用页面的路由器)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先引入路由</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 引入vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">// 引入各个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并向外暴露路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:About</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//设置管理路由:Home</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">App组件</strong>(相当于页面框架中实现组件视图的切换)[里面引用了bootstrap]</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Vue Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 原始的html页面跳转使用的上是a标签跳转 --&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;a class=&quot;list-group-item&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt;</span></span><br><span class="line"><span class="comment">          &lt;a class=&quot;list-group-item active&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 使用路由提供的router-link实现页面跳转--&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- (router-link最终会转化为a白标签显示到页面上)  --&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 使用active-class属性能够实现响应式切换css样式 --&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 使用to=&quot;/指定组件拼接的网址url(在路由器里面设定的path属性)&quot; --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot; active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot; active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用vue-router插件库提供的router-view标签实现指定区域显示组件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./components/About&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;<span class="title class_">About</span>,<span class="title class_">Home</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong><strong style="color:red">main.js</strong></strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入路由</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 引入创建好的路由器</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用路由插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">// 生成路由器对象(与vuex中的store很相似)</span></span><br><span class="line">    router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V28/1.gif" alt="image"><br><img src="/../upload/Vue/V28/3.png" alt="image"></p><h1 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点:"></a>几个注意点:</h1><ol><li><strong>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</strong></li><li><strong>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</strong></li><li><strong>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</strong></li><li><strong>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</strong><br><img src="/../upload/Vue/V28/2.png" alt="image"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(27)-Vue-理解路由（route）</title>
      <link href="/2022/09/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B027/"/>
      <url>/2022/09/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B027/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-理解路由（route）"><a href="#Vue-理解路由（route）" class="headerlink" title="Vue-理解路由（route）"></a>Vue-理解路由（route）</h1><ul><li><strong>在真正学习<strong style="color:red">Vue</strong>里面的<strong style="color:red">路由(route)</strong>之前我们不妨看看现实生活中的路由,我们日常上网都会用到<strong style="color:red">路由器</strong>,</strong></li></ul><h2 id="图解如下"><a href="#图解如下" class="headerlink" title="图解如下:"></a>图解如下:</h2><p><img src="/../upload/Vue/V27/1.png" alt="image"></p><ul><li><strong>日常生活中的路由器是用来上网的,电脑设备通过网线接口链接到路由器上就能上网了,这里的<strong style="color:red">电脑设备就相当于value</strong>,<strong style="color:red">网线接口就相当于key</strong>,两者一一对应其实就是一种对应关系,由此可见映射到<strong style="color:red">Vue</strong>里面,所谓路由其实也就是<strong style="color:red">一种对应关系(路由[router])</strong>,而<strong style="color:red">集中管理</strong>这些对应关系的就是<strong style="color:red">路由器(router)</strong>.</strong> </li><li><strong>我们也可以将路由简单的理解为“<strong style="color:red">指向</strong>”,在网页开发当中,当我们点击页面上的home按钮时，页面中就要显示home的内容，如果点击页面上的about 按钮，页面中就要显示about 的内容。Home按钮 &#x3D;&gt; home 内容， about按钮 &#x3D;&gt; about 内容，也可以说是一种映射. 所以在页面上有两个部分，一个是点击部分，一个是点击之后，显示内容的部分。</strong></li></ul><h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由?"></a>什么是路由?</h3><ul><li><strong>1.一个路由就是一组<strong style="color:red">映射关系（key - value）</strong></strong></li><li><strong>2.<strong style="color:red">key</strong>为路径,<strong style="color:red">value</strong>可能是<strong style="color:red">function（一般是后端）</strong> 或<strong style="color:red">2.component（一般是前端）</strong></strong></li><li><strong><strong style="color:red">路由(route)</strong>只是一种规则,一种对应关系,而数据真正存放的地方是<strong style="color:red">路由器(router)</strong></strong></li></ul><h3 id="路由分类"><a href="#路由分类" class="headerlink" title="路由分类"></a>路由分类</h3><ul><li><strong>1.后端路由：</strong><ul><li><strong>1)理解：<strong style="color:red">value</strong> 是<strong style="color:red">function</strong>, 用于处理客户端提交的请求。</strong></li><li><strong>工作过程：服务器接收到一个请求时, 根据<strong style="color:red">请求路径</strong>找到匹配的<strong style="color:red">函数</strong>来处理请求, 返回响应数据。</strong></li></ul></li><li><strong>2.前端路由：</strong><ul><li><strong>1)理解：<strong style="color:red">value</strong> 是<strong style="color:red">component</strong>，用于展示页面内容。</strong></li><li><strong>2)工作过程：当浏览器的<strong style="color:red">路径改变</strong>时, 对应的组件就会显示。</strong></li></ul></li></ul><h3 id="路由的作用："><a href="#路由的作用：" class="headerlink" title="路由的作用："></a>路由的作用：</h3><ul><li><strong>Vue中的路由（vue-router）的一个插件库，专门用来实现<strong style="color:red">SPA应用</strong></strong></li></ul><h3 id="对SPA应用的理解"><a href="#对SPA应用的理解" class="headerlink" title="对SPA应用的理解"></a>对SPA应用的理解</h3><ul><li><strong>1.单页Web 应用（single page web application，SPA）。</strong></li><li><strong>2.整个应用只有<strong style="color:red">一个完整的页面</strong>。</strong></li><li><strong>3.点击页面中的导航链接<strong style="color:red">不会刷新</strong>，只会做页面的<strong style="color:red">局部更新</strong>。</strong></li><li><strong>4.数据需要通过<strong style="color:red">ajax</strong> 请求获取。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(26)-Vuex的模块化和命名空间（namespace）[大型项目常用]</title>
      <link href="/2022/09/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B026/"/>
      <url>/2022/09/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B026/</url>
      
        <content type="html"><![CDATA[<h1 id="Vuex的模块化和命名空间（namespace）"><a href="#Vuex的模块化和命名空间（namespace）" class="headerlink" title="Vuex的模块化和命名空间（namespace）"></a>Vuex的模块化和命名空间（namespace）</h1><ul><li><strong>目的：让代码更好维护，让多种数据分类更加明确。</strong></li><li><strong>我们可以在项目的<strong style="color:red">src</strong>文件夹里面的<strong style="color:red">store</strong>文件夹中<strong style="color:red">新建每个组件对应的vuex.js文件夹</strong></strong><br><img src="/../upload/Vue/V26/1.png" alt="image"></li></ul><h2 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h2><ul><li><strong>1.修改<code>store.js</code>，将每一个组件对应的module分开，每一个module都有对应的<strong style="color:red">state，mutations，actions和getter</strong>，并且给每一个module都开启<strong style="color:red">namespace（命名空间）</strong></strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//方式一：自己直接读取</span></span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"> <span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line"> ...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><strong>2.开启命名空间后，组件中读取<strong style="color:red">state</strong>数据：</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//方式一：自己直接读取</span></span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"> <span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line"> ...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><strong>3.开启命名空间后，组件中读取<strong style="color:red">getters</strong>数据：</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取[ES6调用对象属性的第二种方法]</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><strong>4.开启命名空间后，组件中调用<strong style="color:red">dispatch</strong></strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//方式一：自己直接dispatch[ES6调用对象属性的第二种方法]</span></span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"> <span class="comment">//方式二：借助mapActions：</span></span><br><span class="line"> ...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><strong>5.开启命名空间后，组件中调用<strong style="color:red">commit</strong></strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//方式一：自己直接commit[ES6调用对象属性的第二种方法]</span></span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"> <span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line"> ...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码展示：（除去css样式的代码片段）"><a href="#代码展示：（除去css样式的代码片段）" class="headerlink" title="代码展示：（除去css样式的代码片段）"></a>代码展示：（除去css样式的代码片段）</h2><h3 id="求和案例-人员列表"><a href="#求和案例-人员列表" class="headerlink" title="求和案例 + 人员列表"></a>求和案例 + 人员列表</h3><ul><li><strong>Count.js(vuex的模块之一):专门配置求和组件(count组件)当中的vuex</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求和相关的配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">jiaOdd</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions中的jiaOdd被调用了&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>)&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">jiaWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions中的jiaWait被调用了&#x27;</span>)</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">            &#125;,<span class="number">500</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的JIA被调用了&#x27;</span>)</span><br><span class="line">            state.<span class="property">sum</span> += value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">JIAN</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的JIAN被调用了&#x27;</span>)</span><br><span class="line">            state.<span class="property">sum</span> -= value</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">sum</span>:<span class="number">0</span>, <span class="comment">//当前的和</span></span><br><span class="line">        <span class="attr">place</span>:<span class="string">&#x27;工地&#x27;</span>,</span><br><span class="line">        <span class="attr">doing</span>:<span class="string">&#x27;搬砖&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">sum</span>*<span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>person.js(vuex的模块之一):专门配置人员列表组件(Persons组件)当中的vuex</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//人员管理相关的配置</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; nanoid &#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">addPersonWang</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">            <span class="comment">// 设置业务逻辑要求姓名的第一个字必须是&quot;王&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(value.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;王&#x27;</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD_PERSON&#x27;</span>,value)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;添加的人必须姓王！&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 发送axios请求接收随机姓名</span></span><br><span class="line">        <span class="title function_">addPersonServer</span>(<span class="params">context</span>)&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.uixsj.cn/hitokoto/get?type=social&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">                <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 请求回来的数据发送给指定的命名区域进行数据的加工</span></span><br><span class="line">                    context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD_PERSON&#x27;</span>,&#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),<span class="attr">name</span>:response.<span class="property">data</span>&#125;)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">ADD_PERSON</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的ADD_PERSON被调用了&#x27;</span>)</span><br><span class="line">            state.<span class="property">personList</span>.<span class="title function_">unshift</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">personList</span>:[</span><br><span class="line">            <span class="comment">// 默认的存在数据</span></span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">firstPersonName</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="comment">// 显示第一个人的姓名</span></span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">personList</span>[<span class="number">0</span>].<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>index.js(vuex的模块之一):用于引入各组件对应的模块js并创建仓库(store)</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件用于创建Vuex中最为核心的store</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 引入各组件对应的模块js</span></span><br><span class="line"><span class="keyword">import</span> countOptions <span class="keyword">from</span> <span class="string">&#x27;./count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> personOptions <span class="keyword">from</span> <span class="string">&#x27;./person&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        <span class="comment">// 当然也可随意使用对象简写形式(countOptions)</span></span><br><span class="line">        <span class="attr">countAbout</span>:countOptions,</span><br><span class="line">        <span class="attr">personAbout</span>:personOptions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><strong>Count组件(除去css样式),这里主要是调用命名空间的过程(主要是map辅助方法的调用)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前求和放大10倍为：&#123;&#123;bigSum&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我在&#123;&#123;place&#125;&#125;，学习&#123;&#123;doing&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color:yellowgreen&quot;</span>&gt;</span>Person组件的总人数是：&#123;&#123;personList.length&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model.number</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment(n)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement(n)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrementOdd(n)&quot;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrementWait(n)&quot;</span>&gt;</span>等一等再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 引入4个map辅助方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;mapState,mapGetters,mapMutations,mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Count&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">n</span>:<span class="number">1</span>, <span class="comment">//用户选择的数字</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.数组式调用命名空间的使用************************************</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//借助mapState生成计算属性，从state中读取数据。（数组写法）</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第一个参数为命名空间:namespace,要与store里面的命名空间保持一致</span></span></span><br><span class="line"><span class="language-javascript">            ...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;place&#x27;</span>,<span class="string">&#x27;doing&#x27;</span>]),</span></span><br><span class="line"><span class="language-javascript">            ...<span class="title function_">mapState</span>(<span class="string">&#x27;personAbout&#x27;</span>,[<span class="string">&#x27;personList&#x27;</span>]),</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//借助mapGetters生成计算属性，从getters中读取数据。（数组写法）</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第一个参数为命名空间:namespace,要与store里面的命名空间保持一致</span></span></span><br><span class="line"><span class="language-javascript">            ...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// ************************************************************</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.对象式调用命名空间的使用************************************</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations(对象写法)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第一个参数为命名空间:namespace,要与store里面的命名空间保持一致</span></span></span><br><span class="line"><span class="language-javascript">            ...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions(对象写法)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第一个参数为命名空间:namespace,要与store里面的命名空间保持一致</span></span></span><br><span class="line"><span class="language-javascript">            ...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// *************************************************************</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 输出使用命名空间后的store</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>Persons组件(除去css样式),这里主要是调用命名空间的过程(主要是常规方法的调用)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color:yellowgreen&quot;</span>&gt;</span>Count组件求和为：&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>列表中第一个人的名字是：&#123;&#123;firstPersonName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addWang&quot;</span>&gt;</span>添加一个姓王的人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addPersonServer&quot;</span>&gt;</span>添加一个人，名字随机<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in personList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span>&#123;&#123;p.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Person&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">personList</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">personList</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">countAbout</span>.<span class="property">sum</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">firstPersonName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 常规方法的命名空间namespace的使用(与map方法不一样)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ES6语法数组结合对象属性的调用:</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 调用getters里面的personAbout/firstPersonName属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 原因:因为使用.调用对象属性不能带有&#x27;/&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> personObj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),<span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">name</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 常规方法的命名空间namespace的使用(与map方法不一样)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ES6语法数组结合对象属性的调用:</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 调用getters里面的personAbout/firstPersonName属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 原因:因为使用.调用对象属性不能带有&#x27;/&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,personObj)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addWang</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> personObj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),<span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">name</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 常规方法的命名空间namespace的使用(与map方法不一样)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ES6语法数组结合对象属性的调用:</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 调用getters里面的personAbout/firstPersonName属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 原因:因为使用.调用对象属性不能带有&#x27;/&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,personObj)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addPersonServer</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 常规方法的命名空间namespace的使用(与map方法不一样)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ES6语法数组结合对象属性的调用:</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 调用getters里面的personAbout/firstPersonName属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 原因:因为使用.调用对象属性不能带有&#x27;/&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonServer&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V26/2.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vuex </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(25)-Vuex中的配置项以及辅助函数(4个map)</title>
      <link href="/2022/08/31/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B025/"/>
      <url>/2022/08/31/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B025/</url>
      
        <content type="html"><![CDATA[<h1 id="gatter-相当于computed"><a href="#gatter-相当于computed" class="headerlink" title="gatter(相当于computed)"></a>gatter(相当于computed)</h1><ul><li><strong>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。(需求逻辑复杂斌且要求复用)</strong></li><li><strong>使用流程</strong><ul><li><strong>1.在<code>store.js</code>中追加<code>getters</code>配置</strong></li><li><strong>2.组件中读取数据：<code>$store.getters.bigSum</code></strong></li></ul></li></ul><h2 id="代码解析-给求和案例添加一个sum-10并显示-在getters里面实现"><a href="#代码解析-给求和案例添加一个sum-10并显示-在getters里面实现" class="headerlink" title="代码解析:(给求和案例添加一个sum*10并显示,在getters里面实现)"></a>代码解析:(给求和案例添加一个sum*10并显示,在getters里面实现)</h2><ul><li><strong>index.js(store)代码片段</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//准备state——用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span> <span class="comment">//当前的和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 配置vuex中的配置向gatter(相当于computed)</span></span><br><span class="line"><span class="comment">// 用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="comment">// 这里接收一个参数就是state</span></span><br><span class="line">    <span class="title function_">tenSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="comment">// 这就显示出与计算属性非常的相像,都是需要返回值返回数据的</span></span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span>*<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><strong>Count组件当中调用:(同样是代码片段)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 读取vuex中的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;&#123;$store.state.sum&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里调用$store.getters去寻找里面的“计算属性” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前求和放大10倍未:&#123;&#123;$store.getters.tenSum&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V25/1.png" alt="image"></p><h1 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h1><ul><li><strong>这四个方法主要是用于解决代码冗余,简化模板代码的作用,是vuex提供的四个方法</strong></li></ul><h2 id="1-mapState方法：用于帮助我们映射state中的数据为计算属性"><a href="#1-mapState方法：用于帮助我们映射state中的数据为计算属性" class="headerlink" title="1. mapState方法：用于帮助我们映射state中的数据为计算属性"></a>1. <strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</h2><ul><li><strong>这里展示Count组件的computed的代码片段</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 程序员常规使用代码实现-----------------------------------------</span></span><br><span class="line">    <span class="comment">// doing()&#123;</span></span><br><span class="line">    <span class="comment">//  return this.$store.state.doing</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// place()&#123;</span></span><br><span class="line">    <span class="comment">//  return this.$store.state.place</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// ---------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// (1)mapState*********************************************</span></span><br><span class="line">    <span class="comment">// 1.使用mapState简化模板代码(对象式)[使用Es6铺开对象解构赋值]</span></span><br><span class="line">    <span class="comment">// ...mapState(&#123;doing:&#x27;doing&#x27;,place:&#x27;place&#x27;&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.使用mapState简化模板代码(数组式)[使用Es6铺开对象解构赋值]</span></span><br><span class="line">    <span class="comment">// 使用数组形式切记你所要生成的计算属性名一定要与state里面的属性名保持一致</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;doing&#x27;</span>,<span class="string">&#x27;place&#x27;</span>]),</span><br><span class="line">    <span class="comment">// **********************************************************</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-mapGetters方法：用于帮助我们映射getters中的数据为计算属性"><a href="#2-mapGetters方法：用于帮助我们映射getters中的数据为计算属性" class="headerlink" title="2. mapGetters方法：用于帮助我们映射getters中的数据为计算属性"></a>2. <strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</h2><ul><li><strong>这里展示Count组件的computed的代码片段</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 常规使用代码替换-----------------------------------------</span></span><br><span class="line">    <span class="comment">// tenSum()&#123;</span></span><br><span class="line">    <span class="comment">//  return this.$store.getters.tenSum</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// ---------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// (2)mapGetters**********************************************</span></span><br><span class="line">    <span class="comment">// 1.使用mapGetters简化模板代码(对象式)[使用Es6铺开对象解构赋值]</span></span><br><span class="line">    <span class="comment">// ...mapGetters(&#123;tenSum:&#x27;tenSum&#x27;&#125;),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.使用mapGetters简化模板代码(数组式)[使用Es6铺开对象解构赋值]</span></span><br><span class="line">    <span class="comment">// 使用数组形式切记你所要生成的计算属性名一定要与Getters里面的属性名保持一致</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;tenSum&#x27;</span>]),</span><br><span class="line">    <span class="comment">// *************************************************************</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-mapActions方法："><a href="#3-mapActions方法：" class="headerlink" title="3. mapActions方法："></a>3. <strong>mapActions方法：</strong></h2><ul><li><strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</strong></li><li><strong>这里展示Count组件的methods的代码片段</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 程序员常用的代码编写实现--------------------------------------</span></span><br><span class="line">    <span class="comment">// add()&#123;</span></span><br><span class="line">    <span class="comment">//  // 因为纯加减没有业务逻辑可以让组件越过actions直接联系mutations</span></span><br><span class="line">    <span class="comment">//  // 这里的大写是用于区分存在actions(小写)还是mutations(大写)</span></span><br><span class="line">    <span class="comment">//  // 组件-&gt;mutations(无业务逻辑)</span></span><br><span class="line">    <span class="comment">//  this.$store.commit(&#x27;ADD&#x27;,this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// sub()&#123;</span></span><br><span class="line">    <span class="comment">//  // 因为纯加减没有业务逻辑可以让组件越过actions直接联系mutations</span></span><br><span class="line">    <span class="comment">//  // 这里的大写是用于区分存在actions(小写)还是mutations(大写)</span></span><br><span class="line">    <span class="comment">//  // 组件-&gt;mutations(无业务逻辑)</span></span><br><span class="line">    <span class="comment">//  this.$store.commit(&#x27;SUB&#x27;,this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// (3)mapMutations**********************************************</span></span><br><span class="line">    <span class="comment">// 1.使用mapMutations简化模板代码(对象式)[使用Es6铺开对象解构赋值]</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">add</span>:<span class="string">&#x27;ADD&#x27;</span>,<span class="attr">sub</span>:<span class="string">&#x27;SUB&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.使用mapMutations简化模板代码(数组式)[使用Es6铺开对象解构赋值]</span></span><br><span class="line">    <span class="comment">// 使用数组形式切记你所要生成的方法名一定要与传过去mutations里面的方法名保持一致</span></span><br><span class="line">    <span class="comment">// ...mapMutations(&#123;&#x27;add&#x27;,&#x27;sub&#x27;&#125;),</span></span><br><span class="line">    <span class="comment">// *************************************************************</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-mapMutations方法："><a href="#4-mapMutations方法：" class="headerlink" title="4. mapMutations方法："></a>4. <strong>mapMutations方法：</strong></h2><ul><li><strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</strong></li><li><strong>这里展示Count组件的methods的代码片段</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 程序员常用的代码编写实现--------------------------------------</span></span><br><span class="line">    <span class="comment">// addOdd()&#123;</span></span><br><span class="line">    <span class="comment">//  // 组件-&gt;actions-&gt;mutations(有业务逻辑:奇数＋)</span></span><br><span class="line">    <span class="comment">//  this.$store.dispatch(&#x27;addOdd&#x27;,this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// addWait()&#123;</span></span><br><span class="line">    <span class="comment">//  // 组件-&gt;actions-&gt;mutations(有业务逻辑:延迟+)</span></span><br><span class="line">    <span class="comment">//  this.$store.dispatch(&#x27;addWait&#x27;,this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// (4)mapActions************************************************</span></span><br><span class="line">    <span class="comment">// 1.使用mapActions简化模板代码(对象式)[使用Es6铺开对象解构赋值]</span></span><br><span class="line">    <span class="comment">// ...mapActions(&#123;addOdd:&#x27;addOdd&#x27;,addWait:&#x27;addWait&#x27;&#125;),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.使用mapMutations简化模板代码(数组式)[使用Es6铺开对象解构赋值]</span></span><br><span class="line">    <span class="comment">// 使用数组形式切记你所要生成的方法名一定要与传过去mutations里面的方法名保持一致</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;addOdd&#x27;</span>,<span class="string">&#x27;addWait&#x27;</span>]),</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="下面展示Counte组件当中调用的代码-只显示模板片段"><a href="#下面展示Counte组件当中调用的代码-只显示模板片段" class="headerlink" title="下面展示Counte组件当中调用的代码:(只显示模板片段)"></a>下面展示Counte组件当中调用的代码:(只显示模板片段)</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 读取vuex中的数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;&#123;$store.state.sum&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过mapState简化代码后可以直接方法名即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前求和放大10倍未:&#123;&#123;tenSum&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过mapGetters简化代码后可以直接方法名即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我在&#123;&#123;place&#125;&#125;,&#123;&#123;doing&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model.number</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里是使用mapMutations和mapActions一定要传参(如果有参数的话) --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 有参数传入不传参的话默认会拼接事件(event) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(n)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub(n)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addOdd(n)&quot;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addWait(n)&quot;</span>&gt;</span>等一等再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="再次提醒"><a href="#再次提醒" class="headerlink" title="再次提醒:"></a>再次提醒:</h2><ul><li><strong><strong style="color:red">mapActions</strong>与<strong style="color:red">mapMutations</strong>使用时，若有传递参数需要：在模板中绑定事件时传递好参数，否则参数默认就是事件对象<strong style="color:red">(event)</strong>,那么结果出来就是事件对象拼接而成的字符串。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vuex </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(24)-vuex的基本使用</title>
      <link href="/2022/08/31/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B024/"/>
      <url>/2022/08/31/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B024/</url>
      
        <content type="html"><![CDATA[<h1 id="vuex的基本使用"><a href="#vuex的基本使用" class="headerlink" title="vuex的基本使用"></a>vuex的基本使用</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h2><ul><li><strong>由于2022年2月起发布了Vue3.0过后,我们每一次<strong style="color:red">全局安装的vuex就是默认的4.0版本</strong>,但是<strong style="color:red">使用Vue2来搭建项目就必须使用vuex3.0版本</strong>,所以这是就看我们自己所需要搭建的项目是使用什么Vue版本了,<strong style="color:red">使用Vue2开发项目就安装vuex3版本,使用Vue3开发项目就使用vuex4版本</strong></strong></li><li><strong>安装vuex 3版本</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> i vuex@3</span><br></pre></td></tr></table></figure></li><li><strong>安装vuex 4版本</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> i vuex</span><br></pre></td></tr></table></figure></li></ul><h2 id="搭建vuex开发环境"><a href="#搭建vuex开发环境" class="headerlink" title="搭建vuex开发环境"></a>搭建vuex开发环境</h2><ul><li><strong>官网推荐格式:首先在项目的<strong style="color:red">src</strong>文件夹当中,创建一个名为 <strong style="color:red">store </strong> 的文件夹,里面新建一个<strong style="color:red">index.js</strong>文件用于创建<strong style="color:red">全局仓库(store)</strong></strong><br><img src="/../upload/Vue/V24/1.png" alt="image"></li><li><strong>代码如下:</strong><ul><li><strong>Index.js</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建vuex中最核心的部分--store(只要我们看见store文件夹就知道是vuex)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建actions</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line"><span class="comment">//写业务逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建mutations</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line"><span class="comment">//只加工数据,不写业务逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建state</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line"><span class="comment">//填写数据(共享数据)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用Vuex插件</span></span><br><span class="line"><span class="comment">// 切记一定要在这里调用,不然会报错(若在main.js中调用的话</span></span><br><span class="line"><span class="comment">// 因为vue会插手代码的编排,会导致先引入后执行vuex就会报错)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><strong>main.js</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入插件(store)</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">// 这里调用全局仓库(store)</span></span><br><span class="line">    store,</span><br><span class="line">    <span class="comment">// 在创建vm实例对象之前安装全局事件总线</span></span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//给当前的vm(这里的this)安装全局事件总线</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="基本使用-配置store完成后"><a href="#基本使用-配置store完成后" class="headerlink" title="基本使用:(配置store完成后)"></a>基本使用:(配置store完成后)</h1><ul><li><strong>1.组件中读取vuex中的数据：<code>$store.state.sum</code></strong></li><li><strong>2.组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></strong><br><strong>&gt; 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></strong></li></ul><h2 id="案例实践-求和案例"><a href="#案例实践-求和案例" class="headerlink" title="案例实践(求和案例)"></a>案例实践(求和案例)</h2><ul><li><strong>要求:</strong><ul><li><strong>1.加法+n</strong></li><li><strong>2.减法-n</strong></li><li><strong>3.奇数+n</strong></li><li><strong>4.延迟500ms+n</strong></li></ul></li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解:"></a>图解:</h3><p><img src="/../upload/Vue/V24/2.png" alt="image"></p><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h2><ul><li><strong>组件Count(除去css样式)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 读取vuex中的数据 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;&#123;$store.state.sum&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model.number</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addOdd&quot;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addWait&quot;</span>&gt;</span>等一等再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Count&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">n</span>:<span class="number">1</span>, <span class="comment">//用户选择的数字</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 因为纯加减没有业务逻辑可以让组件越过actions直接联系mutations</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 这里的大写是用于区分存在actions(小写)还是mutations(大写)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 组件-&gt;mutations(无业务逻辑)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sub</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 因为纯加减没有业务逻辑可以让组件越过actions直接联系mutations</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 这里的大写是用于区分存在actions(小写)还是mutations(大写)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 组件-&gt;mutations(无业务逻辑)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;SUB&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addOdd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 组件-&gt;actions-&gt;mutations(有业务逻辑:奇数＋)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addOdd&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addWait</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 组件-&gt;actions-&gt;mutations(有业务逻辑:延迟+)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addWait&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count&#x27;</span>,<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>Vuex(store里面的index.js)</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件用于创建Vuex中最为核心的store</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions——用于响应组件中的动作</span></span><br><span class="line"><span class="comment">// 这里是用来写业务逻辑的,比如判断</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">// 这两个真正意义上是没有业务逻辑的可以直接通过组件联系mutations</span></span><br><span class="line">    <span class="comment">// context参数:字面意思为上下文,一个对象,里面包括了你可能用到的属性和方法</span></span><br><span class="line">    <span class="comment">// value参数:就是你在组件当中通过.dispatch传过来的参数</span></span><br><span class="line">    <span class="comment">/* add(context,value)&#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;actions中的add被调用了&#x27;)</span></span><br><span class="line"><span class="comment">        context.commit(&#x27;add&#x27;,value)</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    addn(context,value)&#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;actions中的addn被调用了&#x27;)</span></span><br><span class="line"><span class="comment">        context.commit(&#x27;addN&#x27;,value)</span></span><br><span class="line"><span class="comment">    &#125;, */</span></span><br><span class="line">    <span class="title function_">addOdd</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions中的addOdd被调用了&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>)&#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions中的addWait被调用了&#x27;</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;SUB&#x27;</span>,value)</span><br><span class="line">        &#125;,<span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备mutations——用于操作数据（state）</span></span><br><span class="line"><span class="comment">// 这里不能写业务逻辑了,这里是真正加工数据的地方,只操作数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">// 这里的大写是用于区分存在actions(小写)还是mutations(大写)</span></span><br><span class="line">    <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的ADD被调用了&#x27;</span>)</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">SUB</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的SUB被调用了&#x27;</span>)</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备state——用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span> <span class="comment">//当前的和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="/../upload/Vue/V24/3.png" alt="image"></p><h2 id="分析拓展"><a href="#分析拓展" class="headerlink" title="分析拓展:"></a>分析拓展:</h2><ul><li><strong>Actions(服务员)里面的context参数</strong><br><img src="/../upload/Vue/V24/4.png" alt="image"></li><li><strong>一如当我们的业务逻辑非常的复杂的时候,就可以利用<strong style="color:red">context</strong>里面的属性了,如使用<strong style="color:red">dispatch</strong>召唤多个<strong style="color:red">Actions(服务员)</strong>来分担业务逻辑代码的编写等,如下:</strong><br><img src="/../upload/Vue/V24/5.png" alt="image"></li></ul><h2 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="/../upload/Vue/V24/6.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vuex </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(23)-理解什么是vuex</title>
      <link href="/2022/08/31/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B023/"/>
      <url>/2022/08/31/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B023/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Vuex-（共享数据）"><a href="#什么是Vuex-（共享数据）" class="headerlink" title="什么是Vuex?（共享数据）"></a>什么是Vuex?（共享数据）</h1><ul><li><strong>1.概念：专门在Vue 中<strong style="color:red">实现集中式状态（数据）管理</strong>的一个<strong style="color:red">Vue 插件</strong>，对vue 应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种<strong style="color:red">组件间通信的方式</strong>，且适用于<strong style="color:red">任意组件间通信</strong>。(就相当于一个集中的数据管理仓库,任何组件都可以读&#x2F;写仓库中的胡数据)</strong></li><li><strong><a href="https://github.com/vuejs/vuex">Github 地址</a></strong></li></ul><h2 id="图解："><a href="#图解：" class="headerlink" title="图解："></a>图解：</h2><ul><li><strong>假设我们A组件当中有一个x属性（数据），其他的组件也想用(读&#x2F;写,改),,那么此时A组件当中的x属性(数据)就有点共享单车的意思了,每个人都想用,每个人都能用<strong style="color:red">(多组件共享数据)</strong></strong><h3 id="1-使用全局事件总线来实现-编码很麻烦且复杂-代码复用率不高"><a href="#1-使用全局事件总线来实现-编码很麻烦且复杂-代码复用率不高" class="headerlink" title="1.使用全局事件总线来实现:(编码很麻烦且复杂,代码复用率不高)"></a><strong>1.使用全局事件总线来实现:(编码很麻烦且复杂,代码复用率不高)</strong></h3><img src="/../upload/Vue/V23/1.png" alt="image"><h3 id="2-使用vuex来实现"><a href="#2-使用vuex来实现" class="headerlink" title="2.使用vuex来实现:"></a><strong>2.使用vuex来实现:</strong></h3></li><li><strong>Vuex不属于任何一个组件,它的本身是一个<strong style="color:red">插件</strong>,需要用到<strong style="color:red">Vue.use()</strong>来所调用,在共享单车(<strong style="color:red">多组件当中都想用的属性[数据]</strong>)的场景当中就相当于共享单车的停放区域,每个人(<strong style="color:red">组件</strong>)都能调用(<strong style="color:red">读&#x2F;写,改</strong>).</strong><br><img src="/../upload/Vue/V23/2.png" alt="image"></li></ul><h2 id="什么时候去使用这个vuex呢-共享状态-数据-的时候"><a href="#什么时候去使用这个vuex呢-共享状态-数据-的时候" class="headerlink" title="什么时候去使用这个vuex呢?(共享状态[数据]的时候)"></a>什么时候去使用这个vuex呢?<strong style="color:red">(共享状态[数据]的时候)</strong></h2><ul><li><strong>1.多个组件依赖于同一状态</strong></li><li><strong>2.来自不同组件的行为需要变更同一状态</strong></li></ul><h1 id="Vuex的工作原理"><a href="#Vuex的工作原理" class="headerlink" title="Vuex的工作原理:"></a>Vuex的工作原理:</h1><p><img src="/../upload/Vue/V23/3.png" alt="image"></p><h3 id="由上图，我们可以看出Vuex有以下几个部分构成："><a href="#由上图，我们可以看出Vuex有以下几个部分构成：" class="headerlink" title="由上图，我们可以看出Vuex有以下几个部分构成："></a>由上图，我们可以看出Vuex有以下几个部分构成：</h3><ul><li><strong>1）<strong style="color:red">state</strong>(数据类型为对象)</strong><ul><li><strong>state是存储的单一状态，是存储的基本数据。</strong></li></ul></li><li><strong>2）<strong style="color:red">Getters</strong></strong><ul><li><strong>getters是store的计算属性，对state的加工，是派生出来的数据。就像computed计算属性一样，getter返回的值会根据它的依赖被缓存起来，且只有当它的依赖值发生改变才会被重新计算。</strong></li></ul></li><li><strong>3）<strong style="color:red">Mutations</strong>(数据类型为对象)</strong><ul><li><strong>mutations提交更改数据，使用store.commit方法更改state存储的状态。（mutations同步函数）</strong></li></ul></li><li><strong>4）<strong style="color:red">Actions</strong>(数据类型为对象)</strong><ul><li><strong>actions像一个装饰器，提交mutation，而不是直接变更状态。（actions可以包含任何异步操作）</strong></li></ul></li><li><strong>5）<strong style="color:red">Module</strong></strong><ul><li><strong>Module是store分割的模块，每个模块拥有自己的state、getters、mutations、actions。</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span> <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span> <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>6）<strong style="color:red">辅助函数</strong></strong><ul><li><strong>Vuex提供了mapState、MapGetters、MapActions、mapMutations等辅助函数给开发在vm中处理store。</strong></li></ul></li></ul><h2 id="举例完整的执行流程"><a href="#举例完整的执行流程" class="headerlink" title="举例完整的执行流程:"></a>举例完整的执行流程:</h2><ul><li><strong>在 vue 例子中，我们触发的 click 事件，就能触发 methods 中的方法，这是 vue 设计好的。而在 vuex 中则不行了，一定要有个东西来触发才行，就相当于自定义事件 on，emit。vuex 中的 action，mutation 通过 on 自定义的方法，相应的需要 emit 来触发。vuex当中,组件可以通过 <strong style="color:red">dispatch</strong> 可以触发 <strong style="color:red">actions</strong> 中的方法，<strong style="color:red">actions</strong> 中的 <strong style="color:red">actions</strong> 可以触发 <strong style="color:red">mutations</strong> 中的方法, <strong style="color:red">mutations</strong>(相当于vue中的methods)通过<strong style="color:red">mutate</strong>加工数据后返回给<strong style="color:red">state</strong>(相当于vue中的data)解析渲染过后响应到页面。</strong><br><img src="/../upload/Vue/V23/4.png" alt="image"></li><li><strong>使用白话来比喻就是:<strong style="color:red">组件相当于客人,Actions相当于服务生,Mutations相当于后厨,客人要点的餐就相当于State的状态(数据)</strong>,当客人来到餐厅吃饭,他可以通过给服务生下单提要求<strong style="color:red">(有业务逻辑)</strong>,比蛋炒饭不要蛋也不要饭,服务生就可以给你下单进而要求送到<strong style="color:red">后厨加工(Mutations)</strong>,当然如果你跟<strong style="color:red">后厨(Mutations)</strong>很熟的话,那么<strong style="color:red">后厨(Mutations)</strong>看到你就知道你喜欢吃蛋炒饭不加蛋也不加饭<strong style="color:red">(无业务逻辑)</strong>,那么<strong style="color:red">后厨(Mutations)</strong>也可以直接给你加工而不需要通过<strong style="color:red">服务生了(Actions)</strong></strong></li></ul><h1 id="vuex流程和vue对比"><a href="#vuex流程和vue对比" class="headerlink" title="vuex流程和vue对比"></a>vuex流程和vue对比</h1><p><img src="/../upload/Vue/V23/5.png" alt="image"></p><h2 id="对比关系"><a href="#对比关系" class="headerlink" title="对比关系:"></a>对比关系:</h2><ul><li><strong>更改数据: mutations -&gt; methods</strong></li><li><strong>获取数据: getters   -&gt; computed</strong></li><li><strong>数据:     state     -&gt; data</strong></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><strong><strong style="color:red">vuex</strong>是针对vuejs的<strong style="color:red">状态管理工具</strong>。<strong style="color:red">vuex</strong>完美的结合了vue的<strong style="color:red">响应式数据</strong>。</strong></li><li><strong>vue可以直接触发methods中的方法，<strong style="color:red">vuex</strong>不行。为了处理异步，当你触发一个点击事件时，会通过<strong style="color:red">dispatch</strong>来访问<strong style="color:red">actions</strong>中的方法，<strong style="color:red">actions</strong>中的<strong style="color:red">commit</strong>会触发<strong style="color:red">mutations</strong>中的方法从而修改<strong style="color:red">state</strong>的值，通过<strong style="color:red">getters</strong>来把数据反映到视图。</strong></li><li><strong><strong style="color:red">vuex</strong>通过<strong style="color:red">Vue.use(vuex)</strong>，从而调用install方法，通过<strong style="color:red">applyMixin(Vue)</strong>在任意组件执行<strong style="color:red">this.$store</strong>都能访问到<strong style="color:red">store</strong>对象，实现将<strong style="color:red">store</strong>挂载注入到组件中。</strong></li><li><strong>vuex的<strong style="color:red">state</strong>状态是<strong style="color:red">响应式</strong>的，是借助vue的data是响应式，将state存入vue实例组件的data中。</strong></li><li><strong>vuex的<strong style="color:red">getters</strong>则是借助于vue的<strong style="color:red">计算属性computed</strong>实现数据的实时监听。</strong></li></ul><blockquote><p>这篇博客引用了作者为”<strong>大神、求带</strong>“,”<strong>小铭子</strong>“的文章<br>原文链接为:<a href="(https://blog.csdn.net/qq_43473279/article/details/105364265">CSDN</a> 、<a href="(http://www.imooc.com/article/291242">慕课</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> vuex </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记（22）-Vue中的插槽</title>
      <link href="/2022/08/30/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B022/"/>
      <url>/2022/08/30/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B022/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中的插槽"><a href="#Vue中的插槽" class="headerlink" title="Vue中的插槽"></a>Vue中的插槽</h1><ul><li><strong>我们已经了解到父组件是可以通过  <strong style="color:red">props</strong> 将数据传给子组件的，它可以是任何类型的 JavaScript 值。但是 <strong style="color:red">模板内容（html片段）</strong>呢？在某些情况下，我们可能希望将模板片段传递给子组件，并让子组件在其自己的模板中渲染该片段,由此引出 <strong style="color:red">插槽</strong>。</strong></li><li><strong><strong style="color:red">slot（插槽）</strong>是 vue 为 <strong style="color:red">组件的封装者</strong> 提供的能力。允许开发者在封装组件时，把 <strong style="color:red">不确定的、希望由用户指定的部分</strong> 定义为插槽（即父组件向子组件传递带数据的标签，当一个子组件有不确定的结构时，就需要用到<strong style="color:red">插槽了[slot]</strong>）。可以把插槽认为是组件封装期间，为用户预留的<strong style="color:red">内容的占位符</strong>。 注意:插槽内容是在父组件中编译后,在传递给子组件的.</strong></li></ul><h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><ul><li><strong>作用：一般用于让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</strong></li></ul><h2 id="图解："><a href="#图解：" class="headerlink" title="图解："></a>图解：</h2><p><img src="/../upload/Vue/V22/1.png" alt="image"></p><h2 id="插槽的分类："><a href="#插槽的分类：" class="headerlink" title="插槽的分类："></a>插槽的分类：</h2><h1 id="1-默认插槽（简单）"><a href="#1-默认插槽（简单）" class="headerlink" title="1.默认插槽（简单）"></a>1.默认插槽（简单）</h1><ul><li><strong>通常来说我们组件中内的标签是无法放任何外部组件内容的，如果想子组件中的内容, 由外部的组件来决定我们可以使用默认插槽,在组件内声明 <strong style="color:red">slot 标签</strong></strong></li></ul><h2 id="代码解析："><a href="#代码解析：" class="headerlink" title="代码解析："></a>代码解析：</h2><ul><li><strong>App父组件（省略css样式）</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;美食&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s3.ax1x.com/2021/01/16/srJlq0.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;游戏&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;电影&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;测试插槽默认值&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Category</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Category&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;<span class="title class_">Category</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">foods : [<span class="string">&#x27;青菜&#x27;</span>,<span class="string">&#x27;牛肉&#x27;</span>,<span class="string">&#x27;猪肉&#x27;</span>,<span class="string">&#x27;鸡肉&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">games : [<span class="string">&#x27;CSGO&#x27;</span> , <span class="string">&#x27;Apex&#x27;</span> , <span class="string">&#x27;Raionbow Six&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">films : [<span class="string">&#x27;让子弹飞&#x27;</span>,<span class="string">&#x27;功夫&#x27;</span>,<span class="string">&#x27;天下无贼&#x27;</span>,<span class="string">&#x27;明日战记&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>Category子组件（省略css样式）</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义一个插槽(slot就是插槽的入口) --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不写的话你在App组件中写的结构体是即便是被解析了也不会显示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span>这是插槽的默认值,如果没有东西填入就会显示这段文字<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 接收父组件(App)传过来的数据(美食,电影,游戏等数据,以及标题)</span></span></span><br><span class="line"><span class="language-javascript">        props : [<span class="string">&#x27;title&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V22/2.png" alt="image"></p><h1 id="2-具名插槽（简单）"><a href="#2-具名插槽（简单）" class="headerlink" title="2.具名插槽（简单）"></a>2.具名插槽（简单）</h1><ul><li><strong>具名插槽，顾名思义就是给这个插槽起个名字,插槽在使用 <strong style="color:red">name</strong> 属性绑定名字后, 在组件被调用的时候,组件内的标签通过 <strong style="color:red">slot</strong> 属性来决定某个标签具体渲染哪一个插槽</strong></li></ul><h2 id="代码解析：-1"><a href="#代码解析：-1" class="headerlink" title="代码解析："></a>代码解析：</h2><ul><li><strong>App父组件（省略css样式）</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;美食&#x27;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给结构体赋予slot属性用于指定解析过后插入位置(slot标签) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://s3.ax1x.com/2021/01/16/srJlq0.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>更多美食<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;游戏&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>单机游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>网络游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;电影&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Vue2.6新特性,使用 template标签可以使用 v-slot:footer 代替 slot=&quot;footer&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>经典<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>热门<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>欢迎前来观影<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;测试插槽默认值&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Category</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Category&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;<span class="title class_">Category</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">foods : [<span class="string">&#x27;青菜&#x27;</span>,<span class="string">&#x27;牛肉&#x27;</span>,<span class="string">&#x27;猪肉&#x27;</span>,<span class="string">&#x27;鸡肉&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">games : [<span class="string">&#x27;CSGO&#x27;</span> , <span class="string">&#x27;Apex&#x27;</span> , <span class="string">&#x27;Raionbow Six&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">films : [<span class="string">&#x27;让子弹飞&#x27;</span>,<span class="string">&#x27;功夫&#x27;</span>,<span class="string">&#x27;天下无贼&#x27;</span>,<span class="string">&#x27;明日战记&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>Category子组件（省略css样式）</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义一个插槽(slot就是插槽的入口) --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不写的话你在App组件中写的结构体是即便是被解析了也不会显示 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里给插槽设置一个name属性用于指定标签内结构体二第插入位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>这是插槽的默认值,如果没有东西填入就会显示这段文字1(center插槽)<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>这是插槽的默认值,如果没有东西填入就会显示这段文字2(footer插槽)<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 接收父组件(App)传过来的数据(美食,电影,游戏等数据,以及标题)</span></span></span><br><span class="line"><span class="language-javascript">        props : [<span class="string">&#x27;title&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V22/3.png" alt="image"></p><h1 id="3-作用域插槽（较为拗口，难理解）"><a href="#3-作用域插槽（较为拗口，难理解）" class="headerlink" title="3.作用域插槽（较为拗口，难理解）"></a>3.作用域插槽（较为拗口，难理解）</h1><ul><li><strong>要想了解作用域插槽, 先了解需求之后比较好理解: 有时候数据在子组件中,但是却想让父组件来决定具体怎么展示，这里是：<span style="color:red">数据在子组件(这里的Category组件即子组件)的自身，但根据数据生成的结构需要组件的使用者(App组件即父组件)来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</strong></li><li><strong>这时候我们可以通过<span style="color:red">作用域插槽</span>, 让子组件<span style="color:red">通过属性绑定的方式</span>,把子组件的数据绑定到子组件中的某个属性上</strong></li><li><strong>父组件就可以通过<span style="color:red">slot-scope &#x3D; slot</span>拿到子组件中挂载在插槽中的数据,之后通过 比如 <span style="color:red">slot.attribute</span> 来得到具体的数据(ps: elementui 中的表格就是使用的作用域插槽)</strong></li><li><strong>注意在父组件中,如果要拿到子组件通过属性绑定在插槽中的数据需要使用 template 标签</strong></li></ul><h2 id="代码解析：-2"><a href="#代码解析：-2" class="headerlink" title="代码解析："></a>代码解析：</h2><ul><li><strong>App父组件（省略css样式）</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;游戏&#x27;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 作用与插槽要配合 template标签来使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slot-scope=&quot;yx&quot; 这里的属性值可以随意取 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当然也可以填入name属性来指定插入位置(具名插槽) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;yx&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in yx.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;游戏&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;yx&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in yx.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;游戏&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;yx&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in yx.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span> = <span class="string">&#x27;测试插槽默认值&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Category</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Category&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;<span class="title class_">Category</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>Category子组件（省略css样式）</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义一个插槽(slot就是插槽的入口) --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不写的话你在App组件中写的结构体是即便是被解析了也不会显示 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- :games=&quot;games&quot; 将数据发送给父组件(App),指定作用域接收使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span>&gt;</span>这是插槽的默认值,如果没有东西填入就会显示这段文字<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 接收父组件(App)传过来的数据(美食,电影,游戏等数据,以及标题)</span></span></span><br><span class="line"><span class="language-javascript">        props : [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">games : [<span class="string">&#x27;CSGO&#x27;</span> , <span class="string">&#x27;Apex&#x27;</span> , <span class="string">&#x27;Raionbow Six&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V22/4.png" alt="image"></p><blockquote><p>这篇博客引用了作者为”<strong>╰☆阳光のboy</strong>“的文章<br>原文链接为:<a href="https://blog.csdn.net/qq_35876972/article/details/105341408">CSDN</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 插槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(21)-Vue中配置代理服务器</title>
      <link href="/2022/08/28/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B021/"/>
      <url>/2022/08/28/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B021/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中配置代理服务器解决跨域问题"><a href="#Vue中配置代理服务器解决跨域问题" class="headerlink" title="Vue中配置代理服务器解决跨域问题"></a>Vue中配置代理服务器解决跨域问题</h1><h2 id="首先复习一下同源策略和跨域请求"><a href="#首先复习一下同源策略和跨域请求" class="headerlink" title="首先复习一下同源策略和跨域请求"></a><strong>首先复习一下同源策略和跨域请求</strong></h2><ul><li><strong>同源策略规定发送网络请求必须有三个一致,协议名,主机名和端口号&#x3D;&gt;例如:http&#x2F;&#x2F;:localhost:8081</strong></li><li><strong>协议名为http,主机名为localhost,端口号为8081,那么你就只能通过ajax联系协议名为http,主机名为localhost,端口号为8081的服务器</strong></li></ul><h2 id="解决跨域有以下几种方法"><a href="#解决跨域有以下几种方法" class="headerlink" title="解决跨域有以下几种方法:"></a><strong>解决跨域有以下几种方法:</strong></h2><ul><li><strong>1.cors:这是真正意义上的解决跨域,它通过给服务器设置一些跨域响应头的方法来解决跨域,响应返回数据的同时也会返回这些特殊的响应头,但是真正开发当中很少使用,这会造成所有人都能获取到你的数据,这也是后端的事</strong></li><li><strong>2.Jsonp:通过借助script标签里面的src属性来引入外部资源的时候不受同源策略限制的这样一个特点办到的,但是jsonp巧妙归巧妙,真正开发用得微乎其微,因为它是需要前端和后端一起努力才能做到的事,最致命的是它只能解决get请求的跨域问题</strong></li><li><strong>3.代理服务器(开发中用的最多):代理服务器就相当于我们日常生活中的”房屋中介”,它最厉害的地方在于,它所处的位置跟我们是一样的(端口号始终与页面保持一致),这样我们就可以向代理服务器发送请求,而代理服务器进而想真正拥有数据的服务器发送请求,服务器向代理服务器返回数据,代理服务器再返回数据给页面,因为代理服务器和真正拥有数据的服务器均为服务器,而服务器与服务器之间传数据是不需要通过ajax的,就不存在跨域问题,也就是不受同源策略的影响了.</strong><br><img src="/../upload/Vue/V21/1.png" alt="image"></li></ul><h2 id="开启代理服务器一般有两种方法"><a href="#开启代理服务器一般有两种方法" class="headerlink" title="开启代理服务器一般有两种方法:"></a>开启代理服务器一般有两种方法:</h2><ol><li><strong>njinx[后端常用,这里不讲]</strong></li><li><strong>Vue-cli[前端常用,重点讲解]</strong></li></ol><h3 id="Vue-cli中代理服务器的使用方法"><a href="#Vue-cli中代理服务器的使用方法" class="headerlink" title="Vue-cli中代理服务器的使用方法:"></a>Vue-cli中代理服务器的使用方法:</h3><p><strong><a href="https://cli.vuejs.org/zh/">Vue-cli官网</a></strong></p><ul><li><strong>找到:<span style="color:red">devServer.proxy</span>,便是代理服务器</strong><br><img src="/../upload/Vue/V21/2.png" alt="image"></li></ul><h2 id="配置代理方法一"><a href="#配置代理方法一" class="headerlink" title="配置代理方法一:"></a>配置代理方法一:</h2><ul><li><strong>在项目根目录中的 <span style="color:red">vue.config.js</span> 文件当中填入以下代码(这里展示完整的代码):</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>:<span class="literal">false</span> , <span class="comment">/*关闭语法检查*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置代理方法一: 开启代理服务器(代码片段)-------------------</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 这里填的是远端服务器的url</span></span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ------------------------------------------</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><strong>随后在App组件当中使用axios发送ajax请求即可</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getStudents&quot;</span>&gt;</span>点击获取学生信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//首先引入axios</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getStudents</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 发送axios请求(切记这里填的是代理服务器的url)</span></span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8081/students&#x27;</span>).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">                    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 成功返回数据返回</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据请求成功&#x27;</span>,response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 失败返回错误信息</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据请求失败&#x27;</span>,error.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V21/3.png" alt="image"></p><ul><li><strong>失败的请求展示如下:</strong><br><img src="/../upload/Vue/V21/4.png" alt="image"></li></ul><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><span style="color:red">注意点</span></h2><ul><li><strong>代理服务器并不是将所有收到的请求都会转发给服务器的,当你请求的资源,你本身就有,那么代理服务器就不会向服务器发送请求,如下:</strong></li><li><strong>这里我本身就有 students文件,那么我再向代理服务器发送请求,代理服务器就不会像服务器发送请求,响应数据了,它会响应我自身有的数据</strong><br><img src="/../upload/Vue/V21/5.png" alt="image"></li></ul><h2 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V21/6.png" alt="image"></p><h3 id="由此可见-这种配置代理的方法-方法一-有以下优缺点"><a href="#由此可见-这种配置代理的方法-方法一-有以下优缺点" class="headerlink" title="由此可见,这种配置代理的方法(方法一)有以下优缺点"></a>由此可见,这种配置代理的方法(方法一)有以下优缺点</h3><ol><li><strong>优点：配置简单，请求资源时直接发给前端（8080）即可。</strong></li><li><strong>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</strong></li><li><strong>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</strong></li></ol><h2 id="配置代理方法二-重点是搞清楚请求前缀和请求url的改写"><a href="#配置代理方法二-重点是搞清楚请求前缀和请求url的改写" class="headerlink" title="配置代理方法二:(重点是搞清楚请求前缀和请求url的改写)"></a>配置代理方法二:(重点是搞清楚请求前缀和请求url的改写)</h2><ul><li><strong>在项目根目录中的 vue.config.js 文件当中填入以下代码(这里展示完整的代码):</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>:<span class="literal">false</span> , <span class="comment">/*关闭语法检查*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置代里方法二(代码片段)-------------------</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 请求前缀(超级重点),匹配所有以 &#x27;/student&#x27;开头的请求路径</span></span><br><span class="line">      <span class="comment">// 其实就是控制代理是否向远端服务器发送请求</span></span><br><span class="line">      <span class="string">&#x27;/student&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// 代理目标的基础路径,即远端服务器的url</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class="line">        <span class="comment">//[正则表达式](超级重点)改写向远端服务器发送的请求url,不改的话会404</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/student&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>, <span class="comment">//用于支持websocket</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span> <span class="comment">//让代理服务器学会谎报来源的端口号</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="string">&#x27;/car&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// 代理目标的基础路径,即远端服务器的url</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line">        <span class="comment">//[正则表达式]改写向远端服务器发送的请求url,不改的话会404</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/car&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>, <span class="comment">//用于支持websocket</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span> <span class="comment">//让代理服务器学会谎报来源的端口号</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ----------------------------------------</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><strong>随后在App组件当中使用axios发送ajax请求即可</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getStudents&quot;</span>&gt;</span>点击获取学生信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getCars&quot;</span>&gt;</span>点击获取汽车信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 首先引入axios</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用方法二配置代理就可以同时配置多个代理了!</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.请求学生的信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getStudents</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 发送axios请求(切记这里填的是代理服务器的url)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 配置方法二,需要在端口号后面配置请求前缀:student</span></span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8081/student/students&#x27;</span>).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">                    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 成功返回数据返回</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据请求成功&#x27;</span>,response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 失败返回错误信息</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据请求失败&#x27;</span>,error.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.请求汽车的信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getCars</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 发送axios请求(切记这里填的是代理服务器的url)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 配置方法二,需要在端口号后面配置请求前缀:car</span></span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8081/car/cars&#x27;</span>).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">                    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 成功返回数据返回</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据请求成功&#x27;</span>,response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 失败返回错误信息</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据请求失败&#x27;</span>,error.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V21/7.png" alt="image"></p><h3 id="由此可见配置方法二有以下优缺点"><a href="#由此可见配置方法二有以下优缺点" class="headerlink" title="由此可见配置方法二有以下优缺点:"></a>由此可见配置方法二有以下优缺点:</h3><ol><li><strong>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</strong></li><li><strong>缺点：配置略微繁琐，请求资源时必须加前缀。</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 配置代理 </tag>
            
            <tag> 代理服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(20)-Vue中的动画与过渡</title>
      <link href="/2022/08/28/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B020/"/>
      <url>/2022/08/28/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B020/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中的动画与过渡"><a href="#Vue中的动画与过渡" class="headerlink" title="Vue中的动画与过渡"></a>Vue中的动画与过渡</h1><ul><li><strong>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</strong></li></ul><h2 id="图示："><a href="#图示：" class="headerlink" title="图示："></a><strong>图示：</strong></h2><p><img src="/../upload/Vue/V20/1.png" alt="image"></p><h2 id="写法："><a href="#写法：" class="headerlink" title="写法："></a>写法：</h2><ol><li><p><strong>准备好样式：</strong></p><ul><li><strong>元素进入的样式：</strong><ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li><strong>元素离开的样式：</strong><ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中<ol><li>v-leave-to：离开的终点</li></ol></li></ol></li></ul></li><li><p><strong>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</strong></p></li></ol><p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;go&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>Hello！ Vue！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="3"><li><strong>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</strong></li></ol><h2 id="1-动画写法（相较于过渡更为简单）"><a href="#1-动画写法（相较于过渡更为简单）" class="headerlink" title="1.动画写法（相较于过渡更为简单）"></a>1.动画写法（相较于过渡更为简单）</h2><ul><li><strong>组件当中的代码</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里可以给transition标签设置一个名字:go --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 同样可以设置开场动画:appear &amp;&amp; :apper=&quot;true&quot;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不能使用 apper=&quot;true&quot; 因为它需要一个布尔值,不是字符串--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 并且 transition 不会渲染到页面上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;go&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hello! Vue!![单个动画]<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Test&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                isShow : <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* Vue中的动画,需要提前准备好 */</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 调用动画(Vue中调用动画需要使用固定的格式) */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 没有给transition定义名字是使用: .v-enter-active &amp;&amp; .v-leave-active*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 有给transition定义名字是使用: .动画名-enter-active &amp;&amp; .动画名-leave-active*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.go-enter-active</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: move <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.go-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: move <span class="number">0.5s</span> linear reverse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V20/1.gif" alt="image"></p><h2 id="2-过度展示（相较于动画复杂一点）"><a href="#2-过度展示（相较于动画复杂一点）" class="headerlink" title="2.过度展示（相较于动画复杂一点）"></a>2.过度展示（相较于动画复杂一点）</h2><ul><li><strong>组件当中显示</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里可以给transition标签设置一个名字:go --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 同样可以设置开场动画:appear &amp;&amp; :apper=&quot;true&quot;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不能使用 apper=&quot;true&quot; 因为它需要一个布尔值,不是字符串--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 并且 transition 不会渲染到页面上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;go&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hello! Vue!![单个过渡]<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Test2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                isShow : <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* Vue中的动画,需要提前准备好 */</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 调用动画(Vue中调用动画需要使用固定的格式) */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 没有给transition定义名字是使用: .v-enter-active &amp;&amp; .v-leave-active*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 有给transition定义名字是使用: .动画名-enter-active &amp;&amp; .动画名-leave-active*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 设置进入的起点、离开的终点 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.go-enter</span>,<span class="selector-class">.go-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 设置进入的终点、离开的起点 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.go-enter-to</span>,<span class="selector-class">.go-leave</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 调用过渡 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.go-enter-active</span>,<span class="selector-class">.go-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V20/2.gif" alt="image"></p><h2 id="3-多个动画过渡"><a href="#3-多个动画过渡" class="headerlink" title="3.多个动画过渡"></a>3.多个动画过渡</h2><ul><li><strong>组件代码中展示</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里可以给transition标签设置一个名字:go --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 同样可以设置开场动画:appear &amp;&amp; :apper=&quot;true&quot;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不能使用 apper=&quot;true&quot; 因为它需要一个布尔值,不是字符串--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 并且 transition 不会渲染到页面上 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 若有多个元素需要过度，则需要使用：&lt;transition-group&gt;，且每个元素都要指定key值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;go&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Hello! Vue!![多个过渡]<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Hello! Vue!![多个过渡]<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Test2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                isShow : <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* Vue中的动画,需要提前准备好 */</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 调用动画(Vue中调用动画需要使用固定的格式) */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 没有给transition定义名字是使用: .v-enter-active &amp;&amp; .v-leave-active*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 有给transition定义名字是使用: .动画名-enter-active &amp;&amp; .动画名-leave-active*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 设置进入的起点、离开的终点 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.go-enter</span>,<span class="selector-class">.go-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 设置进入的终点、离开的起点 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.go-enter-to</span>,<span class="selector-class">.go-leave</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 调用过渡 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.go-enter-active</span>,<span class="selector-class">.go-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V20/3.gif" alt="image"></p><h2 id="4-调用第三方库（animate-css）"><a href="#4-调用第三方库（animate-css）" class="headerlink" title="4.调用第三方库（animate.css）"></a>4.调用第三方库（animate.css）</h2><p><strong><a href="https://www.npmjs.com/">Npm网站</a></strong> 、 <strong><a href="https://animate.style/">animate.css官网</a></strong></p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程:"></a>使用流程:</h3><ul><li><strong>首先安装第三方库</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install animate.css --save</span><br></pre></td></tr></table></figure></li><li><strong>引入第三方库</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;animate.css&#x27;;</span><br></pre></td></tr></table></figure></li><li><strong>给标签的类名(class)或者姓名属性(name)添加如下代码调用:</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 例如: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span>&gt;</span>An animated element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Vue中调用: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-group</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__rubberBand&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__backOutDown&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Hello! Vue!![第三方库]<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="图解展示"><a href="#图解展示" class="headerlink" title="图解展示:"></a>图解展示:</h2><p><img src="/../upload/Vue/V20/2.png" alt="image"><br><img src="/../upload/Vue/V20/3.png" alt="image"></p><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><ul><li><strong>组件代码中显示:</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在Vue中使用第三方库:(这里推荐animate.css)</span></span><br><span class="line"><span class="comment">               1.首先安装和引入</span></span><br><span class="line"><span class="comment">               2.给  transition &amp;&amp; transition-group 标签的name属性添加:</span></span><br><span class="line"><span class="comment">                animate__animated animate__bounce</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">               3.随后引用两个新的属性:</span></span><br><span class="line"><span class="comment">                 enter-active-class:&quot;这里添加入场动画&quot;</span></span><br><span class="line"><span class="comment">                 leave-active-class=&quot;这里添加退出动画&quot;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition-group</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">appear</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__rubberBand&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__backOutDown&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Hello! Vue!![第三方库]<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Hello! Vue!![第三方库]<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 首先引入第三方库</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;Test2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                isShow : <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V20/4.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 动画 </tag>
            
            <tag> 过渡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(19)-Vue中的消息订阅与发布</title>
      <link href="/2022/08/27/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B019/"/>
      <url>/2022/08/27/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B019/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中的消息的订阅与发布-pubsub"><a href="#Vue中的消息的订阅与发布-pubsub" class="headerlink" title="Vue中的消息的订阅与发布(pubsub)"></a>Vue中的消息的订阅与发布(pubsub)</h1><ul><li><strong>与事件总线相似，消息的订阅与发布同样是一种组件间的通信方式，适用于<span style="color:red">任意组件间通信</span>。</strong></li><li><strong>但与之不同的是，消息的订阅与发布是一种编程思想，一种编程理念，使用原生的js很难去实现，所以我们要借助一些第三方库，这里推荐的是 <span style="color:red">pubsub-js</span>。</strong></li></ul><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程:"></a>使用流程:</h2><ul><li><p><strong>1.在终端安装第三方库[pubsub]</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure></li><li><p><strong>2.在要使用的组件当中引入pubsub</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pubsub from &#x27;pubsub-js&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>3.接收数据</strong></p></li><li><p>例如:组件A想要接收组件B的数据,则需要在组件A当中设置相对应的api来订阅消息[subscribe]</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一:在methods中设置回调</span></span><br><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">MsgName , data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二:直接使用箭头函数回调接收数据</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="function">(<span class="params">MsgName,data</span>)=&gt;</span>&#123;&#125;) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p><strong>4.提供数据</strong></p></li><li><p>在消息的提供组件当中(组件B)设置相对应的api来发布消息[publish]</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pubsub.publish(&#x27;xxx&#x27;,数据)</span><br></pre></td></tr></table></figure></li><li><p><strong>5.销毁订阅流程(与定时器的销毁流程相似)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 销毁消息的订阅(这个流程与定时器很相似,需要给他设置一个id)</span></span><br><span class="line">    pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pubId</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h2><ul><li><p><strong>School组件(相当于组件A,消息的接收方,调用订阅消息api)</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 首先引入pubsub</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>:<span class="string">&#x27;广东江门&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 消息的订阅(后面的回调一般有两个参数,第一个为事件名,第二个为接收的数据)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">pubId</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;hello&#x27;</span> , <span class="function">(<span class="params">MsgName , data</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//这里使用箭头函数原因是将this指向Vue</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收到了来自于&#x27;</span>+<span class="title class_">MsgName</span>+<span class="string">&#x27;的消息:&#x27;</span>,data);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 销毁消息的订阅(这个流程与定时器很相似,需要给他设置一个id)</span></span></span><br><span class="line"><span class="language-javascript">            pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pubId</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Student组件(相当于组件B,消息的发布方,调用发布消息api)</strong> </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里给事件总线设置一个回调函数用于发送姓名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendStudentName&quot;</span>&gt;</span>把学生名给School组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 首先引入pubsub</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sendStudentName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 发布消息</span></span></span><br><span class="line"><span class="language-javascript">                pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V19/1.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 消息的订阅与发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(18)-Vue中的事件总线</title>
      <link href="/2022/08/27/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B018/"/>
      <url>/2022/08/27/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B018/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中的事件总线-EventBus-："><a href="#Vue中的事件总线-EventBus-：" class="headerlink" title="Vue中的事件总线(EventBus)："></a>Vue中的事件总线(EventBus)：</h1><h2 id="实现任意组件间的通信的一种工具"><a href="#实现任意组件间的通信的一种工具" class="headerlink" title="实现任意组件间的通信的一种工具"></a><strong>实现任意组件间的通信的一种工具</strong></h2><ul><li><strong>所谓事件总线,说白了就是一个中间人,相当于旧式的电话接线员,它可以帮助我们进行组任意组件间的通信(我们之前学过父给子传:props , 子给父传:$emit),在Vue当中,事件总线是一个所有组件都能看见的一个 ”人”(Vue.protype) ,并且它的身上存在 $on , $off , $emit等属性(Vue.protype).原理如下:</strong><br><img src="/../upload/Vue/V18/1.png" alt="image"></li></ul><h2 id="bus事件总线设置位置的原理"><a href="#bus事件总线设置位置的原理" class="headerlink" title="$bus事件总线设置位置的原理:"></a>$bus事件总线设置位置的原理:</h2><p><img src="/../upload/Vue/V18/2.png" alt="image"></p><h2 id="要想实现任意组件间的通信"><a href="#要想实现任意组件间的通信" class="headerlink" title="要想实现任意组件间的通信"></a>要想实现任意组件间的通信</h2><ul><li><ol><li><strong>所有的vc（组件的实例对象都能看得见）</strong></li></ol><ul><li><strong>(1)可以写在 Vue.protype 身上,[main.js] (推荐)</strong></li><li><strong>(2)也可以写在 window身上 (一般不推荐)</strong></li></ul></li><li><ol start="2"><li><strong>2.要有 $on , $off , $emit 等……</strong></li></ol></li></ul><h2 id="原理的实现流程-实现组件A给组件B传数据"><a href="#原理的实现流程-实现组件A给组件B传数据" class="headerlink" title="原理的实现流程:(实现组件A给组件B传数据)"></a>原理的实现流程:(实现组件A给组件B传数据)</h2><ul><li><strong>我们首先在 main.js 中为Vue的实例对象vm的原型(protype)身上建立一个中间人(事件总线$bus),其次在组件A的身上,利用$emit(‘自定义事件’ , 数据)创建一个自定义事件并且绑定在事件总线($bus)身上,随后将数据一并发送给组件B,在组件B中利用$on(‘组件A当中创建的自定义事件’ , (数据)&#x3D;&gt;{对接受的数据进行处理})监听事件总线($bus)身上传过来的组件A刚刚创建的一个自定义事件,接收并处理出过来的数据</strong></li></ul><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程:"></a>使用流程:</h2><ol><li><p><strong>安装全局事件总线:(main.js)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   ......</span><br><span class="line">   <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">   &#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p><strong>使用事件总线</strong></p><ol><li><strong>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 监听，接收和处理 xxx 传过来的数据</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>组件B提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></strong></li><li><strong>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</strong></li></ol></li></ol><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h2><ul><li><strong>1.main.js中的代码</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在创建vm实例对象之前安装全局事件总线</span></span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><strong>2.Student组件中的代码(组件A 发送)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里给事件总线设置一个回调函数用于发送姓名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendStudentName&quot;</span>&gt;</span>把学生名给School组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(&#x27;Student&#x27;,this.x)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sendStudentName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 给事件总线绑定回调，发送数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;hello&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>3.School组件当中的代码(组件B 接收)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>:<span class="string">&#x27;广东江门&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(&#x27;School&#x27;,this)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 监听，接收和处理 hello 传过来的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 对接收到的数据进行处理</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是School组件，收到了Student的数据&#x27;</span>,data)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 解绑 hello 自定义事件，释放资源</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V18/3.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 事件总线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(17)-Vue中的自定义事件</title>
      <link href="/2022/08/18/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B017/"/>
      <url>/2022/08/18/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B017/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue组件中的自定义事件"><a href="#Vue组件中的自定义事件" class="headerlink" title="Vue组件中的自定义事件"></a>Vue组件中的自定义事件</h1><ul><li><strong>Vue组件当中的自定义事件的一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></strong></li><li><strong>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</strong></li></ul><h2 id="实现子组件给父组件传递数据有两种方法"><a href="#实现子组件给父组件传递数据有两种方法" class="headerlink" title="实现子组件给父组件传递数据有两种方法"></a>实现子组件给父组件传递数据有两种方法</h2><ul><li><strong>1.使用props，但是前提是实现父组件要先传给子组件一个函数用于接收数据</strong></li><li><strong>2.使用自定义组件</strong></li></ul><h3 id="方法一：使用props"><a href="#方法一：使用props" class="headerlink" title="方法一：使用props"></a>方法一：使用props</h3><ul><li><strong>实现步骤：</strong><ul><li><strong>1.使用props先接受父组件传过来的函数,</strong></li><li><strong>2.再自己定义一个发送函数将自己的数据通过该发送函数传给从父组件中接收过来的接收函数实现数据传递</strong></li></ul></li></ul><h3 id="1-App组件代码展示"><a href="#1-App组件代码展示" class="headerlink" title="1.App组件代码展示:"></a>1.App组件代码展示:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;，学生姓名是:&#123;&#123;studentName&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过父组件给子组件传递函数类型的props实现：子给父传递数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">School</span> <span class="attr">:getSchoolName</span>=<span class="string">&quot;getSchoolName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法，使用@或v-on） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;Student @wyu=&quot;getStudentName&quot; @demo=&quot;m1&quot;/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法，使用ref） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这种方法更为灵活:可以嵌套异步任务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;show&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Student</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Student&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">School</span> <span class="keyword">from</span> <span class="string">&#x27;./components/School&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;<span class="title class_">School</span>,<span class="title class_">Student</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>:<span class="string">&#x27;Hello Vue!!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">studentName</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">getSchoolName</span>(<span class="params">name</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App收到了学校名：&#x27;</span>,name)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">getStudentName</span>(<span class="params">name,...params</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App收到了学生名：&#x27;</span>,name,params)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">studentName</span> = name</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">m1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;demo事件被触发了！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;wyu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">getStudentName</span>) <span class="comment">//绑定自定义事件</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this.$refs.student.$once(&#x27;wyu&#x27;,this.getStudentName) //绑定自定义事件（一次性）</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 嵌套异步任务(ref方法更为灵活的体现)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// setTimeout(()=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this.$refs.student.$on(&#x27;wyu&#x27;,this.getStudentName) //绑定自定义事件</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;,3000)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注意点1:将挂在函数mounted()和getStudentName写在了一起</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this.$refs.student.$on(&#x27;wyu&#x27;, (name,...params)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(&quot;App收到了学生的名字:&quot;, name , params)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this.studentName = name</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this);//这时这里的this指向并不是指向vm,而是指向了Student的vc</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.app</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-School组件代码展示"><a href="#2-School组件代码展示" class="headerlink" title="2.School组件代码展示:"></a>2.School组件代码展示:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendSchoolName&quot;</span>&gt;</span>把学校名给App<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用props先接受父组件传过来的函数,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 再自己定义一个发送函数将自己的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 通过该发送函数传给从父组件中接收过</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 来的接收函数实现数据传递</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;getSchoolName&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>:<span class="string">&#x27;江门&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 自己定义的发送函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sendSchoolName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">getSchoolName</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.school</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: peru;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V17/1.png" alt="image"></p><h3 id="方法二：使用自定义事件"><a href="#方法二：使用自定义事件" class="headerlink" title="方法二：使用自定义事件"></a>方法二：使用自定义事件</h3><ul><li><p><strong>自定义事件的常用指令(方法)[后面有详细代码]</strong></p><ul><li>1、父组件可以使用 props 把数据传给子组件。<ul><li>vc.$emit( event, arg ) &#x2F;&#x2F;触发当前实例上的事件</li></ul></li><li>2、子组件可以使用 $emit 触发父组件的自定义事件。<ul><li>vc.$on( event, fn );&#x2F;&#x2F;监听event事件后运行 fn</li></ul></li><li>3、解绑自定义事件 $off()<ul><li>vc.$off(‘事件名’);&#x2F;&#x2F;解绑自定义事件</li></ul></li><li>4、销毁自定义事件 $destroy()<ul><li>vc.$destroy(‘事件名’);&#x2F;&#x2F;销毁自定义事件，不填默认销毁该组件的全部自定义事件</li></ul></li></ul></li><li><p><strong>绑定自定义事件有两种方法：</strong></p><ul><li><strong>第一种：直接使用 v-on 或者 @绑定即可</strong></li><li><strong>第二种：使用ref（使用这种方法需要注意：它不认识原生的js事件，需要使用.native来配合使用）,这种方法更为灵活,可以嵌套异步任务</strong></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法，使用@或v-on） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span> @<span class="attr">wyu</span>=<span class="string">&quot;getStudentName&quot;</span> @<span class="attr">demo</span>=<span class="string">&quot;m1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法，使用ref） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;show&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="这里就展示Student组件的代码-App组件-父组件-在上面已经显示了"><a href="#这里就展示Student组件的代码-App组件-父组件-在上面已经显示了" class="headerlink" title="这里就展示Student组件的代码(App组件[父组件]在上面已经显示了)"></a><strong>这里就展示Student组件的代码(App组件[父组件]在上面已经显示了)</strong></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;&#123;number&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点我number++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendStudentlName&quot;</span>&gt;</span>把学生名给App<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;unbind&quot;</span>&gt;</span>解绑自定义事件(wyu)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;death&quot;</span>&gt;</span>销毁当前Student组件的实例(vc)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">number</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add回调被调用了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">number</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sendStudentlName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//触发Student组件实例身上的wyu事件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&#x27;wyu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>,<span class="number">666</span>,<span class="number">888</span>,<span class="number">900</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.$emit(&#x27;demo&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.$emit(&#x27;click&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">unbind</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$off(<span class="string">&#x27;wyu&#x27;</span>) <span class="comment">//解绑一个自定义事件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.$off([&#x27;wyu&#x27;,&#x27;demo&#x27;]) //解绑多个自定义事件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.$off() //解绑所有的自定义事件</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">death</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$destroy() <span class="comment">//销毁了当前Student组件的实例，销毁后所有Student实例的自定义事件全都不奏效。</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.student</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><strong>方法一:(使用v-on:或者@)</strong><br><img src="/../upload/Vue/V17/2.png" alt="image"></li><li><strong>方法二(使用ref,这表现为更加灵活,可以嵌套异步任务[添加一个定时器])</strong><br><img src="/../upload/Vue/V17/3.png" alt="image"></li></ul><h2 id="解绑自定义事件-在谁身上绑定-就在谁-组件-身上解绑"><a href="#解绑自定义事件-在谁身上绑定-就在谁-组件-身上解绑" class="headerlink" title="解绑自定义事件(在谁身上绑定,就在谁(组件)身上解绑)"></a>解绑自定义事件(在谁身上绑定,就在谁(组件)身上解绑)</h2><ul><li><strong>Student组件</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">unbind</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.$off(<span class="string">&#x27;wyu&#x27;</span>) <span class="comment">//解绑一个自定义事件</span></span><br><span class="line">    <span class="comment">// this.$off([&#x27;wyu&#x27;,&#x27;demo&#x27;]) //解绑多个自定义事件</span></span><br><span class="line">    <span class="comment">// this.$off() //解绑所有的自定义事件</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V17/4.png" alt="image"></p><h3 id="回顾一下生命周期的销毁流程"><a href="#回顾一下生命周期的销毁流程" class="headerlink" title="回顾一下生命周期的销毁流程:"></a>回顾一下生命周期的销毁流程:</h3><ul><li><strong>在销毁组件的时候会销毁该组件当中的自定义事件,但是不会销毁原生的js内置事件</strong></li><li><strong>如:设置一个按钮,没点击一次,num++</strong></li></ul><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V17/5.png" alt="image"></p><h1 id="两个注意点"><a href="#两个注意点" class="headerlink" title="两个注意点:"></a>两个注意点:</h1><h2 id="1-注意点1-在使用ref方式绑定自定义组件的时候"><a href="#1-注意点1-在使用ref方式绑定自定义组件的时候" class="headerlink" title="1.注意点1:在使用ref方式绑定自定义组件的时候,"></a>1.注意点1:在使用ref方式绑定自定义组件的时候,</h2><ul><li><strong>(1)正常的挂载mounted()和发送名字分开写:</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App组件代码片段(&lt;script&gt;&lt;/script&gt;)</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">getStudentName</span>(<span class="params">name,...params</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App收到了学生名：&#x27;</span>,name,params)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">studentName</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;wyu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">getStudentName</span>) <span class="comment">//绑定自定义事件</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-正常接收和展示"><a href="#结果展示-正常接收和展示" class="headerlink" title="结果展示:(正常接收和展示)"></a>结果展示:(正常接收和展示)</h3><p><img src="/../upload/Vue/V17/6.png" alt="image"></p><ul><li><strong>(2)为求方便,将挂在函数mounted()和getStudentName一起写：</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 注意点1:将挂在函数mounted()和getStudentName写在了一起</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;wyu&#x27;</span>, <span class="keyword">function</span> (<span class="params">name,...params</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;App收到了学生的名字:&quot;</span>, name , params)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">studentName</span> = name</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//这时这里的this指向并不是指向vm,而是指向了Student的vc</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>这时就会产生一个问题:页面上的姓名就会不会展示了</strong></li></ul><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V17/7.png" alt="image"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h2><ul><li><strong>可以将getStudentName写成箭头函数,因为我们知道,箭头函数是没有this指向的,它会向外找到mounted()的this指向,因为mounted()是写在App身上的生命周期钩子函数,它的this是指向App的实例对象的,因此能解决问题</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 注意点1:将挂在函数mounted()和getStudentName写在了一起</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;wyu&#x27;</span>, <span class="function">(<span class="params">name,...params</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;App收到了学生的名字:&quot;</span>, name , params)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">studentName</span> = name</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//这时这里的this指向并不是指向vm,而是指向了Student的vc</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示-4"><a href="#结果展示-4" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V17/8.png" alt="image"></p><h2 id="2-注意点2-组件上使用原生的js内置事件"><a href="#2-注意点2-组件上使用原生的js内置事件" class="headerlink" title="2.注意点2:组件上使用原生的js内置事件"></a>2.注意点2:组件上使用原生的js内置事件</h2><ul><li><strong>组件上绑定js原生事件，因为组件是不认识原生的js内置事件的,因此组件会认为该事件是自定义的事件。</strong></li><li><strong>可以使用.native修饰符指明是原生的js事件</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;show&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-5"><a href="#结果展示-5" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><strong>1.不使用 .native</strong><br><img src="/../upload/Vue/V17/9.png" alt="image"></li><li><strong>2.使用 .native</strong><br><img src="/../upload/Vue/V17/10.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> Vue组件 </tag>
            
            <tag> Vue中的自定义事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(16)-Vue脚手架(3)-插件以及scoped样式配置</title>
      <link href="/2022/08/15/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B016/"/>
      <url>/2022/08/15/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B016/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue脚手架中的插件"><a href="#1-Vue脚手架中的插件" class="headerlink" title="1.Vue脚手架中的插件"></a>1.Vue脚手架中的插件</h1><ul><li><strong>插件通常用来为 Vue 添加全局功能，插件的功能范围没有严格的限制。</strong></li><li><strong>功能：用于增强Vue(相当于给Vue开外挂)</strong></li><li><strong>本质：包含install()方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</strong></li></ul><h2 id="定义插件"><a href="#定义插件" class="headerlink" title="定义插件"></a>定义插件</h2><ul><li><p><strong>新建一个文件,命名自定义(推荐使用:plugin.js),随后在这个js文件中填写代码:</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认暴露在引用的时候只需要使用 文件名就行,不需要后缀名(如:plugin,不用.js了)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 可以在插件里面填入过滤器,混入,自定义指令,原型方法等......(相当于给Vue开挂,用于增强Vue)</span></span><br><span class="line">    <span class="title function_">install</span>(<span class="params">Vue,x,y,z</span>)&#123;</span><br><span class="line">        <span class="comment">// xyz为使用者自己定义的参数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y,z)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//全局过滤器(只要前面4个字符)</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义全局指令(页面刷新获取焦点)</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line">            <span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line">            <span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">                element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line">            <span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">                element.<span class="title function_">focus</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">            <span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">                element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义混入</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line">                    <span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给Vue原型上添加一个方法（vm和vc就都能用了）</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello! Vue!!&#x27;</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>最后在main.js中使用插件(调用Vue.use()方法)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//引入插件</span></span><br><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&#x27;./plugins&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用（使用）插件(Vue.use()方法)</span></span><br><span class="line"><span class="comment">// 默认暴露在引用的时候只需要使用 文件名就行,不需要后缀名(如:plugin,不用.js了)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(plugins,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V16/1.png" alt="image"></p><h1 id="2-Vue脚手架中的-scoped样式："><a href="#2-Vue脚手架中的-scoped样式：" class="headerlink" title="2.Vue脚手架中的 scoped样式："></a>2.Vue脚手架中的 scoped样式：</h1><ul><li><strong>作用：让样式在局部生效，防止冲突。</strong></li><li><strong>写法：<code>&lt;style scoped&gt;</code></strong></li></ul><h2 id="下面我们看看不加scoped样式的后果："><a href="#下面我们看看不加scoped样式的后果：" class="headerlink" title="下面我们看看不加scoped样式的后果："></a>下面我们看看不加scoped样式的后果：</h2><p><img src="/../upload/Vue/V16/2.png" alt="image"><br><img src="/../upload/Vue/V16/3.png" alt="image"></p><h3 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下:"></a>结果如下:</h3><p><img src="/../upload/Vue/V16/4.png" alt="image"></p><h2 id="加了scoped样式标识后："><a href="#加了scoped样式标识后：" class="headerlink" title="加了scoped样式标识后："></a>加了scoped样式标识后：</h2><p><img src="/../upload/Vue/V16/5.png" alt="image"><br><img src="/../upload/Vue/V16/6.png" alt="image"></p><h3 id="结果如下-1"><a href="#结果如下-1" class="headerlink" title="结果如下:"></a>结果如下:</h3><p><img src="/../upload/Vue/V16/7.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> Vue中脚手架 </tag>
            
            <tag> Vue-cli </tag>
            
            <tag> Vue中的插件 </tag>
            
            <tag> scoped样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(15)-Vue脚手架(2)-ref属性,props配置以及混合(mixin)</title>
      <link href="/2022/08/15/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B015/"/>
      <url>/2022/08/15/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B015/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue脚手架中的ref属性"><a href="#1-Vue脚手架中的ref属性" class="headerlink" title="1.Vue脚手架中的ref属性"></a>1.Vue脚手架中的ref属性</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h2><ul><li><ol><li><strong>被用来给元素或子组件注册引用信息（id的替代者）</strong></li></ol></li><li><ol start="2"><li><strong>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</strong></li></ol></li><li><ol start="3"><li><strong>使用方式：</strong></li></ol><ul><li><strong>1. 打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></strong></li><li><strong>2. 获取：<code>this.$refs.xxx</code></strong></li></ul></li></ul><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在Vue脚手架的环境下可以使用标签的简写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我输出上方的DOM元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">ref</span>=<span class="string">&quot;sch&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 引入school组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">School</span> <span class="keyword">from</span> <span class="string">&#x27;./components/School.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123; <span class="title class_">School</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                msg : <span class="string">&#x27;你好! Vue!!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 原始操作 dom 获取元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//同样可以输出,但是这样就操作了dom,与vue理论就背道而驰了</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(document.querySelector(&#x27;#msg&#x27;));</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 使用组件的ref属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// 这里的this是执行 App 的 vc</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>)<span class="comment">//输出App下的所有 绑定 ref 属性的元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">msg</span>);<span class="comment">//获取绑定了ref为msg属性的元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">btn</span>);<span class="comment">//获取绑定了ref为btn属性的元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">sch</span>);<span class="comment">//获取绑定了ref为sch属性的元素</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h2><p><img src="/../upload/Vue/V15/1.png" alt="image"></p><h1 id="2-props配置"><a href="#2-props配置" class="headerlink" title="2.props配置"></a>2.props配置</h1><ul><li><strong>利用props配置项由 父组件 向 子组件 传值操作，实现数据的动态绑定,提高组件的代码复用性,步骤如下：</strong><ul><li><strong>（1）在父组件中使用子组件的标签里面通过属性绑定向子组件传值，如下代码：</strong><ul><li><strong>这里展示App中的数据中传递:</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里配置接收的键名和键值,使用v-bind:(:)实现数据的动态绑定(数值类型) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 引入子组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Student</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Student&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;<span class="title class_">Student</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>（2）子组件通过props配置项接收，如下代码：</strong><ul><li><strong>这里展示Student中的数据中接收:(三种接收方法)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里使用data中嵌套props中的属性实现间接修改props属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：&#123;&#123;myAge+1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateAge&quot;</span>&gt;</span>尝试修改收到的年龄(点击+1)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;你好!! Vue!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 这里设置一个变量用于接收props中的属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">myAge</span>:<span class="variable language_">this</span>.<span class="property">age</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateAge</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">myAge</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.简单声明接收(只接受值)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// props:[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;sex&#x27;] </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.接收的同时对数据进行类型限制(接收值并且限制值的类型)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* props:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            name:String,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            age:Number,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            sex:String</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125; */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.接收的同时对数据：进行类型限制+默认值的指定+必要性的限制</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (限制类型、限制必要性、指定默认值)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//name的类型是字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//name是必要的</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">default</span>:<span class="number">99</span> <span class="comment">//默认值(如果没有传入或者格式错误就显示)</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">required</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h2><ul><li><strong>props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。(上述代码有实现过程)</strong></li></ul><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V15/2.png" alt="image"></p><h1 id="3-混合-mixin-属性"><a href="#3-混合-mixin-属性" class="headerlink" title="3.混合(mixin)属性"></a>3.混合(mixin)属性</h1><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用:"></a>作用:</h2><ul><li><strong>可以把多个组件共用的配置提取成一个混入对象</strong></li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h2><ul><li><strong>多个组件身上均有相同的方法或者属性(data,methods…)的时候</strong><br><img src="/../upload/Vue/V15/10.png" alt="image"></li></ul><h2 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h2><h3 id="mixin-js-提取出来"><a href="#mixin-js-提取出来" class="headerlink" title="mixin.js(提取出来)"></a>mixin.js(提取出来)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将mixin暴露出去(混入)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hunhe = &#123;</span><br><span class="line">    <span class="comment">// vm或者vc身上的共有的methods属性</span></span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好啊！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将mixin暴露出去(混入)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hunhe2 = &#123;</span><br><span class="line">    <span class="comment">// vm或者vc身上的共有的data属性</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line">            <span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部引入-在对应的组件身上引入即可"><a href="#局部引入-在对应的组件身上引入即可" class="headerlink" title="局部引入(在对应的组件身上引入即可)"></a>局部引入(在对应的组件身上引入即可)</h3><h4 id="例子-School组件-归于App管辖下的子组件"><a href="#例子-School组件-归于App管辖下的子组件" class="headerlink" title="例子:School组件(归于App管辖下的子组件)"></a>例子:School组件(归于App管辖下的子组件)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- School组件(局部引入mixin[混入]) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//引入一个hunhe</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import &#123;hunhe,hunhe2&#125; from &#x27;../mixin&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>:<span class="string">&#x27;广东江门&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">x</span>:<span class="number">666</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 局部混入(mixin,只会在这个对象身上有这些属性和方法)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// mixins:[hunhe,hunhe2],</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="例子-Student组件-归于App管辖下的子组件"><a href="#例子-Student组件-归于App管辖下的子组件" class="headerlink" title="例子:Student组件(归于App管辖下的子组件)"></a>例子:Student组件(归于App管辖下的子组件)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Student组件(局部引入mixin[混入]) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import &#123;hunhe,hunhe2&#125; from &#x27;../mixin&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 局部混入(mixin,只会在这个对象身上有这些属性和方法)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// mixins:[hunhe,hunhe2]</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局引入-main-js"><a href="#全局引入-main-js" class="headerlink" title="全局引入:(main.js)"></a>全局引入:(main.js)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在main.js中全局引入mixin(混入)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入mixin.js(混合)</span></span><br><span class="line"><span class="keyword">import</span> &#123;hunhe,hunhe2&#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局混合,这样会使得全局的Vue实例化对象(vm以及所有的vc)身上都有这些属性和方法</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(hunhe)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(hunhe2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="结果展示-这里就展示全局引入的结果"><a href="#结果展示-这里就展示全局引入的结果" class="headerlink" title="结果展示:(这里就展示全局引入的结果)"></a>结果展示:(这里就展示全局引入的结果)</h3><p><img src="/../upload/Vue/V15/3.png" alt="image"><br><img src="/../upload/Vue/V15/4.png" alt="image"><br><img src="/../upload/Vue/V15/5.png" alt="image"><br><img src="/../upload/Vue/V15/6.png" alt="image"><br><img src="/../upload/Vue/V15/7.png" alt="image"></p><h3 id="局部引入的话就只是在当前组件身上有-但是在其他组件身上就没有"><a href="#局部引入的话就只是在当前组件身上有-但是在其他组件身上就没有" class="headerlink" title="局部引入的话就只是在当前组件身上有,但是在其他组件身上就没有"></a>局部引入的话就只是在当前组件身上有,但是在其他组件身上就没有</h3><p><img src="/../upload/Vue/V15/8.png" alt="image"><br><img src="/../upload/Vue/V15/9.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> Vue中脚手架 </tag>
            
            <tag> Vue-cli </tag>
            
            <tag> ref属性 </tag>
            
            <tag> props配置 </tag>
            
            <tag> 混合(mixin)属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(14)-Vue脚手架(1)-render函数</title>
      <link href="/2022/08/14/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014/"/>
      <url>/2022/08/14/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue脚手架中的render函数"><a href="#Vue脚手架中的render函数" class="headerlink" title="Vue脚手架中的render函数"></a>Vue脚手架中的render函数</h1><h2 id="render函数是什么"><a href="#render函数是什么" class="headerlink" title="render函数是什么?"></a><strong>render函数是什么?</strong></h2><ul><li><strong>顾名思义render有渲染的意思,所以render函数的用法就是用来渲染html文件,准确的来说是用于渲染vm(Vue实例化对象)当中的html片段(其他的组件[App,其他子组件等..]不需要render来渲染,因为,在项目的根目录下的 package.json 中存在  “vue-template-compiler” 这就是用于解析.vue后缀组件的模板编译器,但是要知道 vm 是在 main.js 里面编写的, “vue-template-compiler” 不解析后缀为.js的文件,所以要想解析 main.js 里面的模板(template)要么需要引入完整的Vue(一般在项目开发中是引用残缺版的Vue,里面一般是没有模板编译器的),要么就调用render函数去解析模板,推荐使用后者,因为模板编译器只在项目初期的时候调用,在用webpack把项目打包好后就不需要使用了)</strong></li></ul><h2 id="完整语法如下"><a href="#完整语法如下" class="headerlink" title="完整语法如下:"></a>完整语法如下:</h2><ul><li><strong>Rander函数里面传递参数:createElement 而且这个参数也是一个函数,比如:喔我这里渲染一个h1标签</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">render</span>: <span class="keyword">function</span> (<span class="params">createElement</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createElement</span>(‘h1’,’你好阿!’)</span><br><span class="line">    <span class="comment">//里面也可以直接传入组件</span></span><br><span class="line">    <span class="comment">//return createElement(App)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V14/1.png" alt="image"></p><h2 id="在使用Es6语法后可简写为箭头函数-在项目中常用"><a href="#在使用Es6语法后可简写为箭头函数-在项目中常用" class="headerlink" title="在使用Es6语法后可简写为箭头函数,在项目中常用:"></a>在使用Es6语法后可简写为箭头函数,在项目中常用:</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Vue实例对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  el : <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// 将App组件放入容器中,这里的h就是createElement</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)<span class="comment">/*.$mount(&#x27;#app&#x27;)*/</span><span class="comment">//生命周期 = 等同于给容器绑定id el属性</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><ul><li><strong>关于不同版本的Vue：</strong><ul><li><strong>1.vue.js与vue.runtime.xxx.js的区别：</strong><ul><li><strong>(1).vue.js是完整版的Vue，包含：核心功能+模板解析器。</strong></li><li><strong>(2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</strong></li></ul></li><li><strong>2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用</strong><ul><li><strong>render函数接收到的createElement函数去指定具体内容。</strong></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> Vue中脚手架 </tag>
            
            <tag> Vue-cli </tag>
            
            <tag> render函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(13)-Vue脚手架(Vue-cli)</title>
      <link href="/2022/08/14/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013/"/>
      <url>/2022/08/14/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-cli（脚手架）"><a href="#Vue-cli（脚手架）" class="headerlink" title="Vue-cli（脚手架）"></a>Vue-cli（脚手架）</h1><h2 id="1-什么是Vue-cli（脚手架）？"><a href="#1-什么是Vue-cli（脚手架）？" class="headerlink" title="1.什么是Vue-cli（脚手架）？"></a>1.什么是Vue-cli（脚手架）？</h2><ul><li><strong>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。</strong><br><a href="https://cli.vuejs.org/zh/">Vue-cli官方文档</a></li></ul><h3 id="命令行操作步骤：-在cmd或者VScode集成终端中打开"><a href="#命令行操作步骤：-在cmd或者VScode集成终端中打开" class="headerlink" title="命令行操作步骤：(在cmd或者VScode集成终端中打开)"></a>命令行操作步骤：(在cmd或者VScode集成终端中打开)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$npm install -g @vue/cli                          安装vue脚手架</span><br><span class="line">$vue -V                                         测试是否安装成功</span><br><span class="line">$vue create 项目名 （注意不要用中文和特殊字符）            创建Vue项目</span><br><span class="line">$cd 项目名                                             进入创建好的项目文件夹</span><br><span class="line">$npm run serve        运行项目</span><br></pre></td></tr></table></figure><ul><li><strong>备注:如果出现下载缓慢请配置 请使用国内的npm 淘宝镜像：</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><strong>结合上一篇博客的单文件组件运行后结果展示:</strong><br><img src="/../upload/Vue/V13/1.png" alt="image"></li></ul><h2 id="注意-Vue-cli-5-x版本会出现语法错误-组件的命名错误"><a href="#注意-Vue-cli-5-x版本会出现语法错误-组件的命名错误" class="headerlink" title="注意:Vue-cli 5.x版本会出现语法错误:(组件的命名错误)"></a>注意:Vue-cli 5.x版本会出现语法错误:(组件的命名错误)</h2><ul><li><strong>报错信息:vue eslint报错：Component name “School” should always be multi-word.eslintvue&#x2F;multi-word-component-names</strong><br><img src="/../upload/Vue/V13/2.png" alt="image"></li><li><strong>根据提示信息可知是组件名出了问题，报错信息翻译过来大概就是组件名”Student”应该总是使用多个单词拼接横线组成的。但是组件名也是可以使用单个单词的,只是官方文档上面的风格建议我们使用大驼峰或使用“-”衔接的方式而已。</strong></li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h2><ul><li><strong>方法一:那就是改组件的名字,这没什么好说的,</strong></li><li><strong>方法二:关闭语法检查的配置项(治标不治本)</strong><ul><li><strong>我们在项目的根目录中找到(没有就自行创建)vue.config.js文件</strong></li><li><img src="/../upload/Vue/V13/3.png" alt="image"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lintOnSave:false /*关闭语法检查*/</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>方法三:关闭命名规则校验(推荐)</strong><ul><li><strong>在根目录下找到 .eslintrc.js 文件，同样如果没有则新建一个（注意文件前有个点），代码如下:</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一行</span></span><br><span class="line"><span class="comment">//在rules中添加自定义规则 </span></span><br><span class="line"><span class="comment">//关闭组件命名规则</span></span><br><span class="line"> <span class="string">&quot;vue/multi-word-component-names&quot;</span>:<span class="string">&quot;off&quot;</span>,</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="文件内容如下"><a href="#文件内容如下" class="headerlink" title="文件内容如下:"></a>文件内容如下:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;extends&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@babel/eslint-parser&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">     <span class="comment">//在rules中添加自定义规则</span></span><br><span class="line"> <span class="comment">//关闭组件命名规则</span></span><br><span class="line">     <span class="string">&quot;vue/multi-word-component-names&quot;</span>:<span class="string">&quot;off&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">overrides</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">files</span>: [</span><br><span class="line">        <span class="string">&#x27;**/__tests__/*.&#123;j,t&#125;s?(x)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;**/tests/unit/**/*.spec.&#123;j,t&#125;s?(x)&#x27;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">env</span>: &#123;</span><br><span class="line">        <span class="attr">jest</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>以上是关闭命名规则，将不会校验组件名，官方建议设置是根据组件名进行忽略</strong></li></ul><h3 id="忽略个别组件名"><a href="#忽略个别组件名" class="headerlink" title="忽略个别组件名:"></a>忽略个别组件名:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加组件命名忽略规则</span></span><br><span class="line"><span class="string">&quot;vue/multi-word-component-names&quot;</span>: [<span class="string">&quot;error&quot;</span>,&#123;</span><br><span class="line">   <span class="string">&quot;ignores&quot;</span>: [<span class="string">&quot;School&quot;</span>,<span class="string">&quot;Student&quot;</span>]<span class="comment">//需要忽略的组件名</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="最后就可以运行成功了"><a href="#最后就可以运行成功了" class="headerlink" title="最后就可以运行成功了:"></a>最后就可以运行成功了:</h3><p><img src="/../upload/Vue/V13/4.png" alt="image"></p><blockquote><p>这篇博客引用了作者为”<strong>Wally94</strong>“的文章<br>原文链接为:<a href="https://blog.csdn.net/u013078755/article/details/123581070?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-123581070-blog-124764947.t0_layer_searchtargeting_sa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-123581070-blog-124764947.t0_layer_searchtargeting_sa&utm_relevant_index=5">CSDN</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> Vue中脚手架 </tag>
            
            <tag> Vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(12)-Vue中的组件(3):单文件组件</title>
      <link href="/2022/08/14/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012/"/>
      <url>/2022/08/14/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue单文件组件"><a href="#Vue单文件组件" class="headerlink" title="Vue单文件组件"></a>Vue单文件组件</h1><h2 id="1-什么是单文件组件？"><a href="#1-什么是单文件组件？" class="headerlink" title="1.什么是单文件组件？"></a>1.什么是单文件组件？</h2><ul><li><strong>单文件组件就是一个文件扩展名为 .vue 的 single-file components (单文件组件)的文件。是Vue.js自定义的一种文件格式，一个.vue文件就是一个单独的组件，在文件内封装了组件相关的代码：html、css、js</strong></li></ul><h2 id="2-单文件组件的好处："><a href="#2-单文件组件的好处：" class="headerlink" title="2.单文件组件的好处："></a>2.单文件组件的好处：</h2><ul><li><strong>在 Vue 项目中，我们使用 Vue.component 来定义全局组件，紧接着用 new Vue({ el: ‘#root’}) 在每个页面内指定一个容器元素。相较于非单文件组件，单文件组件可以写入css样式，在添加拓展后可以有语法高亮以及语法提示等，在脚手架（Vue-cli）的环境下能够快速的搭建项目。</strong></li></ul><h2 id="3-创建单文件组件："><a href="#3-创建单文件组件：" class="headerlink" title="3.创建单文件组件："></a>3.创建单文件组件：</h2><h3 id="语法形式："><a href="#语法形式：" class="headerlink" title="语法形式："></a><strong>语法形式：</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里写单文件组件的结构 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里写单文件组件的交互</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 这里写单文件组件的样式 */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在vue脚手架中编写项目的流程："><a href="#2-在vue脚手架中编写项目的流程：" class="headerlink" title="2.在vue脚手架中编写项目的流程："></a>2.在vue脚手架中编写项目的流程：</h3><ul><li><strong>1.main.js(必须)</strong><ul><li><strong>main.js用于创建Vue实例（对话Ap组件），main.js是整个项目的入口文件</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js是整个项目的入口文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入App组件,它是所有组件的父组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Vue实例对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  el : <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// 将App组件放入容器中</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)<span class="comment">/*.$mount(&#x27;#app&#x27;)*/</span><span class="comment">//生命周期 = 等同于给容器绑定id el属性</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>2.App.vue（所有组件的 “父组件”）（必须）</strong><ul><li><strong>在App.vue是管理所有子组件的父组件，它直接与vm对话的，故在App.vue中中引入所有子组件</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- html片段 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">School</span>&gt;</span><span class="tag">&lt;/<span class="name">School</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Student</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 首先要先引入app下管理的所有子组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Student</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Student&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">School</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/School&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;App&#x27;</span>,  </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注册组件(简写形式)</span></span></span><br><span class="line"><span class="language-javascript">        components : &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Student</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">School</span></span></span><br><span class="line"><span class="language-javascript">        &#125;      </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 样式部分 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>3.其他组件（在App或者其他父组件管辖下的子组件）</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里写单文件组件的结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>点我提示学校名<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里写单文件组件的交互</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&#x27;School&#x27;</span> ,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                name : <span class="string">&#x27;五邑大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                address : <span class="string">&#x27;江门&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 这里写单文件组件的样式 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>4.index.html（这个就是最终的网页）（必须）</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 针对ie浏览器的一个特殊配置,含义是让ie浏览器以最高的渲染级别渲染页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启移动端开发的理想视口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入网页标签图标,这里的 &lt;%= BASE_URL %&gt; 是指向 public文件夹的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置网页标题,这里的 &lt;%= htmlWebpackPlugin.options.title %&gt; 是指向 json文件中的title属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的noscript标签表示如果你的浏览器不支持js解析就会弹出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V12/1.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> Vue中的组件 </tag>
            
            <tag> 单文件组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Es6中的暴露和引入</title>
      <link href="/2022/08/14/Es6%E4%B8%AD%E7%9A%84%E6%9A%B4%E9%9C%B2%E5%92%8C%E5%BC%95%E5%85%A5/"/>
      <url>/2022/08/14/Es6%E4%B8%AD%E7%9A%84%E6%9A%B4%E9%9C%B2%E5%92%8C%E5%BC%95%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Es6中的模块化：暴露（export）和引入（import）"><a href="#Es6中的模块化：暴露（export）和引入（import）" class="headerlink" title="Es6中的模块化：暴露（export）和引入（import）"></a>Es6中的模块化：暴露（export）和引入（import）</h1><ul><li><strong>三种暴露方式：1.分别暴露 2.统一暴露 3. 默认暴露</strong></li></ul><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 暴露数据的三种方法</span></span><br><span class="line"><span class="comment">// 1.分别暴露</span></span><br><span class="line"><span class="comment">// export let school = &#x27;五邑大学&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// export function say()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;欢迎来到邑大!&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// export function jod() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;这里可以帮你找到心仪的工作!&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.统一暴露</span></span><br><span class="line"><span class="comment">// export &#123;school , say , jod&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    school : <span class="string">&#x27;五邑大学&#x27;</span>,</span><br><span class="line">    say : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;欢迎来到邑大!&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    jod : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这里可以帮你找到心仪的工作!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>三种引入方式：1.通用引入 2. 解构赋值形式引入 3.简单形式引入（但是只针对默认暴露）</strong></li></ul><h3 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 浏览器中一般是之间在script标签中引入路径即可 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一定要添加 type=&quot;module&quot; 这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 引入一般有三种方法:</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.通用的引入方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import * as m from &quot;./m.js&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(m);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.解构赋值的形式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import &#123;school , say , jod&#125; from &quot;./m.js&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(school); // 五邑大学</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(say);//ƒ say()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(jod);//ƒ jod()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 默认暴露</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import&#123;default as m&#125; from &quot;./m.js&quot;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.简单形式 但是只能针对默认暴露</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> m <span class="keyword">from</span> <span class="string">&quot;./m.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">//&#123;school: &#x27;五邑大学&#x27;, say: ƒ, jod: ƒ&#125;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结构如下：（三种运行结果均是如此）"><a href="#运行结构如下：（三种运行结果均是如此）" class="headerlink" title="运行结构如下：（三种运行结果均是如此）"></a>运行结构如下：（三种运行结果均是如此）</h3><p><img src="/../upload/Es6/export.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es6 </tag>
            
            <tag> 暴露和引入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(11)-Vue中的组件(2)</title>
      <link href="/2022/08/12/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011/"/>
      <url>/2022/08/12/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011/</url>
      
        <content type="html"><![CDATA[<h1 id="1-组件之间的嵌套关系："><a href="#1-组件之间的嵌套关系：" class="headerlink" title="1.组件之间的嵌套关系："></a>1.组件之间的嵌套关系：</h1><ul><li><strong>话不多说直接上代码：</strong></li></ul><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Vue模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.config.productionTip = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 创建student组件（归属于school的子组件）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        name:&#x27;student&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template : `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名:</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄:</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                name : &#x27;张三&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                age : &#x27;20&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 创建school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        name:&#x27;school&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名字:</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址:</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="comment">&lt;!-- school管理下的子组件student --&gt;</span>   </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span>  </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                name : &#x27;五邑大学&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                address : &#x27;广东江门&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 注册组件(将student组件归于school管理)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components : &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            student//简写形式</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 创建hi组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const hi = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi  </span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml">!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                name : &#x27;Vue&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 一人之下(vm),万人之上(管理其他组件)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 重要:创建组件的管理者app(常用于项目中的开发)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const app = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        name:&#x27;app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template : `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="comment">&lt;!-- app管理下的子组件 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">hi</span>&gt;</span><span class="tag">&lt;/<span class="name">hi</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span>    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 注册组件(局部)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components :&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            hi</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // Vue实例化对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 注册组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            app</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V11/1.png" alt="image"></p><h1 id="2-Vuecomponent构造函数的讲解（重点）："><a href="#2-Vuecomponent构造函数的讲解（重点）：" class="headerlink" title="2.Vuecomponent构造函数的讲解（重点）："></a><strong>2.Vuecomponent构造函数的讲解（重点）：</strong></h1><ul><li><strong>(1).组件的本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</strong></li><li><strong>(2).我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</strong></li><li><strong>(3).特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！</strong></li><li><strong>(4).关于this指向：</strong><ul><li><strong>1.组件配置中：</strong><ul><li><strong>data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象，理论上与vm非常的相似】。</strong></li></ul></li><li><strong>2.new Vue(options)配置中：</strong><ul><li><strong>data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</strong></li></ul></li></ul></li><li><strong>(5).VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。</strong></li><li><strong>(6).vc和 vm的区别：</strong><ul><li><strong>不严谨来说的话，两者是可以划等号的，因为vc有的属性，方法，vm都有而且基本是一致的，但是vm有一个el属性用于决定为那个容器服务，但是vc没有el属性（硬写会报错），可以这样认为， vc 相当于 小型的 vm</strong></li></ul></li></ul><h3 id="代码解析-1"><a href="#代码解析-1" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义school组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;  </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;   </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;button @click=&quot;showName&quot;&gt;点我提示this指向&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>:<span class="string">&#x27;江门&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;showName&#x27;</span>,<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> test = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`&lt;span&gt;wyu&lt;/span&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义hello组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> hello = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;test&gt;&lt;/test&gt;   </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;你好啊！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;test&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;school === hello?&#x27;</span>,school === hello)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建vm</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;school,hello&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示-1"><a href="#运行结果展示-1" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V11/2.png" alt="image"></p><h1 id="3-一个重要的内置关系（vc与vm）"><a href="#3-一个重要的内置关系（vc与vm）" class="headerlink" title="3.一个重要的内置关系（vc与vm）"></a><strong>3.一个重要的内置关系（vc与vm）</strong></h1><h2 id="（涉及到构造函数的原型与原型链的知识，翻查以往博客复习）"><a href="#（涉及到构造函数的原型与原型链的知识，翻查以往博客复习）" class="headerlink" title="（涉及到构造函数的原型与原型链的知识，翻查以往博客复习）"></a>（涉及到构造函数的原型与原型链的知识，翻查以往博客复习）</h2><ul><li><strong>(1).一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</strong></li><li><strong>(2).为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</strong></li></ul><h2 id="图解如下"><a href="#图解如下" class="headerlink" title="图解如下:"></a>图解如下:</h2><p><img src="/../upload/Vue/V11/3.png" alt="image"></p><h3 id="代码解析-2"><a href="#代码解析-2" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="line"><span class="comment">// 我这里在Vue的原型对象上面添加x属性</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">x</span> = <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义school组件</span></span><br><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;button @click=&quot;showX&quot;&gt;点我输出x&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span><br><span class="line"><span class="attr">address</span>:<span class="string">&#x27;广东江门&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">showX</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// 这里同样能输出Vue原型对象上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>)</span><br><span class="line"><span class="comment">// 验证上面的:VueComponent.prototype.__proto__ === Vue.prototype是否正确</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;VueComponent.prototype.__proto__ === Vue.prototype&#x27;</span>,school.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个vm</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">msg</span>:<span class="string">&#x27;你好&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">components</span>:&#123;school&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="运行结果展示-2"><a href="#运行结果展示-2" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V11/4.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> Vue中的组件 </tag>
            
            <tag> 非单文件组件 </tag>
            
            <tag> Vuecomponent构造函数 </tag>
            
            <tag> 构造函数和原型,原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(10)-Vue中的组件(1)</title>
      <link href="/2022/08/12/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010/"/>
      <url>/2022/08/12/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中的组件"><a href="#Vue中的组件" class="headerlink" title="Vue中的组件"></a>Vue中的组件</h1><h2 id="1-什么是组件"><a href="#1-什么是组件" class="headerlink" title="1.什么是组件?"></a>1.什么是组件?</h2><ul><li><strong>组件的理解: 用来实现局部(特定)功能效果的代码集合(html&#x2F;css&#x2F;js&#x2F;image…..)</strong></li></ul><h3 id="下面用两张图片来对比传统编码和组件编码"><a href="#下面用两张图片来对比传统编码和组件编码" class="headerlink" title="下面用两张图片来对比传统编码和组件编码"></a><strong>下面用两张图片来对比传统编码和组件编码</strong></h3><p><img src="/../upload/Vue/V10/1.png" alt="image"><br><img src="/../upload/Vue/V10/2.png" alt="image"></p><h2 id="2-Vue中组件分为非单文件组件和单文件组件"><a href="#2-Vue中组件分为非单文件组件和单文件组件" class="headerlink" title="2.Vue中组件分为非单文件组件和单文件组件"></a>2.Vue中组件分为非单文件组件和单文件组件</h2><ul><li><strong>1.非单文件组件(一般不常用)：</strong><ul><li><strong>1.模板编写没有提示</strong></li><li><strong>2.没有构建过程, 无法将ES6 转换成ES5</strong></li><li><strong>3.不支持组件的CSS</strong></li><li><strong>4.真正开发中几乎不用</strong></li></ul></li><li><strong>2.单文件组件：</strong><ul><li><p><strong>1. 模板页面</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt; </span><br><span class="line">页面模板</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>2. JS 模块对象</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> &#123;&#125;&#125;, </span><br><span class="line">    <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">components</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>3. 样式</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style&gt; </span><br><span class="line">样式定义</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="3-Vue中组件的基本使用（展示非单文件组件，用于学习）"><a href="#3-Vue中组件的基本使用（展示非单文件组件，用于学习）" class="headerlink" title="3.Vue中组件的基本使用（展示非单文件组件，用于学习）"></a>3.Vue中组件的基本使用（展示非单文件组件，用于学习）</h1><h2 id="1-Vue中使用组件的三大步骤："><a href="#1-Vue中使用组件的三大步骤：" class="headerlink" title="1.Vue中使用组件的三大步骤："></a>1.Vue中使用组件的三大步骤：</h2><ul><li><strong>一、定义组件(创建组件)</strong></li><li><strong>二、注册组件</strong></li><li><strong>三、使用组件(写组件标签)</strong><ul><li><strong>一、如何定义一个组件？</strong><ul><li><strong>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；</strong><ul><li><strong>区别如下：</strong><ul><li><strong>1.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</strong></li><li><strong>2.data必须写成函数形式，为什么？ ———— 避免组件被复用时，数据存在引用关系。</strong></li></ul></li><li><strong>备注：使用template可以配置组件结构。</strong></li></ul></li></ul></li><li><strong>二、如何注册组件？</strong><ul><li><strong>1.局部注册：靠new Vue的时候传入components选项</strong></li><li><strong>2.全局注册：靠Vue.component(‘组件名’,组件)</strong></li></ul></li><li><strong>三、编写组件标签：</strong>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;组件名&gt;&lt;/组件名&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如:组件名为:school --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好!&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 步骤三:使用组件标签调用组件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 学校信息(组件) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 学生信息(组件) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student1</span>&gt;</span><span class="tag">&lt;/<span class="name">student1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 全局组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hi</span>&gt;</span><span class="tag">&lt;/<span class="name">hi</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册全局组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.先正常创建组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> hi = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;h2&gt;这是一个&#123;&#123;name&#125;&#125;&lt;/h2&gt;    </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    name : <span class="string">&#x27;全局组件&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用组件步骤一:创建组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建学校组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 给组件添加html片段(结构)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 可以给组件添加交互(后面的点击事件)</span></span></span><br><span class="line"><span class="language-javascript">        template : <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div class=&quot;demo&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;  </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// el:&#x27;#root&#x27;, //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 数据存放与vm基本一致,methods,computed等也是如此            </span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                name : <span class="string">&#x27;五邑大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                address : <span class="string">&#x27;江门&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用组件步骤一:创建组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建学生组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;    </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                name : <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                age : <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实例化Vue</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                name : <span class="string">&#x27;Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 步骤二:注册组件(局部注册)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 完整写法:(组件名 : 你在外面声明的组件名)</span></span></span><br><span class="line"><span class="language-javascript">            school : school,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 简写形式(同名的话)</span></span></span><br><span class="line"><span class="language-javascript">            student,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这里调用同一个组件(student)完成复用,但是两个组件之间并不相互影响</span></span></span><br><span class="line"><span class="language-javascript">            student1 : student,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 全局组件的调用</span></span></span><br><span class="line"><span class="language-javascript">            hi</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V10/3.png" alt="image"></p><h2 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2.注意事项:"></a>2.注意事项:</h2><ul><li><strong>1.关于组件名:</strong><ul><li><strong>一个单词组成：</strong><ul><li><strong>第一种写法(首字母小写)：school</strong></li><li><strong>第二种写法(首字母大写)：School</strong></li></ul></li><li><strong>多个单词组成：</strong><ul><li><strong>第一种写法(kebab-case命名)：my-school</strong></li><li><strong>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</strong></li></ul></li><li><strong>备注：</strong><ul><li><strong>(1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</strong></li><li><strong>(2).可以使用name配置项指定组件在开发者工具中呈现的名字。</strong></li></ul></li></ul></li><li><strong>2.关于组件标签:</strong><ul><li><strong>第一种写法：<school></school></strong></li><li><strong>第二种写法：<school/></strong></li><li><strong>备注：不用使用脚手架时，<school/>会导致后续组件不能渲染。</strong></li></ul></li><li><strong>3.一个简写方式：</strong><ul><li><strong>const school &#x3D; Vue.extend(options) 可简写为：const school &#x3D; options</strong></li></ul></li></ul><h2 id="3-定义组件的简写形式以及组件名称属性的设置："><a href="#3-定义组件的简写形式以及组件名称属性的设置：" class="headerlink" title="3.定义组件的简写形式以及组件名称属性的设置："></a>3.定义组件的简写形式以及组件名称属性的设置：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义组件(简写形式)</span></span><br><span class="line"><span class="keyword">const</span> s = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;wyu&#x27;</span>,<span class="comment">//给组件设置一个名字,会在Vue开发者工具中显示</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;  </span></span><br><span class="line"><span class="string">            &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;   </span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&#x27;江门&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果展示-1"><a href="#运行结果展示-1" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V10/4.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> Vue中的组件 </tag>
            
            <tag> 非单文件组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(9)-Vue中的生命周期</title>
      <link href="/2022/08/11/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/"/>
      <url>/2022/08/11/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中的生命周期"><a href="#Vue中的生命周期" class="headerlink" title="Vue中的生命周期"></a>Vue中的生命周期</h1><ul><li><strong>什么是生命周期?</strong></li><li><strong>这里我们用一个类比来引出生命周期:</strong></li></ul><h2 id="1-类比如下"><a href="#1-类比如下" class="headerlink" title="1.类比如下:"></a>1.类比如下:</h2><ul><li><strong>1. 人的一生(生命周期)</strong><table><thead><tr><th>时期</th><th>做的事情</th></tr></thead><tbody><tr><td>婴儿将要出生</td><td>做好接生准备</td></tr><tr><td>婴儿出生了(重要时刻)</td><td>做身体检测,打疫苗,摆满月酒</td></tr><tr><td>婴儿会说话了</td><td>叫爸爸,叫妈妈,会用语言沟通</td></tr><tr><td>婴儿会走路了</td><td>可以进行自主的移动,可以去玩耍了</td></tr><tr><td>………</td><td>…….</td></tr><tr><td>………</td><td>…….</td></tr><tr><td>将要死亡了(重要时刻)</td><td>男</td></tr><tr><td>已经死亡了</td><td>生命周期结束</td></tr></tbody></table></li></ul><h3 id="由此可见-一般来讲生命周期这个概念就是相当于在什么时期-做什么事-特定的时期做特定的事"><a href="#由此可见-一般来讲生命周期这个概念就是相当于在什么时期-做什么事-特定的时期做特定的事" class="headerlink" title="由此可见,一般来讲生命周期这个概念就是相当于在什么时期,做什么事(特定的时期做特定的事)"></a>由此可见,一般来讲生命周期这个概念就是相当于在什么时期,做什么事(特定的时期做特定的事)</h3><ul><li><strong>2. Vue的生命周期(就相当于vm的一生,在特定的时候调用特定的函数)</strong><table><thead><tr><th>运行时期</th><th>要运行的函数</th></tr></thead><tbody><tr><td>将要创建</td><td>调用beforeCreate()函数</td></tr><tr><td>创建完毕</td><td>调用created()函数</td></tr><tr><td>将要挂载</td><td>调用beforeMount()函数</td></tr><tr><td>挂载完毕(重要时刻)</td><td>调用mounted()函数 &#x3D;&#x3D;&#x3D;&#x3D;&gt; [重要的钩子函数]</td></tr><tr><td>将要更新</td><td>调用beforeUpdate()函数</td></tr><tr><td>更新完毕</td><td>调用updated()函数</td></tr><tr><td>将要销毁</td><td>调用beforeDestory()函数 &#x3D;&#x3D;&#x3D;&#x3D;&gt; [重要钩子]</td></tr><tr><td>销毁完毕</td><td>调用destoryed()函数</td></tr></tbody></table></li></ul><h2 id="2-生命周期的概念"><a href="#2-生命周期的概念" class="headerlink" title="2.生命周期的概念:"></a>2.生命周期的概念:</h2><ul><li><strong>Vue的生命周期就是vue实例从创建到销毁的全过程，也就是new Vue() 开始就是vue生命周期的开始。Vue 实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载Dom -&gt; 渲染、更新 -&gt; 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。钩子函数是Vue生命周期中每个阶段对外开放让程序员操作Vue的接口。Vue有8个钩子函数。</strong><ul><li><strong>特性:</strong><ul><li><strong>1.又名：生命周期回调函数、生命周期函数、生命周期钩子。</strong></li><li><strong>2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</strong></li><li><strong>3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</strong></li><li><strong>4.生命周期函数中的this指向是vm 或 组件实例对象。</strong></li></ul></li></ul></li></ul><h2 id="3-生命周期图解"><a href="#3-生命周期图解" class="headerlink" title="3.生命周期图解:"></a>3.生命周期图解:</h2><p><img src="/../upload/Vue/V9/1.png" alt="image"></p><h2 id="4-生命周期函数解析"><a href="#4-生命周期函数解析" class="headerlink" title="4.生命周期函数解析:"></a>4.生命周期函数解析:</h2><h3 id="1-beforeCreate-创建前"><a href="#1-beforeCreate-创建前" class="headerlink" title="1.beforeCreate( 创建前 )"></a><strong>1.beforeCreate( 创建前 )</strong></h3><ul><li><strong>这个时候，在实例被完成创建出来，el和data都没有初始化，不能访问data、method，一般在这个阶段不进行操作。</strong></li></ul><h3 id="2-created-创建后"><a href="#2-created-创建后" class="headerlink" title="2.created( 创建后 )"></a><strong>2.created( 创建后 )</strong></h3><ul><li><strong>这个时候，vue实例中的data、method已被初始化，属性也被绑定，但是此时还是虚拟dom，真是dom还没生成，$el 还不可用。这个时候可以调用data和method的数据及方法，createf钩子函数是最早可以调用data和method的，故一般在此对数据进行初始化。</strong></li></ul><h3 id="3-beforeMount-挂载前"><a href="#3-beforeMount-挂载前" class="headerlink" title="3.beforeMount( 挂载前)"></a><strong>3.beforeMount( 挂载前)</strong></h3><ul><li><strong>此时模板已经编辑完成，但还没有被渲染至页面中（即为虚拟dom加载为真实dom），此时el存在则会显示el。在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取。</strong></li></ul><h3 id="4-mounted-挂载后-重要节点"><a href="#4-mounted-挂载后-重要节点" class="headerlink" title="4.mounted( 挂载后)(重要节点)"></a><strong>4.mounted( 挂载后)(重要节点)</strong></h3><ul><li><strong>此时模板已经被渲染成真实DOM，用户已经可以看到渲染完成的页面，页面的数据也是通过双向绑定显示data中的数据。 这实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的躺在我们的内存中，一动不动。</strong></li></ul><h3 id="5-beforeUpdate-更新前"><a href="#5-beforeUpdate-更新前" class="headerlink" title="5.beforeUpdate(更新前)"></a><strong>5.beforeUpdate(更新前)</strong></h3><ul><li><strong>更新前状态（view层的数据变化前，不是data中的数据改变前），重新渲染之前触发，然后vue的虚拟dom机制会重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比之后重新渲染。只有view上面的数据变化才会触发beforeUpdate和updated，仅属于data中的数据改变是并不能触发。</strong></li></ul><h3 id="6-updated-挂载后"><a href="#6-updated-挂载后" class="headerlink" title="6.updated(挂载后)"></a><strong>6.updated(挂载后)</strong></h3><ul><li><strong>数据已经更改完成，dom也重新render完成。</strong></li></ul><h3 id="7-beforeDestroy-销毁前-重要节点"><a href="#7-beforeDestroy-销毁前-重要节点" class="headerlink" title="7.beforeDestroy(销毁前)(重要节点)"></a><strong>7.beforeDestroy(销毁前)(重要节点)</strong></h3><ul><li><strong>销毁前执行（$destroy方法被调用的时候就会执行）,一般在这里善后:清除计时器、清除非指令绑定的事件等等…’)</strong></li></ul><h3 id="8-destroyed-销毁后"><a href="#8-destroyed-销毁后" class="headerlink" title="8.destroyed(销毁后)"></a><strong>8.destroyed(销毁后)</strong></h3><ul><li><strong>销毁后 （Dom元素存在，只是不再受vue控制）,卸载watcher，事件监听，子组件。</strong></li></ul><h2 id="5-代码解析"><a href="#5-代码解析" class="headerlink" title="5.代码解析:"></a>5.代码解析:</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span> <span class="attr">:x</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;bye&quot;</span>&gt;</span>点我销毁vm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// template:`</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;div&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// `,</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">n</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">bye</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bye&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.$destroy()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">n</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;n变了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1.执行初始化前beforeCreate 这个生命周期的钩子函数无法进行如何的操作，在当前阶段data、methods、computed以及watch上的数据和方法都不能被访问。可以理解为只是走一个流程</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate()函数执行了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2.created():这个时候，vue实例中的data、method已被初始化，属性也被绑定，但是此时还是虚拟dom，真实dom还没生成，$el 还不可用。这个时候可以调用data和method的数据及方法，created钩子函数是最早可以调用data和method的，故一般在此对数据进行初始化。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created()函数执行了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//3.beforeMount():此时模板已经编辑完成，但还没有被渲染至页面中（即为虚拟dom加载为真实dom），此时el存在则会显示el。在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount()函数执行了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//4.mounted():此时模板已经被渲染成真实DOM，用户已经可以看到渲染完成的页面，页面的数据也是通过双向绑定显示data中的数据。 这实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的躺在我们的内存中，一动不动。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted()函数执行了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 5.beforeUpdate():更新前状态（view层的数据变化前，不是data中的数据改变前），重新渲染之前触发，然后vue的虚拟dom机制会重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比之后重新渲染。只有view上面的数据变化才会触发beforeUpdate和updated，仅属于data中的数据改变是并不能触发。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate()函数执行了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 6.updated():数据已经更改完成，dom也重新render(渲染)完成。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated()函数执行了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 7.beforeDestroy():销毁前执行（$destroy方法被调用的时候就会执行）,一般在这里善后:清除计时器、清除非指令绑定的事件等等…’)</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy()函数执行了&#x27;</span>,<span class="string">&#x27;删除了定时器,取消了绑定事件以及监听器&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 8.destroyed():销毁后 （Dom元素存在，只是不再受vue控制）,卸载watcher，事件监听，子组件。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed()函数执行了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V9/2.png" alt="image"><br><img src="/../upload/Vue/V9/3.png" alt="image"><br><img src="/../upload/Vue/V9/4.png" alt="image"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><ul><li><strong>常用的生命周期钩子函数：</strong><ul><li><strong>1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</strong></li><li><strong>2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</strong></li></ul></li><li><strong>关于销毁Vue实例</strong><ul><li><strong>1.销毁后借助Vue开发者工具看不到任何信息。</strong></li><li><strong>2.销毁后自定义事件会失效，但原生DOM事件依然有效。</strong></li><li><strong>3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</strong></li></ul></li></ul><h3 id="这里用一个例子来总结"><a href="#这里用一个例子来总结" class="headerlink" title="这里用一个例子来总结"></a>这里用一个例子来总结</h3><ul><li><strong>(要求标题:欢迎学习Vue,改标题随时间变化透明度也均匀变化,点击停止按钮销毁Vue实例对象)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎学习Vue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;opacity = 1&quot;</span>&gt;</span>透明度设置为1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;stop&quot;</span>&gt;</span>点我停止变换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">opacity</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">stop</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$destroy()</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>,<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 给Vue设置一个定时器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setInterval&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">16</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 消除定时器需要写在 beforeDestroy()函数中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vm即将驾鹤西游了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V9/5.png" alt="image"></p><blockquote><p>这篇博客引用了作者为”<strong>小小前端程序员</strong>“的文章<br>原文链接为:<a href="https://blog.csdn.net/weixin_45791692/article/details/124045505">CSDN</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> Vue中的生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(8)-Vue中的内置指令和自定义指令</title>
      <link href="/2022/08/11/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/"/>
      <url>/2022/08/11/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue中的内置指令"><a href="#1-Vue中的内置指令" class="headerlink" title="1.Vue中的内置指令"></a>1.Vue中的内置指令</h1><ol><li><strong>我们之前学过的指令：</strong><ol><li><strong>v-bind  : 单向绑定解析表达式, 可简写为 :xxx</strong></li><li><strong>v-model : 双向数据绑定</strong></li><li><strong>v-for   : 遍历数组&#x2F;对象&#x2F;字符串</strong></li><li><strong>v-on    : 绑定事件监听, 可简写为@</strong></li><li><strong>v-if    : 条件渲染（动态控制节点是否存存在）</strong></li><li><strong>v-else  : 条件渲染（动态控制节点是否存存在）</strong></li><li><strong>v-show  : 条件渲染 (动态控制节点是否展示)</strong></li></ol></li><li><strong>Vue中另外的内置指令:</strong><ol><li><strong>v-text指令：</strong></li></ol><ul><li><strong>1.作用：向其所在的节点中渲染文本内容。</strong></li><li><strong>2.与插值语法的区别：v-text会替换掉节点中的内容，则不会</strong></li></ul><ol start="2"><li><strong>v-html指令：</strong></li></ol><ul><li><strong>1.作用：向指定节点中渲染包含html结构的内容。</strong> </li><li><strong>2.与插值语法的区别：</strong><ul><li><strong>(1).v-html会替换掉节点中所有的内容，则不会。</strong></li><li><strong>(2).v-html可以识别html结构</strong></li></ul></li><li><strong>3.严重注意：v-html有安全性问题！！！！</strong> <ul><li><strong>(1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击</strong></li><li><strong>(2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上</strong></li></ul></li></ul><ol start="3"><li><strong>v-cloak指令（没有值）：</strong><ul><li><strong>1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</strong> </li><li><strong>2.使用css配合v-cloak可以解决网速慢时页面展示出的问题。</strong></li></ul></li><li><strong>v-once指令：（没有值）</strong> <ul><li><strong>1.v-once所在节点在初次动态渲染后，就视为静态内容了。</strong> </li><li><strong>2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</strong></li></ul></li><li><strong>v-pre指令：（没有值）</strong> <ul><li><strong>1.跳过其所在节点的编译过程。</strong> </li><li><strong>2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</strong></li></ul></li></ol></li></ol><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="1-v-text代码解析："><a href="#1-v-text代码解析：" class="headerlink" title="1.v-text代码解析："></a>1.v-text代码解析：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V8/1.png" alt="image"></p><h3 id="2-v-html代码解析："><a href="#2-v-html代码解析：" class="headerlink" title="2.v-html代码解析："></a>2.v-html代码解析：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">str2</span>:<span class="string">&#x27;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示-1"><a href="#运行结果展示-1" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V8/2.png" alt="image"></p><h3 id="3-v-cloak代码解析-一般配合样式使用，避免网页响应慢导致标签先行展示"><a href="#3-v-cloak代码解析-一般配合样式使用，避免网页响应慢导致标签先行展示" class="headerlink" title="3.v-cloak代码解析:(一般配合样式使用，避免网页响应慢导致标签先行展示)"></a>3.v-cloak代码解析:(一般配合样式使用，避免网页响应慢导致标签先行展示)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="comment">/* 属性选择器 */</span></span></span><br><span class="line"><span class="language-css">   <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 在这添加 v-cloak 配合样式的属性选择器来使用 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染完成,v-cloak会自动消失 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/resource/5s/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-v-once代码解析："><a href="#4-v-once代码解析：" class="headerlink" title="4.v-once代码解析："></a>4.v-once代码解析：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>初始化的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示-2"><a href="#运行结果展示-2" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V8/3.png" alt="image"></p><h3 id="5-v-pre代码解析："><a href="#5-v-pre代码解析：" class="headerlink" title="5.v-pre代码解析："></a>5.v-pre代码解析：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>Vue其实很简单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示-3"><a href="#运行结果展示-3" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V8/4.png" alt="image"></p><h1 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2.自定义指令"></a>2.自定义指令</h1><ul><li><strong>一、定义语法：</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">(1).局部指令：</span><br><span class="line">函数式(简写)</span><br><span class="line">new Vue   (&#123;</span><br><span class="line">    directives&#123;指令名:回调函数&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">对象式(完整写法)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    directives:&#123;指令名:配置对象&#125;      </span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">(2).全局指令：(与过滤器的定义基本一致)</span><br><span class="line">Vue.directive(指令名,配置对象) 或   Vue.directive(指令名,回调函数)</span><br></pre></td></tr></table></figure></li><li><strong>二、配置对象中常用的3个回调：</strong><ul><li><strong>(1).bind：指令与元素成功绑定时调用。</strong></li><li><strong>(2).inserted：指令所在元素被插入页面时调用。</strong></li><li><strong>(3).update：指令所在模板结构被重新解析时调用。</strong></li></ul></li><li><strong>三、备注：</strong><ul><li><strong>1.指令定义时不加v-，但使用时要加v-；</strong></li><li><strong>2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名</strong></li></ul></li></ul><h2 id="代码解析-1"><a href="#代码解析-1" class="headerlink" title="代码解析:"></a>代码解析:</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;h2&gt;放大10倍后的n值是：&lt;span v-big-number=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义全局指令(与过滤器基本一致)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue.directive(&#x27;fbind&#x27;,&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     //1.指令与元素成功绑定时执行（一上来）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     bind(element , binding)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         element.value = binding.value</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     //2.指令所在元素被插入页面时执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     inserted(element , binding)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         element.focus()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     //3.指令所在的模板被重新解析时(一般内容与bind()保持一致)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     update(element , binding)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         element.value = binding.value</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 函数式(简写):实现要求1,对n进行10倍放大</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">big</span>(<span class="params">element , binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(element);//目标元素标签 这里是&lt;span&gt;&lt;/span&gt;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(binding);//指向big自己的方法对象,其中的value重要</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 对象式(完整写法):实现要求2,刷新时默认获取焦点(要求时间节点比较严格)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 对象式的完整写法一般包含三个常用的函数:(必须要求有)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1.指令与元素成功绑定时执行（一上来）</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">bind</span>(<span class="params">element , binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//2.指令所在元素被插入页面时执行(第一次渲染到页面上时)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">inserted</span>(<span class="params">element , binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//3.指令所在的模板被重新解析时(一般内容与bind()保持一致)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">update</span>(<span class="params">element , binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V8/5.png" alt="image"></p><h2 id="深度解析"><a href="#深度解析" class="headerlink" title="深度解析:"></a>深度解析:</h2><ul><li><strong>(为什么实现光标默认选中需要用完整写法的自定义指令(directives))</strong></li><li><strong>首先我们知道,使用Vue将代码渲染到页面上是要经过模板解析的过程的,也就是说我们写的每一段代码都不是直接渲染到页面上的,从光标默认选中的角度看,输入框要现先创建出来,才能光标选中对吧!也就是说输入框没有创建出来,光标默认选中是不奏效的,没有输入框怎么会有光标闪烁呢?这时我们在看简写形式,函数式的简写形式它是在两种情况下生效(执行)的,1.指令与元素成功绑定时(一上来就调用一次),2.指令所在的模板重新解析时,这两个情况都不可能让光标产生默认选中(第一次渲染到页面上时),我们在看看完整的写法(对象式),对象式里面有一个inserted()函数就是指令所在元素被插入页面时执行的,也就是我们所说的第一次渲染到页面上时执行的,由此可见,函数式(简写形式)相当于没有了inserted()函数的完整形式(对象式).</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 内置指令 </tag>
            
            <tag> 自定义指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(7)-Vue中表单数据的收集与过滤器</title>
      <link href="/2022/08/08/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/"/>
      <url>/2022/08/08/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue中表单数据的收集"><a href="#1-Vue中表单数据的收集" class="headerlink" title="1.Vue中表单数据的收集"></a>1.Vue中表单数据的收集</h1><ol><li><p><strong>若：&lt;input type&#x3D;”text”&#x2F;&gt;，则v-model收集的是value值，用户输入的就是value值。</strong></p></li><li><p><strong>若：&lt;input type&#x3D;”radio”&#x2F;&gt;，则v-model收集的是value值，且要给标签配置value值。</strong></p></li><li><p><strong>若：&lt;input type&#x3D;”checkbox”&#x2F;&gt;</strong></p><ol><li><strong>没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</strong></li><li><strong>配置input的value属性:</strong><ul><li><strong>(1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</strong> </li><li><strong>(2)v-model的初始值是数组，那么收集的的就是value组成的数组</strong></li></ul></li></ol></li><li><p><strong>备注：v-model的三个修饰符：</strong></p><ul><li><strong>lazy：失去焦点再收集数据</strong></li><li><strong>number：输入字符串转为有效的数字</strong> </li><li><strong>trim：输入首尾空格过滤</strong></li></ul></li></ol><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- .prevent阻止默认事件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="comment">&lt;!-- 这里的修饰符.trim是用于消除空格输入(只能是两边的,不能是字符串内部的) --&gt;</span></span><br><span class="line">      账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.account&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里的修饰符.number用于限制只能收集数字,不能收集字符 --&gt;</span></span><br><span class="line">      年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      性别：</span><br><span class="line">      男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">      女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      爱好：</span><br><span class="line">      抽烟<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">      喝酒<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">      烫头<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      所属校区</span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      其他信息：</span><br><span class="line">      <span class="comment">&lt;!-- 这里的修饰符.lazy是控制当光标移除指示框时收集数据 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">userInfo</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">account</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">hobby</span>:[],</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">city</span>:<span class="string">&#x27;beijing&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">other</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">agree</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="title function_">alert</span>(<span class="string">&#x27;数据已提交!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">               <span class="comment">// 前端一般将数据转成json格式在发送给后端</span></span></span><br><span class="line"><span class="language-javascript">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>))</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V7/1.png" alt="image"></p><h1 id="2-过滤器"><a href="#2-过滤器" class="headerlink" title="2.过滤器"></a>2.过滤器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">定义: 对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</span><br><span class="line">语法：</span><br><span class="line">  1.注册过滤器：Vue.filter(name,callback) (全局) 或 new Vue&#123;filters:&#123;&#125;&#125; (局部)</span><br><span class="line">  2.使用过滤器：&#123;&#123; xxx | 过滤器名&#125;&#125; (插值语法:非常常见) 或  vbind:属性 = &quot;xxx | 过滤器名&quot; (单向数据绑定,比较少见,不能用在双向数据绑定)</span><br><span class="line">备注:</span><br><span class="line">  1.过滤器也可以接收额外参数、多个过滤器也可以串联</span><br><span class="line">  2.并没有改变原本的数据, 是产生新的对应的数据</span><br></pre></td></tr></table></figure><h3 id="代码解析-1"><a href="#代码解析-1" class="headerlink" title="代码解析"></a>代码解析</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>计算属性实现=&gt;现在是：&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- methods实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>方法实现=&gt;现在是：&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器实现 (方法后面不加括号也是可以执行的)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>过滤器实现=&gt;现在是：&#123;&#123;time | timeFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器实现（传参） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:x</span>=<span class="string">&quot;msg | mySlice&quot;</span>&gt;</span>五邑大学<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 新建一个Vue实例对象用于对比全局过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">time</span>:<span class="number">1621561377603</span>, <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&#x27;你好，五邑大学&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getFmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// ES6新语法:形参后面赋值,如果没有该形参传入,按形参后的赋值传入,若有该形参传入,则按该形参传入</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">timeFormater</span>(<span class="params">value,str=<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(&#x27;@&#x27;,value)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&#x27;hello,wyu!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示-1"><a href="#运行结果展示-1" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V6/2.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 表单数据的收集 </tag>
            
            <tag> 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(6)-数据监测的原理(2):Vue中数据监测的原理</title>
      <link href="/2022/08/08/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/"/>
      <url>/2022/08/08/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中数据监测的原理"><a href="#Vue中数据监测的原理" class="headerlink" title="Vue中数据监测的原理"></a>Vue中数据监测的原理</h1><ul><li><strong>1. vue会监视data中所有层次的数据</strong></li><li><strong>2. 如何监测对象中的数据？</strong><ul><li><strong>通过setter实现监视，且要在new Vue时就传入要监测的数据。</strong><ul><li><strong>(1).对象中后追加的属性，Vue默认不做响应式处理</strong></li><li><strong>(2).如需给后添加的属性做响应式，请使用如下API：</strong><ul><li><strong>Vue.set(target，propertyName&#x2F;index，value) 或 vm.$set(target，propertyName&#x2F;index，value)</strong></li></ul></li></ul></li></ul></li><li><strong>3. 如何监测数组中的数据？</strong><ul><li><strong>通过包裹数组更新元素的方法实现，本质就是做了两件事：</strong><ul><li><strong>(1).调用原生对应的方法对数组进行更新。</strong></li><li><strong>(2).重新解析模板，进而更新页面。</strong></li></ul></li></ul></li><li><strong>4.在Vue修改数组中的某个元素一定要用如下方法：</strong><ul><li><strong>1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</strong></li><li><strong>2.Vue.set() 或 vm.$set()</strong></li></ul></li><li><strong>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</strong></li></ul><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.age++&quot;</span>&gt;</span>年龄+1岁<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.sex = &#x27;未知&#x27; &quot;</span>&gt;</span>修改性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFirstFriendName&quot;</span>&gt;</span>修改第一个朋友的名字为：马保国<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为：开车<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeDrink&quot;</span>&gt;</span>过滤掉爱好中的喝酒<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄：&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;h&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>朋友们：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">friends</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addSex</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addFriend</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>.<span class="title function_">unshift</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">70</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateFirstFriendName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;马保国&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&#x27;按摩&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue.set(this.student.hobby,0,&#x27;开车&#x27;)//数据代理</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>,<span class="number">0</span>,<span class="string">&#x27;开车&#x27;</span>)<span class="comment">//数据代理</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">removeDrink</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span> = <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">h</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> h !== <span class="string">&#x27;喝酒&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示:"></a>运行结果展示:</h3><p><img src="/../upload/Vue/V6/1.png" alt="image"><br><img src="/../upload/Vue/V6/2.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 数据监测的原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(5)-前置知识复习Object.keys()和数组的常用方法</title>
      <link href="/2022/08/08/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/"/>
      <url>/2022/08/08/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</url>
      
        <content type="html"><![CDATA[<h1 id="1-复习知识：Object-keys（）的详解和用法"><a href="#1-复习知识：Object-keys（）的详解和用法" class="headerlink" title="1.复习知识：Object.keys（）的详解和用法"></a>1.复习知识：Object.keys（）的详解和用法</h1><h2 id="Object-keys-obj"><a href="#Object-keys-obj" class="headerlink" title="Object.keys(obj)"></a>Object.keys(obj)</h2><ul><li><strong>参数：要返回其枚举自身属性的对象</strong></li><li><strong>返回值：一个表示给定对象的所有可枚举属性的字符串数组</strong></li><li><strong>其实就是在里面传进一个对象，返回一个数组（数组里面是对象的键名（属性名））</strong></li></ul><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理对象，返回可枚举的属性数组</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;马保国&quot;</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="attr">address</span>:<span class="string">&quot;江门&quot;</span>,<span class="attr">getName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(person) <span class="comment">// [&quot;name&quot;, &quot;age&quot;, &quot;address&quot;,&quot;getName&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理数组，返回索引值数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(arr) <span class="comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理字符串，返回索引值数组</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;12345字符串&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(str) <span class="comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展:"></a>拓展:</h3><ul><li><strong>Object.values()和Object.keys()是相反的操作，把一个对象的键值(属性值或方法)转换为数组</strong></li><li><strong>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的键值。</strong></li><li><strong>Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的键值对数组。</strong></li></ul><h1 id="2-复习知识：数组常用的方法"><a href="#2-复习知识：数组常用的方法" class="headerlink" title="2.复习知识：数组常用的方法"></a>2.复习知识：数组常用的方法</h1><ul><li><strong>1. Array.push()，向数组的末尾添加一个或多个元素，并返回新的数组长度。原数组改变。</strong><br><img src="/../upload/Vue/V5/1.png" alt="image"></li><li><strong>2. Array.pop()，删除并返回数组的最后一个元素，若该数组为空，则返回undefined。原数组改变。</strong><br><img src="/../upload/Vue/V5/2.png" alt="image"></li><li><strong>3. Array.unshift()，向数组的开头添加一个或多个元素，并返回新的数组长度。原数组改变。</strong><br><img src="/../upload/Vue/V5/3.png" alt="image"></li><li><strong>4. Array.shift()，删除数组的第一项，并返回第一个元素的值。若该数组为空，则返回undefined。原数组改变。</strong><br><img src="/../upload/Vue/V5/4.png" alt="image"></li><li><strong>5. Array.concat(arr1,arr2…)，合并两个或多个数组，生成一个新的数组。原数组不变。</strong><br><img src="/../upload/Vue/V5/5.png" alt="image"></li><li><strong>6. Array.join()，将数组的每一项用指定字符连接形成一个字符串。默认连接字符为 “,” 逗号。</strong><br><img src="/../upload/Vue/V5/6.png" alt="image"></li><li><strong>7. Array.reverse()，将数组倒序。原数组改变。</strong><br><img src="/../upload/Vue/V5/7.png" alt="image"></li><li><strong>8. Array.sort()，对数组元素进行排序。按照字符串UniCode码排序，原数组改变。</strong><ul><li><strong>(1)从小到大</strong><br><img src="/../upload/Vue/V5/8.png" alt="image"></li><li><strong>(2)从大到小</strong><br><img src="/../upload/Vue/V5/9.png" alt="image"></li><li><strong>(3)按照数组对象中的某个值进行排序</strong><br><img src="/../upload/Vue/V5/10.png" alt="image"></li></ul></li><li><strong>9. Array.map(function)，原数组的每一项执行函数后，返回一个新的数组。原数组不变。（注意该方法和forEach的区别）。</strong></li><li><strong>10. Array.slice() 按照条件查找出其中的部分内容</strong><ul><li><strong>参数：</strong><ul><li><strong>array.slice(n, m)，从索引n开始查找到m处（不包含m）</strong></li><li><strong>array.slice(n) 第二个参数省略，则一直查找到末尾</strong></li><li><strong>array.slice(0)原样输出内容，可以实现数组克隆</strong></li><li><strong>array.slice(-n,-m) slice支持负参数，从最后一项开始算起，-1为最后一项，-2为倒数第二项</strong></li></ul></li><li><strong>返回值：返回一个新数组</strong></li><li><strong>是否改变原数组：不改变</strong></li></ul></li><li><strong>11. Array.splice(index,howmany,arr1,arr2…) ，用于添加或删除数组中的元素。从index位置开始删除howmany个元素，并将arr1、arr2…数据从index位置依次插入。howmany为0时，则不删除元素。原数组改变。</strong><br><img src="/../upload/Vue/V5/11.png" alt="image"></li><li><strong>12. Array.forEach(function)，用于调用数组的每个元素，并将元素传递给回调函数。原数组不变。（注意该方法和map的区别，若直接打印Array.forEach，结果为undefined）。</strong></li><li><strong>13. Array.filter(function)，过滤数组中，符合条件的元素并返回一个新的数组。</strong><br><img src="/../upload/Vue/V5/12.png" alt="image"></li><li><strong>14. Array.every(function)，对数组中的每一项进行判断，若都符合则返回true，否则返回false。</strong></li><li><strong>15. Array.some(function)，对数组中的每一项进行判断，若都不符合则返回false，否则返回true。</strong></li><li><strong>16. Array.reduce(function)，reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</strong><br><img src="/../upload/Vue/V5/13.png" alt="image"></li><li><strong>17.　indexOf() : 检测当前值在数组中第一次出现的位置索引</strong><ul><li><strong>参数：array.indexOf(item,start) item:查找的元素 start:字符串中开始检索的位置。</strong></li><li><strong>返回值：第一次查到的索引，未找到返回-1。是否改变原数组：不改变。</strong></li></ul></li><li><strong>18. includes() : 判断一个数组是否包含一个指定的值</strong><ul><li><strong>参数：指定的内容</strong></li><li><strong>返回值：布尔值</strong></li><li><strong>是否改变原数组：不改变。</strong></li></ul></li></ul><h2 id="原数组改变的方法有："><a href="#原数组改变的方法有：" class="headerlink" title="原数组改变的方法有："></a>原数组改变的方法有：</h2><ul><li><strong>push 、pop 、shift 、unshift 、reverse 、sort 、splice</strong></li></ul><h2 id="不改变原数组的方法有："><a href="#不改变原数组的方法有：" class="headerlink" title="不改变原数组的方法有："></a>不改变原数组的方法有：</h2><ul><li><strong>concat 、map 、filter 、join 、every 、some 、indexOf 、slice 、forEach</strong></li></ul><h1 id="常用的数组方法："><a href="#常用的数组方法：" class="headerlink" title="常用的数组方法："></a>常用的数组方法：</h1><table><thead><tr><th>方法名</th><th>使用方法及属性</th></tr></thead><tbody><tr><td>push()</td><td>向数组的末尾添加一个或多个元素，并返回新的数组长度。原数组改变。</td></tr><tr><td>pop()</td><td>删除并返回数组的最后一个元素，若该数组为空，则返回undefined。原数组改变。</td></tr><tr><td>unshift()</td><td>向数组的开头添加一个或多个元素，并返回新的数组长度。原数组改变。</td></tr><tr><td>shift()</td><td>删除数组的第一项，并返回第一个元素的值。若该数组为空，则返回undefined。原数组改变。</td></tr><tr><td>sort()</td><td>对数组元素进行排序。按照字符串UniCode码排序，原数组改变。</td></tr><tr><td>splice()</td><td>从index位置开始删除howmany个元素，并将arr1、arr2…数据从index位置依次插入。howmany为0时，则不删除元素。原数组改变。</td></tr><tr><td>slice()</td><td>按照条件查找出其中的部分内容用于添加或删除数组中的元素。</td></tr><tr><td>indexOf()</td><td>检测当前值在数组中第一次出现的位置索引,不改变原数组</td></tr><tr><td>reverse()</td><td>将数组倒序。原数组改变。</td></tr><tr><td>forEach()</td><td>用于调用数组的每个元素，并将元素传递给回调函数。原数组不变。（注意该方法和map的区别，若直接打印Array.forEach，结果为undefined）。</td></tr><tr><td>filter()</td><td>过滤数组中，符合条件的元素并返回一个新的数组。</td></tr></tbody></table><blockquote><p>这篇博客引用了作者为”<strong>不爱吃糖的程序媛</strong>“的文章<br>原文链接为:<a href="https://blog.csdn.net/weixin_45822171/article/details/123773198">CSDN</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 数据监测的原理 </tag>
            
            <tag> JavaScript数组 </tag>
            
            <tag> JavaScript语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(4)-条件渲染,列表渲染,key的作用与原理</title>
      <link href="/2022/08/07/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/"/>
      <url>/2022/08/07/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<h1 id="1-条件渲染"><a href="#1-条件渲染" class="headerlink" title="1.条件渲染"></a>1.条件渲染</h1><h2 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1).v-if"></a><strong>1).v-if</strong></h2><ul><li><strong>写法：(非常暴力,会直接移除元素标签)</strong><ul><li><strong>(1).v-if&#x3D;”表达式”</strong></li><li><strong>(2).v-else-if&#x3D;”表达式”</strong></li><li><strong>(3).v-else&#x3D;”表达式”</strong></li></ul></li><li><strong>适用于：切换频率较低的场景。</strong></li><li><strong>特点：不展示的DOM元素直接被移除。</strong></li><li><strong>注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</strong></li></ul><h2 id="2-v-show-他不会暴力的去动DOM树-只会做一些样式上的隐藏"><a href="#2-v-show-他不会暴力的去动DOM树-只会做一些样式上的隐藏" class="headerlink" title="2).v-show(他不会暴力的去动DOM树,只会做一些样式上的隐藏)"></a><strong>2).v-show(他不会暴力的去动DOM树,只会做一些样式上的隐藏)</strong></h2><ul><li><strong>写法：v-show&#x3D;”表达式”</strong></li><li><strong>适用于：切换频率较高的场景。</strong></li><li><strong>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</strong></li></ul><h2 id="3-备注：使用v-if的时，元素可能无法获取到-因为使用v-if会直接删除目标元素标签-，而使用v-show一定可以获取到。"><a href="#3-备注：使用v-if的时，元素可能无法获取到-因为使用v-if会直接删除目标元素标签-，而使用v-show一定可以获取到。" class="headerlink" title="3).备注：使用v-if的时，元素可能无法获取到(因为使用v-if会直接删除目标元素标签)，而使用v-show一定可以获取到。"></a><strong>3).备注：使用v-if的时，元素可能无法获取到(因为使用v-if会直接删除目标元素标签)，而使用v-show一定可以获取到。</strong></h2><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;1 === 1&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;1 === 1&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- v-else和v-else-if --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n === 2&quot;</span>&gt;</span>React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n === 3&quot;</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>未来的前端框架<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- v-if与template的配合使用(在渲染到页面上的时候不会改变页面结构) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>五邑大学<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>江门<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            data : &#123;</span></span><br><span class="line"><span class="language-javascript">                name : <span class="string">&#x27;德莱联盟&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                n : <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125; </span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示:"></a>结果展示:</h3><ul><li><strong>1.使用v-show做条件渲染（v-if也是同理）</strong><br><img src="/../upload/Vue/V4/1.png" alt="image"></li><li><strong>2.使用v-if嵌套v-else-if和v-else</strong><br><img src="/../upload/Vue/V4/2.png" alt="image"></li></ul><h2 id="拓展-v-if与template的配合使用-在渲染到页面上的时候不会改变页面结构"><a href="#拓展-v-if与template的配合使用-在渲染到页面上的时候不会改变页面结构" class="headerlink" title="拓展: v-if与template的配合使用(在渲染到页面上的时候不会改变页面结构)"></a>拓展: v-if与template的配合使用(在渲染到页面上的时候不会改变页面结构)</h2><ul><li><strong>当我们有需求使用一个条件渲染多个元素时，可以使用v-if与template的配合使用(在渲染到页面上的时候不会改变页面结构)</strong></li><li><strong>如果使用div包裹多个元素一起渲染的话会改变页面结构：</strong><br><img src="/../upload/Vue/V4/3.png" alt="image"></li><li><strong>但是使用 v-if 结合 template 使用则不会出现这种情况</strong><br><img src="/../upload/Vue/V4/4.png" alt="image"></li></ul><h1 id="2-列表渲染（重点）"><a href="#2-列表渲染（重点）" class="headerlink" title="2.列表渲染（重点）"></a>2.列表渲染（重点）</h1><h2 id="1-基本的列表渲染：（v-for的基本使用）"><a href="#1-基本的列表渲染：（v-for的基本使用）" class="headerlink" title="1).基本的列表渲染：（v-for的基本使用）"></a>1).基本的列表渲染：（v-for的基本使用）</h2><ul><li><strong>v-for指令:</strong><ul><li><strong>1.用于展示列表数据</strong></li><li><strong>2.语法：v-for&#x3D;”(item, index) in xxx” :key&#x3D;”yyy”</strong></li><li><strong>3.可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</strong></li></ul></li></ul><h3 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.遍历数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.遍历对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) of car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.遍历字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历字符串（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) of str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 4.遍历指定次数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历指定次数（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) of 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">car</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;奥迪A8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">price</span>:<span class="string">&#x27;70万&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>:<span class="string">&#x27;黑色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">str</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V4/5.png" alt="image"></p><h2 id="2-Key的内部实现原理（重点）"><a href="#2-Key的内部实现原理（重点）" class="headerlink" title="2).Key的内部实现原理（重点）"></a>2).Key的内部实现原理（重点）</h2><ul><li><p><strong>面试题：react、vue中的key有什么作用？（key的内部原理）</strong></p><ul><li><p><strong>1. 虚拟DOM中key的作用：</strong></p><ul><li><strong>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</strong></li></ul></li><li><p><strong>2.对比规则：</strong></p><ul><li><strong>(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</strong><ul><li><strong>①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</strong></li><li><strong>②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</strong></li></ul></li><li><strong>(2).旧虚拟DOM中未找到与新虚拟DOM相同的key</strong><ul><li><strong>创建新的真实DOM，随后渲染到到页面。</strong></li></ul></li></ul></li><li><p><strong>3. 用index作为key可能会引发的问题：</strong></p><ul><li><strong>1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</strong><ul><li><strong>会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。</strong></li></ul></li><li><strong>2. 如果结构中还包含输入类的DOM：</strong><ul><li><strong>会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题。</strong></li></ul></li></ul></li><li><p><strong>4. 开发中如何选择key?:</strong></p><ul><li><strong>1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</strong></li><li><strong>2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</strong></li></ul></li></ul></li></ul><h3 id="代码展示：（要求在张三前面添加-老刘-40-id为4）"><a href="#代码展示：（要求在张三前面添加-老刘-40-id为4）" class="headerlink" title="代码展示：（要求在张三前面添加 老刘-40 id为4）"></a>代码展示：（要求在张三前面添加 老刘-40 id为4）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> p = &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">unshift</span>(p)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-2"><a href="#结果展示-2" class="headerlink" title="结果展示"></a>结果展示</h3><ul><li><p><strong>使用index作为key时：</strong><br><img src="/../upload/Vue/V4/6.png" alt="image"><br><img src="/../upload/Vue/V4/7.png" alt="image"></p></li><li><p><strong>使用 唯一标识 id 作为 key时：</strong><br><img src="/../upload/Vue/V4/8.png" alt="image"></p></li></ul><h2 id="原理解析（对比算法）："><a href="#原理解析（对比算法）：" class="headerlink" title="原理解析（对比算法）："></a>原理解析（对比算法）：</h2><p><img src="/../upload/Vue/V4/9.png" alt="image"></p><h3 id="不写key-Vue会默认将index作为key"><a href="#不写key-Vue会默认将index作为key" class="headerlink" title="不写key Vue会默认将index作为key"></a><strong>不写key Vue会默认将index作为key</strong></h3><p><img src="/../upload/Vue/V4/10.png" alt="image"></p><h1 id="3-列表过滤（相当于关键词搜索）"><a href="#3-列表过滤（相当于关键词搜索）" class="headerlink" title="3.列表过滤（相当于关键词搜索）"></a>3.列表过滤（相当于关键词搜索）</h1><h2 id="1-复习数组方法-过滤器-x3D-gt-filter"><a href="#1-复习数组方法-过滤器-x3D-gt-filter" class="headerlink" title="1).复习数组方法:过滤器 &#x3D;&gt; filter()"></a>1).复习数组方法:过滤器 &#x3D;&gt; filter()</h2><ul><li><strong>filter() 方法创建一个新数组，其中所有元素都通过了由提供的回调函数实现的测试。</strong></li><li><strong>注意： filter()方法不会更改原始数组。</strong></li></ul><h3 id="语法如下"><a href="#语法如下" class="headerlink" title="语法如下:"></a>语法如下:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">filter</span>(<span class="title function_">callback</span>(element[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure><ul><li><strong>filter 方法不会更改原始数组，但会返回一个新数组，其中包含满足提供的测试条件的所有元素。</strong></li><li><strong>filter 方法将回调函数作为第一个参数，并为数组的每个元素执行回调函数。</strong></li><li><strong>在回调函数的每次迭代中，每个数组元素值都作为第一个参数传递给回调函数。</strong></li></ul><h2 id="2-复习数组方法-indexOf"><a href="#2-复习数组方法-indexOf" class="headerlink" title="2).复习数组方法:indexOf()"></a>2).复习数组方法:indexOf()</h2><ul><li><strong>实现列表过滤需要配合indexOf来使用</strong></li><li><strong>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置,如果没有找到匹配的字符串则返回 -1。</strong></li></ul><h3 id="语法如下-1"><a href="#语法如下-1" class="headerlink" title="语法如下:"></a>语法如下:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找字符串 &quot;welcome&quot;:</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Hello world, welcome to the universe.&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n=str.<span class="title function_">indexOf</span>(<span class="string">&quot;welcome&quot;</span>);<span class="comment">//13</span></span><br></pre></td></tr></table></figure><h2 id="3-列表过滤的结合实现"><a href="#3-列表过滤的结合实现" class="headerlink" title="3).列表过滤的结合实现:"></a>3).列表过滤的结合实现:</h2><ul><li><strong>实现这个需求基本需要两个执行步骤</strong><ul><li><strong>1. 获取用户输入的信息(关键字) &#x3D;&gt; 双向数据绑定 v-model</strong></li><li><strong>2. 将获取到的信息(关键字)进行实时数据对比(filter) &#x3D;&gt; 计算属性(computed)或者监视属性(watch)</strong></li></ul></li></ul><h3 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filPerons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//用watch实现</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//#region </span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// new Vue(&#123;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//  el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//  data:&#123;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//      keyWord:&#x27;&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//      persons:[</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//          &#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//          &#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//          &#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//          &#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//      ],</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//      filPerons:[]</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//  &#125;,</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//  watch:&#123;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//      keyWord:&#123;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//             //每一个字符串里面都有一个&#x27;&#x27;空字符串,初始化调用一次相当于使用空字符串作为关键字搜索,就会展示所有列表信息</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//          immediate:true,</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//          handler(val)&#123;//这里只需要输入的数据不需要Oldval</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//              this.filPerons = this.persons.filter((p)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//                 // 返回数组中存在关键字的元素</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//                  return p.name.indexOf(val) &gt; -1</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//              &#125;)</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//          &#125;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//      &#125;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//  &#125;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//#endregion</span></span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//用computed实现</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">                 &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                 &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                 &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                 &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">             ]</span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">computed</span>:&#123;<span class="comment">//初次读取时会执行一次,作用相当于 watch 中的 immediate</span></span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">filPerons</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="comment">// 返回数组中存在关键字的元素</span></span></span><br><span class="line"><span class="language-javascript">                     <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) &gt; -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;)</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;) </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结果展示-3"><a href="#结果展示-3" class="headerlink" title="结果展示:"></a>结果展示:</h3><p><img src="/../upload/Vue/V4/11.png" alt="image"></p><h1 id="4-列表排序-注意：-这种方法会改变原始数组！"><a href="#4-列表排序-注意：-这种方法会改变原始数组！" class="headerlink" title="4.列表排序(注意： 这种方法会改变原始数组！)"></a>4.列表排序(注意： 这种方法会改变原始数组！)</h1><ul><li><strong>列表排序用到数组的sort()方法,这里发复习一下:</strong></li></ul><h2 id="这里最常用到的就是-数组的排序方法了-arr-sort"><a href="#这里最常用到的就是-数组的排序方法了-arr-sort" class="headerlink" title="这里最常用到的就是 数组的排序方法了 arr.sort()"></a><strong>这里最常用到的就是 数组的排序方法了 arr.sort()</strong></h2><h3 id="1-默认-arr-sort"><a href="#1-默认-arr-sort" class="headerlink" title="1.默认 arr.sort()"></a>1.默认 arr.sort()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">0</span>,<span class="number">1</span>,<span class="number">56</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//打印[0, 1, 23, 3, 34, 56]</span></span><br></pre></td></tr></table></figure><h3 id="2-升序-arr-sort-a-b-x3D-gt-a-b"><a href="#2-升序-arr-sort-a-b-x3D-gt-a-b" class="headerlink" title="2.升序 arr.sort(a , b) &#x3D;&gt; a-b"></a>2.升序 arr.sort(a , b) &#x3D;&gt; a-b</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">0</span>,<span class="number">1</span>,<span class="number">56</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(a , b)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> a-b</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//打印[0, 1, 23, 3, 34, 56]</span></span><br></pre></td></tr></table></figure><h3 id="3-降序-arr-sort-a-b-x3D-gt-b-a"><a href="#3-降序-arr-sort-a-b-x3D-gt-b-a" class="headerlink" title="3.降序 arr.sort(a , b) &#x3D;&gt; b-a"></a>3.降序 arr.sort(a , b) &#x3D;&gt; b-a</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">0</span>,<span class="number">1</span>,<span class="number">56</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(a , b)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> b-a</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//打印[56, 34, 23, 3, 1, 0]</span></span><br></pre></td></tr></table></figure><h2 id="进入主题-实现排序"><a href="#进入主题-实现排序" class="headerlink" title="进入主题(实现排序)"></a>进入主题(实现排序)</h2><h3 id="代码如下-3"><a href="#代码如下-3" class="headerlink" title="代码如下:"></a>代码如下:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用computed实现</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">sortType</span>:<span class="number">0</span>,<span class="comment">//设置排序类型 0为原序 1为升序 2为降序</span></span><br><span class="line">            <span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">persons</span>:[</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">9</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">12</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">2</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">computed</span>:&#123;<span class="comment">//初次读取时会执行一次,作用相当于 watch 中的 immediate</span></span><br><span class="line">            <span class="title function_">filPerons</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">const</span> person =  <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">// 返回数组中存在关键字的元素</span></span><br><span class="line">                    <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) &gt; -<span class="number">1</span></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断是否需要排序</span></span><br><span class="line">                <span class="comment">// 这里可以直接写 this.sortType 因为1和2都是真</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sortType</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    person.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1 , p2</span>)=&gt;</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? p1.<span class="property">age</span>-p2.<span class="property">age</span> : p2.<span class="property">age</span>-p1.<span class="property">age</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 最后返回整理好的数组</span></span><br><span class="line">                <span class="keyword">return</span> person;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="运行结果如下"><a href="#运行结果如下" class="headerlink" title="运行结果如下:"></a>运行结果如下:</h3><p><img src="/../upload/Vue/V4/12.png" alt="image"><br><img src="/../upload/Vue/V4/13.png" alt="image"><br><img src="/../upload/Vue/V4/14.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 条件渲染 </tag>
            
            <tag> 列表渲染 </tag>
            
            <tag> key的作用与原理 </tag>
            
            <tag> 列表过滤 </tag>
            
            <tag> 列表排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(3)-计算属性,监听属性以及绑定样式</title>
      <link href="/2022/08/05/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
      <url>/2022/08/05/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h1 id="1-计算属性-computed"><a href="#1-计算属性-computed" class="headerlink" title="1.计算属性-computed"></a>1.计算属性-computed</h1><ul><li><strong>所谓的计算属性,就是拿着你Vue中原有的属性（data里面的）去加工,计算,生成的全新的属性。</strong></li><li><ol><li><strong>定义：要用的属性不存在，要通过已有属性计算得来。</strong></li></ol></li><li><ol start="2"><li><strong>原理：底层借助了Objcet.defineproperty方法提供的getter和setter。</strong></li></ol></li><li><ol start="3"><li><strong>get函数什么时候执行？</strong></li></ol><ul><li><strong>(1).初次读取时会执行一次。</strong></li><li><strong>(2).当依赖的数据发生改变时会被再次调用。</strong></li></ul></li><li><ol start="4"><li><strong>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。(在开发者工具(Vue)当中可以直接观察到)</strong></li></ol></li><li><ol start="5"><li><strong>备注：</strong></li></ol><ul><li><strong>(1).计算属性最终会出现在vm上，直接读取使用即可。</strong></li><li><strong>(2).如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</strong></li></ul></li></ul><h3 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子:"></a>代码例子:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建Vue实例</span></span><br><span class="line">       <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">           el : <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">           data : &#123;</span><br><span class="line">               firstname : <span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">               lastname  : <span class="string">&#x27;三&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="comment">// 计算属性(实际上计算属性没有真正的值,你的每一次调用,Vue都会给你现算的,算过一次存在缓存)</span></span><br><span class="line">           computed : &#123;</span><br><span class="line">               fullName : &#123;</span><br><span class="line">                   <span class="comment">// 一定要有get()且不能使用箭头函数(没有this指向)</span></span><br><span class="line">                   <span class="comment">//这里的get()就是Object.defineproperty,当数据被读取时调用</span></span><br><span class="line">                   <span class="title function_">get</span>(<span class="params"></span>)&#123;<span class="comment">//Vue把这里的get指向改成了 Vue实例对象 非常好的点</span></span><br><span class="line">                       <span class="comment">// console.log(this);//指向Vue实例对象</span></span><br><span class="line">                       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了!&#x27;</span>);</span><br><span class="line">                       <span class="comment">// 一定要有return</span></span><br><span class="line">                       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span>;</span><br><span class="line">                   &#125;,</span><br><span class="line">                   <span class="comment">// set什么时候调用:当指向数据(fullName)被修改时</span></span><br><span class="line">                   <span class="title function_">set</span>(<span class="params">value</span>)&#123;<span class="comment">//比较少用,一般数据是只读取不修改的</span></span><br><span class="line">                       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收的数据为:&#x27;</span>,value);</span><br><span class="line">                       <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);<span class="comment">//字符串分割</span></span><br><span class="line">                       <span class="variable language_">this</span>.<span class="property">firstname</span> = arr[<span class="number">0</span>];</span><br><span class="line">                       <span class="variable language_">this</span>.<span class="property">lastname</span> = arr[<span class="number">1</span>];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           methods : &#123;</span><br><span class="line">               <span class="title function_">fullname</span>(<span class="params"></span>)&#123;<span class="comment">//每一次你更改名字,这个函数都会调用一次</span></span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//指向的是Vue实例对象</span></span><br><span class="line">                   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V3/1.png" alt="image"><br><img src="/../upload/Vue/V3/2.png" alt="image"></p><h3 id="计算属性-computed-简写形式"><a href="#计算属性-computed-简写形式" class="headerlink" title="计算属性(computed)简写形式"></a>计算属性(computed)简写形式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">            <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">computed</span>:&#123;</span><br><span class="line">            <span class="comment">//完整写法</span></span><br><span class="line">            <span class="comment">/* fullName:&#123;</span></span><br><span class="line"><span class="comment">                get()&#123;</span></span><br><span class="line"><span class="comment">                    console.log(&#x27;get被调用了&#x27;)</span></span><br><span class="line"><span class="comment">                    return this.firstName + &#x27;-&#x27; + this.lastName</span></span><br><span class="line"><span class="comment">                &#125;,</span></span><br><span class="line"><span class="comment">                set(value)&#123;</span></span><br><span class="line"><span class="comment">                    console.log(&#x27;set&#x27;,value)</span></span><br><span class="line"><span class="comment">                    const arr = value.split(&#x27;-&#x27;)</span></span><br><span class="line"><span class="comment">                    this.firstName = arr[0]</span></span><br><span class="line"><span class="comment">                    this.lastName = arr[1]</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125; */</span></span><br><span class="line">            <span class="comment">//简写</span></span><br><span class="line">            <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="运行结果-与完整版一致"><a href="#运行结果-与完整版一致" class="headerlink" title="运行结果(与完整版一致):"></a>运行结果(与完整版一致):</h3><p><img src="/../upload/Vue/V3/3.png" alt="image"></p><h1 id="2-监视属性-watch"><a href="#2-监视属性-watch" class="headerlink" title="2.监视属性-watch"></a>2.监视属性-watch</h1><ul><li><ol><li><strong>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</strong></li></ol></li><li><ol start="2"><li><strong>监视的属性必须存在，才能进行监视！！</strong></li></ol></li><li><ol start="3"><li><strong>监视的两种写法：</strong></li></ol><ul><li><strong>(1).new Vue时传入watch配置</strong></li><li><strong>(2).通过vm.$watch监视</strong></li></ul></li></ul><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;weather&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定事件的时候：@xxx=&quot;yyy&quot; yyy可以写一些简单的语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button @click=&quot;isHot = !isHot&quot;&gt;切换天气&lt;/button&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&#x27;changeWeather&#x27;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue实例化</span></span></span><br><span class="line"><span class="language-javascript">    st vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">     el : <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">     data : &#123;</span></span><br><span class="line"><span class="language-javascript">         isHot : <span class="literal">true</span><span class="comment">//设置一个标志位,用于判断炎热还是凉爽</span></span></span><br><span class="line"><span class="language-javascript">     &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;,</span></span><br><span class="line"><span class="language-javascript">     computed : &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">weather</span>(<span class="params"></span>)&#123;<span class="comment">//get的简写</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 监视属性</span></span></span><br><span class="line"><span class="language-javascript">     watch : &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置要监视的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isHot</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="comment">// immediate属性是watch属性里面自带的,用于初始化时让handler调用一下</span></span></span><br><span class="line"><span class="language-javascript">             immediate : <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">             <span class="comment">// 里面有这样一个函数 : handler</span></span></span><br><span class="line"><span class="language-javascript">             <span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 同样可以这样写,(外部调用,当我们一开始不知道要监视哪一个属性时)</span></span></span><br><span class="line"><span class="language-javascript">    vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V3/4.png" alt="image"><br>![image](..&#x2F;upload&#x2F;Vue&#x2F;V3&#x2F;5 .png)</p><h2 id="2-1-深度监视-deep"><a href="#2-1-深度监视-deep" class="headerlink" title="2.1 深度监视(deep)"></a>2.1 深度监视(deep)</h2><ul><li><strong>(1).Vue中的watch默认不监测对象内部值的改变（一层）。</strong></li><li><strong>(2).配置deep:true可以监测对象内部值改变（多层,无论层级有多深）。</strong></li><li><strong>备注:</strong><ul><li><strong>(1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</strong></li><li><strong>(2).使用watch时根据数据的具体结构，决定是否采用深度监视。</strong></li></ul></li></ul><h3 id="代码解析-1"><a href="#代码解析-1" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;weather&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&#x27;changeWeather&#x27;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>a:&#123;&#123;number.a&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- @xxx = &#x27;这里可以写一些简单的js语句&#x27; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&#x27;number.a++&#x27;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>b:&#123;&#123;number.b&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&#x27;number.b++&#x27;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue实例化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        el : <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        data : &#123;</span></span><br><span class="line"><span class="language-javascript">            isHot : <span class="literal">true</span> ,<span class="comment">//设置一个标志位,用于判断炎热还是凉爽</span></span></span><br><span class="line"><span class="language-javascript">            number : &#123;</span></span><br><span class="line"><span class="language-javascript">                a : <span class="number">1</span> ,</span></span><br><span class="line"><span class="language-javascript">                b : <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        computed : &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">weather</span>(<span class="params"></span>)&#123;<span class="comment">//get的简写</span></span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 监视属性</span></span></span><br><span class="line"><span class="language-javascript">        watch : &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 深度监视的应用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">number</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 开启深度监测</span></span></span><br><span class="line"><span class="language-javascript">                deep : <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 里面有这样一个函数 : handler</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//handler什么时候调用？当number发生改变时。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;number被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果:"></a>运行结果:</h3><ul><li><strong>未开启深度监视</strong><br><img src="/../upload/Vue/V3/6.png" alt="image"></li><li><strong>开启深度监视</strong><br><img src="/../upload/Vue/V3/7.png" alt="image"></li></ul><h2 id="2-2-简写形式"><a href="#2-2-简写形式" class="headerlink" title="2.2 简写形式"></a>2.2 简写形式</h2><ul><li><strong>前提是你不使用 immediate属性 和 deep属性.</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:&#123;</span><br><span class="line">                <span class="attr">isHot</span>:<span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">computed</span>:&#123;</span><br><span class="line">                <span class="title function_">info</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">watch</span>:&#123;</span><br><span class="line">                <span class="comment">//正常写法</span></span><br><span class="line">                <span class="comment">/* isHot:&#123;</span></span><br><span class="line"><span class="comment">                    // immediate:true, //初始化时让handler调用一下</span></span><br><span class="line"><span class="comment">                    // deep:true,//深度监视</span></span><br><span class="line"><span class="comment">                    handler(newValue,oldValue)&#123;</span></span><br><span class="line"><span class="comment">                        console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;, */</span></span><br><span class="line">                <span class="comment">//简写(前提是你不适用 immediate属性 和 deep属性)  </span></span><br><span class="line">                <span class="title function_">isHot</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue,<span class="variable language_">this</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正常写法</span></span><br><span class="line">        <span class="comment">/* vm.$watch(&#x27;isHot&#x27;,&#123;</span></span><br><span class="line"><span class="comment">            immediate:true, //初始化时让handler调用一下</span></span><br><span class="line"><span class="comment">            deep:true,//深度监视</span></span><br><span class="line"><span class="comment">            handler(newValue,oldValue)&#123;</span></span><br><span class="line"><span class="comment">                console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;) */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//简写(前提是你不适用 immediate属性 和 deep属性) </span></span><br><span class="line">        vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,<span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)&#123;<span class="comment">//不能使用箭头函数</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-计算属性VS监听属性"><a href="#3-计算属性VS监听属性" class="headerlink" title="3.计算属性VS监听属性"></a>3.计算属性VS监听属性</h1><ul><li><strong>一般来将实现相同的功能，使用计算属性实现起来更为简单，但是计算属性里面却不能开启异步任务来维护数据，因为computed(计算属性是依靠返回值),但是监听属性却可以,因为watch不靠返回值,编辑者自己去修改代码来控制.</strong></li><li><strong>computed和watch之间的区别：</strong><ul><li><strong>1.computed能完成的功能，watch都可以完成。</strong></li><li><strong>2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</strong></li></ul></li><li><strong>两个重要的小原则：</strong><ul><li><strong>1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</strong></li><li><strong>2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</strong></li></ul></li></ul><h3 id="例如"><a href="#例如" class="headerlink" title="例如:"></a>例如:</h3><ul><li><strong>提一个需求:要求姓名延迟一秒显示到页面上(watch能做到,但是computed却做不到)</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line"><span class="title function_">firstName</span>(<span class="params">val</span>)&#123;</span><br><span class="line">    <span class="comment">// 这里的定时器一定要用箭头函数，因为它没有this指向，会向上找到firstName的this最终指向Vue实例，但是如果你用function的话，它会指向windows，但是windows里面没有fullName，这要会导致报错</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="title function_">lastName</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-绑定-CSS-和-style-样式"><a href="#4-绑定-CSS-和-style-样式" class="headerlink" title="4.绑定 CSS 和 style 样式"></a>4.绑定 CSS 和 style 样式</h1><ul><li><strong>1. class样式</strong><ul><li><strong>写法:class&#x3D;”xxx” xxx可以是字符串、对象、数组。</strong><ul><li><strong>字符串写法适用于：类名不确定，要动态获取。</strong></li><li><strong>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</strong></li><li><strong>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</strong></li></ul></li></ul></li><li><strong>2. style样式</strong><ul><li><strong>:style&#x3D;”{fontSize: xxx}”其中xxx是动态值。</strong></li><li><strong>:style&#x3D;”[a,b]”其中a、b是样式对象。</strong></li></ul></li></ul><h3 id="代码解析-2"><a href="#代码解析-2" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.basic</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.happy</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">4px</span> solid red;;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.644</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>,yellow,pink,orange,yellow);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sad</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">4px</span> dashed <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">197</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.normal</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wydx1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wydx2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wydx3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">classArr</span>:[<span class="string">&#x27;wydx1&#x27;</span>,<span class="string">&#x27;wydx2&#x27;</span>,<span class="string">&#x27;wydx3&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">classObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">wydx1</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">wydx2</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">styleObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//这里的属性名要用驼峰命名法(font-size要变成fontSize)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">styleObj2</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// background-color 变成 backgroundColor</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">styleArr</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">backgroundColor</span>:<span class="string">&#x27;gray&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeMood</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="string">&#x27;normal&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">mood</span> = arr[index]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 计算属性 </tag>
            
            <tag> 监听属性 </tag>
            
            <tag> 绑定样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改butterfly(8)-给博客的弹出添加特效</title>
      <link href="/2022/08/04/%E9%AD%94%E6%94%B9butterfly8/"/>
      <url>/2022/08/04/%E9%AD%94%E6%94%B9butterfly8/</url>
      
        <content type="html"><![CDATA[<h1 id="添加-wowjs特效"><a href="#添加-wowjs特效" class="headerlink" title="添加 wowjs特效"></a>添加 wowjs特效</h1><ul><li><strong>参考:<a href="https://www.npmjs.com/package/hexo-butterfly-wowjs">wowjs 特效</a></strong></li></ul><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程:"></a>使用流程:</h2><ul><li><strong>首先安装插件:</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-wowjs --save</span><br></pre></td></tr></table></figure></li><li><strong>添加配置项</strong><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wowjs</span></span><br><span class="line"><span class="comment"># see https://www.npmjs.com/package/hexo-butterfly-wowjs</span></span><br><span class="line"><span class="attr">wowjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#控制动画开关。true是打开，false是关闭</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">10</span> <span class="comment">#过滤器优先级</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment">#移动端是否启用，默认移动端禁用</span></span><br><span class="line">  <span class="attr">animateitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">recent-post-item</span> <span class="comment">#必填项，需要添加动画的元素的class</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__zoomIn</span> <span class="comment">#必填项，需要添加的动画</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="number">1.</span><span class="string">5s</span> <span class="comment">#选填项，动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</span></span><br><span class="line">      <span class="attr">delay:</span> <span class="string">200ms</span> <span class="comment">#选填项，动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</span></span><br><span class="line">      <span class="attr">offset:</span> <span class="number">30</span> <span class="comment">#选填项，开始动画的距离（相对浏览器底部）</span></span><br><span class="line">      <span class="attr">iteration:</span> <span class="number">1</span> <span class="comment">#选填项，动画重复的次数</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">card-widget</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__zoomIn</span></span><br><span class="line">      <span class="attr">delay:</span> <span class="string">200ms</span></span><br><span class="line">    <span class="comment"># - class: flink-list-card</span></span><br><span class="line">    <span class="comment">#   style: wowpanels</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">flink-list-card</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__flipInY</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">3s</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">flink-list-card</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__animated</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">3s</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">article-sort-item</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__slideInRight</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="number">1.</span><span class="string">5s</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">site-card</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__flipInY</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">3s</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">site-card</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__animated</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">3s</span></span><br><span class="line">  <span class="attr">animate_css:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-wowjs/lib/animate.min.css</span></span><br><span class="line">  <span class="attr">wow_js:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-wowjs/lib/wow.min.js</span></span><br><span class="line">  <span class="attr">wow_init_js:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-wowjs/lib/wow_init.js</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改butterfly(7)-页脚添加github徽标以及网页运行时间</title>
      <link href="/2022/08/03/%E9%AD%94%E6%94%B9butterfly7/"/>
      <url>/2022/08/03/%E9%AD%94%E6%94%B9butterfly7/</url>
      
        <content type="html"><![CDATA[<h1 id="github徽标"><a href="#github徽标" class="headerlink" title="github徽标"></a>github徽标</h1><ul><li><strong>github徽标可以直接通过<a href="https://shields.io/">shields.io</a>在线生成。</strong></li><li><strong>理论上可以放在页面的任何地方。教程案例是添加在页脚。</strong></li><li><strong>工具网站包括：</strong><ol><li><strong>徽标生成网站:<a href="https://shields.io/">shields.io</a></strong></li><li><strong>图标查询网站:<a href="https://simpleicons.org/">simpleicons</a></strong></li><li><strong>html压缩网站:<a href="http://tool.ggo.net/htmlpack/">htmlpack</a></strong></li></ol></li></ul><h2 id="预览结果展示"><a href="#预览结果展示" class="headerlink" title="预览结果展示:"></a>预览结果展示:</h2><p><img src="/../upload/mogai7/1.png" alt="image"></p><h2 id="具体实现步骤-简单实现"><a href="#具体实现步骤-简单实现" class="headerlink" title="具体实现步骤:(简单实现)"></a>具体实现步骤:(简单实现)</h2><ol><li><p><strong>通过<a href="https://shields.io/">shields.io</a>在线生成。</strong></p><ul><li><strong>label:标签，徽标左侧内容</strong></li><li><strong>message:信息，徽标右侧内容</strong></li><li><strong>color:色值,支持支持十六进制、rgb、rgba、hsl、hsla和 css 命名颜色。十六进制记得删除前面的#号</strong></li></ul></li><li><p><strong>输入相关信息后，点击<strong style="color:red">make badge</strong>即可得到徽标的URL。可以用img标签引用，写法简单。不过正式写法建议用object标签引用，写法示例如下。</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- label=Frame，Message=Hexo，color=blue --&gt;</span></span><br><span class="line">https://img.shields.io/badge/Frame-Hexo-blue</span><br><span class="line"><span class="comment">&lt;!-- 在页面上可以使用img标签来引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 部分属性例如link需要用object标签来引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?link=https://hexo.io&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>拓展写法示例</strong></p><ul><li><strong>属性说明</strong></li><li><strong>仅仅如此肯定是不能令人满意的，还可以继续添加样式。<a href="https://shields.io/">shields.io</a>提供直接在<strong style="color:red">URL</strong>内添加样式属性的功能。使用<strong style="color:red">?</strong>引用，使用<strong style="color:red">&amp;</strong>连接各属性。</strong></li></ul></li></ol><table><thead><tr><th>属性</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>style</td><td>徽标样式，默认提供了五种样式： plastic,flat,flat-square, for-the-badge,social</td><td>?style&#x3D;flat-square</td></tr><tr><td>label</td><td>覆盖默认的左侧文本 （空格或特殊字符需要转 URL 编码！）</td><td>?label&#x3D;healthinesses</td></tr><tr><td>logo</td><td>自定义图标， 限制较多，不推荐</td><td>?logo&#x3D;data:image&#x2F;png;base64,url</td></tr><tr><td>logoColor</td><td>设置徽标的颜色 （支持十六进制、rgb、 rgba、hsl、hsla 和 css 命名颜色）。 支持命名徽标， 但不支持自定义徽标。</td><td>?logoColor&#x3D;violet</td></tr><tr><td>logoWidth</td><td>给图标提供的水平空间</td><td>?logoWidth&#x3D;40</td></tr><tr><td>link</td><td>徽标指向的链接， 此时需要用 object 标签 引用才能生效 写法看示例代码</td><td>?link&#x3D;<a href="http://example.com/">http://example.com</a></td></tr><tr><td>labelColor</td><td>左侧部分背景色， （支持十六进制、rgb、 rgba、hsl、hsla 和 css 命名颜色）</td><td>?labelColor&#x3D;abcdef 或者？colorA&#x3D;abcdef</td></tr><tr><td>color</td><td>右侧部分背景色， （支持十六进制、rgb、 rgba、hsl、hsla 和 css 命名颜色）</td><td>?color&#x3D;fedcba 或者？colorB&#x3D;fedcba</td></tr></tbody></table><ul><li><strong>示例源码</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 五种style预览 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?logo=Hexo&amp;style=plastic&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?logo=Hexo&amp;style=flat&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?logo=Hexo&amp;style=flat-square&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?logo=Hexo&amp;style=for-the-badge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?logo=Hexo&amp;style=social&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加图标和自定义label --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?logo=Hexo&amp;label=框架&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加图标和图标宽度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?logo=Hexo&amp;logoWidth=30&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 图标、label、message三部分颜色自定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?logo=Hexo&amp;label=框架&amp;logoColor=violet&amp;labalColor=#1fd041&amp;color=rgb(222, 31, 31)&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给标签添加链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?logo=Hexo&amp;link=https://hexo.io/&amp;https://hexo.io/zh-cn/docs/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以通过嵌套a标签来实现添加链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://hexo.io&quot;</span> <span class="attr">title</span>=<span class="string">&quot;框架采用Hexo&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>样式预览</strong><br><img src="/../upload/mogai7/2.png" alt="image"></li></ul><ol start="4"><li><strong>在主题配置文件<code>_config.yml</code>的<code>footer</code>配置项中添加徽标，注意事先压缩一下，使他们只留一行。为了不至于太过紧凑，用 (空格的转义字符)隔开。</strong><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Footer Settings</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line">    <span class="comment"># 设置页脚徽标</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">&lt;div&gt;🦸‍♂️目在当下,活在当下&lt;/div&gt;</span></span><br><span class="line">               <span class="string">&lt;div&gt;🦾成为自己想成为的人!&lt;/div&gt;</span></span><br><span class="line">               <span class="string">&lt;p&gt;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://hexo.io/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo&quot;</span> <span class="string">title=&quot;博客框架为Hexo&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://demo.jerryc.me/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender&quot;</span> <span class="string">title=&quot;主题采用butterfly&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://github.com/</span> <span class="string">&quot;&gt;&lt;img src=&quot;</span><span class="string">https://img.shields.io/badge/CDN-Github%26SM.MS-brightgreen?style=flat&amp;logo=Shelly&quot;</span> <span class="string">title=&quot;本站使用github和sm.ms为静态资源提供CDN加速&quot;&gt;&lt;/a&gt;</span> <span class="string">&amp;nbsp;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://github.com/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub&quot;</span> <span class="string">title=&quot;本站项目由Gtihub托管&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris&quot;</span> <span class="string">title=&quot;本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可&quot;&gt;&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="插件化写法-较上复杂"><a href="#插件化写法-较上复杂" class="headerlink" title="插件化写法(较上复杂)"></a>插件化写法(较上复杂)</h2><ol><li><strong>修改<code>BlogRoot/node_modules/hexo-theme-butterfly/layout/includes/footer.pug</code>,添加页脚标签循环节：</strong><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">    if theme.footer.custom_text</span></span><br><span class="line"><span class="code">      .footer_custom_text!=`$&#123;theme.footer.custom_text&#125;`</span></span><br><span class="line"><span class="code">    //v3.4.0以下版本可能还有ICP的配置项。此处只要保证p和上方的if缩进平级就好。</span></span><br><span class="line"><span class="code">+   p#ghbdages</span></span><br><span class="line"><span class="code">+     if theme.ghbdage.enable</span></span><br><span class="line"><span class="code">+       each item in theme.ghbdage.bdageitem</span></span><br><span class="line"><span class="code">+         a.github-badge(target=&#x27;_blank&#x27; href=url_for(item.link)  style=&#x27;margin-inline:5px&#x27;)</span></span><br><span class="line"><span class="code">+           img(src=url_for(item.shields) title=item.massage)</span></span><br></pre></td></tr></table></figure></li><li><strong>在主题配置文件<code>_config.butterfly.yml</code>中添加相关配置项：</strong><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ghbdage:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bdageitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://hexo.io/</span>  <span class="comment"># 标签跳转链接</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo</span> <span class="comment">#shields的API链接，填法参考本篇教程</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">博客框架为Hexo_v5.3.0</span> <span class="comment">#鼠标悬停时显示的信息</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://demo.jerryc.me/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">主题版本Butterfly_v3.4.2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://metroui.org.ua/index.html</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站使用JsDelivr为静态资源提供CDN加速</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://vercel.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-Vervel-brightgreen?style=flat&amp;logo=Vercel</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用双线部署，默认线路托管于Vercel</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://vercel.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-Coding-0cedbe?style=flat&amp;logo=Codio</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用双线部署，联通线路托管于Coding</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://github.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站项目由Gtihub托管</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">http://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="重点-目前博客在用"><a href="#重点-目前博客在用" class="headerlink" title="重点(目前博客在用)"></a>重点(目前博客在用)</h1><ul><li><strong>我们也可以调用组件来实现这些功能(页脚添加github徽标以及网页运行时间)</strong></li><li><strong>安装插件,在博客根目录[Blogroot]下打开终端，运行以下指令：</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-footer-beautify --save</span><br></pre></td></tr></table></figure></li><li><strong>添加配置信息，以下为写法示例:</strong><ul><li><strong>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</strong><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># footer_beautify</span></span><br><span class="line"><span class="comment"># 页脚计时器：[Native JS Timer](https://akilar.top/posts/b941af/)</span></span><br><span class="line"><span class="comment"># 页脚徽标：[Add Github Badge](https://akilar.top/posts/e87ad7f8/)</span></span><br><span class="line"><span class="attr">footer_beautify:</span></span><br><span class="line">  <span class="attr">enable:</span></span><br><span class="line">    <span class="attr">timer:</span> <span class="literal">true</span> <span class="comment"># 计时器开关</span></span><br><span class="line">    <span class="attr">bdage:</span> <span class="literal">true</span> <span class="comment"># 徽标开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="comment">#屏蔽页面</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">footer-wrap</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 计时器部分配置项</span></span><br><span class="line">  <span class="attr">runtime_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.js</span></span><br><span class="line">  <span class="attr">runtime_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.css</span></span><br><span class="line">  <span class="comment"># 徽标部分配置项</span></span><br><span class="line">  <span class="attr">swiperpara:</span> <span class="number">3</span> <span class="comment">#若非0，则开启轮播功能，每行徽标个数</span></span><br><span class="line">  <span class="attr">bdageitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://hexo.io/</span> <span class="comment">#徽标指向网站链接</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo</span> <span class="comment">#徽标API</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">博客框架为Hexo_v5.4.0</span> <span class="comment">#徽标提示语</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://butterfly.js.org/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">主题版本Butterfly_v3.8.2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://www.jsdelivr.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站使用JsDelivr为静态资源提供CDN加速</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://vercel.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-Vercel-brightgreen?style=flat&amp;logo=Vercel</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用双线部署，默认线路托管于Vercel</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://vercel.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-Coding-0cedbe?style=flat&amp;logo=Codio</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用双线部署，联通线路托管于Coding</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://github.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站项目由Github托管</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">http://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span></span><br><span class="line">  <span class="attr">swiperbdage_init_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify/lib/swiperbdage_init.min.js</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="当然-这里的外部js和css的引用也可以下载下来-然后再放到博客的根目录下主题文件夹里面的source文件夹里面的内置css文件夹中-然后再本地相对链接中调用即可"><a href="#当然-这里的外部js和css的引用也可以下载下来-然后再放到博客的根目录下主题文件夹里面的source文件夹里面的内置css文件夹中-然后再本地相对链接中调用即可" class="headerlink" title="当然,这里的外部js和css的引用也可以下载下来,然后再放到博客的根目录下主题文件夹里面的source文件夹里面的内置css文件夹中,然后再本地相对链接中调用即可"></a>当然,这里的外部js和css的引用也可以下载下来,然后再放到博客的根目录下主题文件夹里面的source文件夹里面的内置css文件夹中,然后再本地相对链接中调用即可</h3><h2 id="参数释义"><a href="#参数释义" class="headerlink" title="参数释义:"></a>参数释义:</h2><table><thead><tr><th>参数</th><th>备选值&#x2F;类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>enable.timer</td><td>true&#x2F;false</td><td>【必选】计时器控制开关</td></tr><tr><td>enable.bdage</td><td>true&#x2F;false</td><td>【必选】徽标控制开关</td></tr><tr><td>enable_page</td><td>path</td><td>【可选】填写想要应用的页面,如根目录就填’&#x2F;‘,分类页面就填’&#x2F;categories&#x2F;‘。若要应用于所有页面，就填all，默认为all</td></tr><tr><td>exclude</td><td>path</td><td>【可选】填写想要屏蔽的页面，可以多个。仅当enable_page为’all’时生效。写法见示例。原理是将屏蔽项的内容逐个放到当前路径去匹配，若当前路径包含任一屏蔽项，则不会挂载。</td></tr><tr><td>layout.type</td><td>id&#x2F;class</td><td>【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>runtime_js</td><td>url</td><td>【必选】页脚计时器脚本，可以下载上文填写示例的链接，参照注释和教程：Native JS Timer自行修改。</td></tr><tr><td>runtime_css</td><td>url</td><td>【可选】自定义样式，预留开发者接口，可自行下载。</td></tr><tr><td>swiperpara</td><td>number</td><td>【可选】若非零，则开启轮播功能，此项表示每行最多容纳徽标个数，用来应对徽标过多显得页脚拥挤的问题</td></tr><tr><td>bdageitem.link</td><td>url</td><td>【可选】页脚徽标指向的网站链接</td></tr><tr><td>bdageitem.shields</td><td>url</td><td>【必选】页脚徽标对应的API，API具体写法示例参照教程Add Github Badge</td></tr><tr><td>bdageitem.message</td><td>text</td><td>【可选】页脚徽标悬停时显示的信息</td></tr><tr><td>swiper_css</td><td>url</td><td>【可选】swiper的依赖</td></tr><tr><td>swiper_js</td><td>url</td><td>【可选】swiper的依赖</td></tr><tr><td>swiperbdage_init_js</td><td>url</td><td>【可选】swiper初始化方法</td></tr></tbody></table><blockquote><p>这篇博客引用了作者为”<strong>唐志远和akilar</strong>“的文章<br>原文链接为:<a href="https://tzy1997.com/articles/kfwr2gpa/">唐志远の博客</a>,<a href="https://akilar.top/posts/b941af/">akilar的糖果屋</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改butterfly(6) - 给页面添加轮播图</title>
      <link href="/2022/08/02/%E9%AD%94%E6%94%B9butterfly5/"/>
      <url>/2022/08/02/%E9%AD%94%E6%94%B9butterfly5/</url>
      
        <content type="html"><![CDATA[<h1 id="给页面添加轮播图"><a href="#给页面添加轮播图" class="headerlink" title="给页面添加轮播图"></a>给页面添加轮播图</h1><ul><li><strong>就拿 <a href="https://cheung-pui-lam.github.io/">我的博客</a> 为例</strong></li><li><strong>效果图如下:</strong><br><img src="/../upload/mogai5/1.png" alt="image"></li></ul><h2 id="教程开始"><a href="#教程开始" class="headerlink" title="教程开始:"></a>教程开始:</h2><ul><li><ol><li><strong>首先安装插件(在博客的根目录下打开控制台,运行以下指令,魔改4有教)</strong></li></ol></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-swiper --save</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li><strong>添加配置信息(在站点配置文件_config.yml或者主题配置文件_config.butterfly.yml中添加一下代码)</strong></li></ol></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-swiper</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/8e1264d1/</span></span><br><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">timemode:</span> <span class="string">date</span> <span class="comment">#date/updated</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">default_descr:</span> <span class="string">再怎么看我也不知道怎么描述它的啦！</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span> <span class="comment">#swiper css依赖</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span> <span class="comment">#swiper js依赖</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiperstyle.css</span> <span class="comment"># 适配主题样式补丁</span></span><br><span class="line">  <span class="attr">custom_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper_init.js</span> <span class="comment"># swiper初始化方法</span></span><br></pre></td></tr></table></figure><h3 id="如图所示"><a href="#如图所示" class="headerlink" title="如图所示:"></a>如图所示:</h3><p><img src="/../upload/mogai5/2.png" alt="image"></p><h2 id="参数示意"><a href="#参数示意" class="headerlink" title="参数示意:"></a>参数示意:</h2><table><thead><tr><th>参数</th><th>备选值&#x2F;类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>enable</td><td>true&#x2F;false</td><td>【必选】控制开关</td></tr><tr><td>enable_page</td><td>path&#x2F;all</td><td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’&#x2F;‘,分类页面就填’&#x2F;categories&#x2F;‘。若要应用于所有页面，就填’all’，默认为all</td></tr><tr><td>timemode</td><td>date&#x2F;updated</td><td>【可选】时间显示，date为显示创建日期，updated为显示更新日期,默认为date</td></tr><tr><td>layout.type</td><td>id&#x2F;class</td><td>【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>default_descr</td><td>text</td><td>默认文章描述</td></tr><tr><td>swiper_css</td><td>url</td><td>【可选】自定义的swiper依赖项css链接</td></tr><tr><td>swiper_js</td><td>url</td><td>【可选】自定义的swiper依赖项加js链接</td></tr><tr><td>custom_css</td><td>url</td><td>【可选】适配主题样式补丁</td></tr><tr><td>custom_js</td><td>url</td><td>【可选】swiper初始化方法</td></tr></tbody></table><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h2><ul><li><strong>在文章的 front_matter 区域中添加 swiper_index 配置项即可。</strong></li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 创建日期</span><br><span class="line">updated: 更新日期</span><br><span class="line">cover: 文章封面</span><br><span class="line">description: 文章描述</span><br><span class="line"><span class="section">swiper<span class="emphasis">_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure><p><img src="/../upload/mogai5/3.png" alt="image"></p><blockquote><p>这篇博客引用了作者为”<strong>Akilar</strong>“的文章<br>原文链接为:<a href="https://akilar.top/posts/8e1264d1/">Swiper Bar</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(2)-事件处理</title>
      <link href="/2022/08/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2022/08/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue中的事件处理"><a href="#1-Vue中的事件处理" class="headerlink" title="1.Vue中的事件处理"></a>1.Vue中的事件处理</h1><h2 id="Vue中事件的基本使用"><a href="#Vue中事件的基本使用" class="headerlink" title="Vue中事件的基本使用:"></a>Vue中事件的基本使用:</h2><ul><li><strong>1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</strong></li><li><strong>2.事件的回调需要配置在methods对象中，最终会在vm上；不要放在data{}里面,这样就会将回调函数做一次数据代理,降低效率(回调函数不需要数据代理)</strong></li><li><strong>3.methods中配置的函数，不要用箭头函数！否则this就不是vm了；(箭头函数没有this指向,他会向上指向Windows)</strong></li><li><strong>4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；</strong></li><li><strong>5.@click&#x3D;”demo” 和 @click&#x3D;”demo($event)” 效果一致，但后者更灵活可以传递其他参数!前者一传递其他参数就会丢失 event 事件对象；</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 1.完整写法 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 2.简洁写法 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1（不传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 传参 关键词:$event 用于保留点击事件,后面再传入其他的参数 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 属性配置项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 方法配置项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;<span class="comment">//这里不能用箭头函数,因为箭头函数没有this,他会指向windows</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerText</span>)<span class="comment">//点我提示信息1（不传参）,目标标签的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//此处的this是vm</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">showInfo2</span>(<span class="params">event,number</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(event,number)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(event.target.innerText)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//此处的this是vm</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！！&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V2/1.png" alt="image"><br><img src="/../upload/Vue/V2/2.png" alt="image"></p><h1 id="2-事件修饰符"><a href="#2-事件修饰符" class="headerlink" title="2.事件修饰符"></a>2.事件修饰符</h1><h2 id="Vue中的事件修饰符："><a href="#Vue中的事件修饰符：" class="headerlink" title="Vue中的事件修饰符："></a>Vue中的事件修饰符：</h2><ul><li><strong>1.prevent：阻止默认事件（常用）；</strong></li><li><strong>2.stop：阻止事件冒泡（常用）；</strong></li><li><strong>3.once：事件只触发一次（常用）；</strong></li><li><strong>4.capture：使用事件的捕获模式；(事件的执行顺序一般有两个:先捕获在冒泡,冒泡为执行)</strong></li><li><strong>5.self：只有event.target是当前操作的元素时才触发事件；</strong></li><li><strong>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；(用的不多,一般用于移动端开发)</strong></li></ul><h3 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子:"></a>代码例子:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--1. 阻止默认事件（常用） --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息(阻止事件默认行为,这里阻止a标签跳转)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--2. 阻止事件冒泡（常用） --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>冒泡上来再执行一次</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息(阻止冒泡)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- 修饰符可以连续写 即禁止默认行为,又阻止冒泡--&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--3. 事件只触发一次（常用） --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息(事件触发一次)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--4. 使用事件的捕获模式(在捕获过程就执行回调,一般情况下是先捕获再冒泡(执行回调)) --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            div1</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                div2</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--5. 只有event.target是当前操作的元素时才触发事件； --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 加上.self后,就显示一个&lt;button&gt;点我提示信息&lt;/button&gt;,因为冒泡上去的回调不会执行了,event.target是指向button的不是指向div的 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- 这里会通过冒泡冒上去显示两个&lt;button&gt;点我提示信息&lt;/button&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--6. 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   <span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                       <span class="comment">// alert(&#x27;同学你好！&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                       <span class="comment">// console.log(&#x27;跳转已阻止&#x27;);//.prevent例子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">//console.log(&#x27;冒泡以阻止&#x27;);//.stop例子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我只出现一次哦!&#x27;</span>);<span class="comment">//.once例子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">// console.log(e.target)//.self例子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">showMsg</span>(<span class="params">msg</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 执行顺序一般是先只想玩回调函数,再执行事件,这里即先计算完循环,滚动在移动(wheel)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">demo</span>(<span class="params"></span>)&#123;<span class="comment">//给回调的执行添加时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;累坏了&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="运行结果：（这里子展示常用的三种）"><a href="#运行结果：（这里子展示常用的三种）" class="headerlink" title="运行结果：（这里子展示常用的三种）"></a>运行结果：（这里子展示常用的三种）</h3><ul><li><strong>1.阻止默认事件(常用) .prevent</strong><br><img src="/../upload/Vue/V2/3.png" alt="image"></li><li><strong>2.阻止时间冒泡(常用) .stop</strong><br><img src="/../upload/Vue/V2/4.png" alt="image"><br><img src="/../upload/Vue/V2/5.png" alt="image"><br><img src="/../upload/Vue/V2/6.png" alt="image"></li><li><strong>3.事件只触发一次(常用) .once</strong><br><img src="/../upload/Vue/V2/8.png" alt="image"></li></ul><h1 id="3-键盘事件"><a href="#3-键盘事件" class="headerlink" title="3.键盘事件"></a>3.键盘事件</h1><ul><li><strong>1.Vue中常用的按键别名：(常用的记下面这几个即可,并且可以连续使用,如我想当按下a和b时启用就:keydown.a.b)</strong><ul><li><strong>回车 &#x3D;&gt; enter</strong></li><li><strong>删除 &#x3D;&gt; delete (捕获“删除”和“退格”键)</strong></li><li><strong>退出 &#x3D;&gt; esc</strong></li><li><strong>空格 &#x3D;&gt; space</strong></li><li><strong>换行 &#x3D;&gt; tab (特殊，必须配合keydown去使用,因为tab键的共嗯那个是切换焦点)</strong></li><li><strong>上 &#x3D;&gt; up</strong></li><li><strong>下 &#x3D;&gt; down</strong></li><li><strong>左 &#x3D;&gt; left</strong></li><li><strong>右 &#x3D;&gt; right</strong></li></ul></li><li><strong>2.Vue未提供别名的按键，可以使用按键原始的e.key,e.keyCode去查找对应的键名和键码,例如 capslock(大写锁定)，对应的键名:CapsLock 键码:20,但注意 出现驼峰命名法的键名应该使用 短横线命名法 去更改 即将 CapsLock 改为 caps-lock</strong></li><li><strong>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</strong><ul><li><strong>(1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</strong></li><li><strong>(2).配合keydown使用：正常触发事件。</strong></li></ul></li><li><strong>4.也可以使用keyCode去指定具体的按键（不推荐,以后这个特性可能会被移除,并且每一个键盘上的按键所指定的键值可能不一样）</strong></li><li><strong>5.Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名(一般也不推荐去使用)</strong></li></ul><h3 id="代码例子-1"><a href="#代码例子-1" class="headerlink" title="代码例子:"></a>代码例子:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keydown.caps-lock</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">huiche</span> = <span class="number">13</span> <span class="comment">//定义了一个别名按键,名为回车,这样就课题通过.huizhe来监听事件了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// console.log(e.key,e.keyCode)//通过这个来查找对应按键的键名和键码,比如capslock 对应的键名:CapsLock 键码:20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="这里就展示-获取capslock的按键键名和键码吧"><a href="#这里就展示-获取capslock的按键键名和键码吧" class="headerlink" title="这里就展示 获取capslock的按键键名和键码吧!"></a>这里就展示 获取capslock的按键键名和键码吧!</h3><p><img src="/../upload/Vue/V2/7.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 事件处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 中的 event</title>
      <link href="/2022/08/02/js%E4%B8%AD%E7%9A%84event/"/>
      <url>/2022/08/02/js%E4%B8%AD%E7%9A%84event/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JavaScript中的event事件-鼠标事件，键盘事件，HTML事件"><a href="#1-JavaScript中的event事件-鼠标事件，键盘事件，HTML事件" class="headerlink" title="1.JavaScript中的event事件(鼠标事件，键盘事件，HTML事件)"></a>1.JavaScript中的event事件(鼠标事件，键盘事件，HTML事件)</h1><h2 id="1-鼠标事件"><a href="#1-鼠标事件" class="headerlink" title="(1). 鼠标事件"></a>(1). <strong>鼠标事件</strong></h2><ul><li><strong>鼠标按下 onmousedown</strong></li><li><strong>鼠标弹起 onmouseup</strong></li><li><strong>鼠标移出 onmouseout</strong></li><li><strong>鼠标移进 onmouseover</strong></li><li><strong>鼠标移动 onmousemove</strong></li><li><strong>鼠标悬停 onmouseenter</strong></li><li><strong>鼠标取消悬停 onmouseleave</strong></li></ul><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标按下了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标弹起了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="property">onmouseout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标移出了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标移进了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="property">onmouseenter</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标悬停了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="property">onmouseleave</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标取消悬停了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mouseover-和-mouseenter的区别是："><a href="#mouseover-和-mouseenter的区别是：" class="headerlink" title="mouseover 和 mouseenter的区别是："></a>mouseover 和 mouseenter的区别是：</h3><ul><li><ol><li><strong>mouseover：元素的子元素移入也会触发事件 （子元素会触发第二次）</strong></li></ol></li><li><ol start="2"><li><strong>mouseenter： 元素的子元素移入不会触发事件 （子元素不会触发)</strong></li></ol></li></ul><h2 id="2-键盘事件"><a href="#2-键盘事件" class="headerlink" title="(2). 键盘事件"></a>(2). <strong>键盘事件</strong></h2><ul><li><strong>键盘按下：onkeydown</strong></li><li><strong>键盘弹起： onkeyup</strong></li><li><strong>按下之后弹起之前：onkeypress</strong></li></ul><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;键盘按下&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onkeyup</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;键盘弹起&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onkeypress</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按下之后弹起之前&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-HTML事件"><a href="#3-HTML事件" class="headerlink" title="(3). HTML事件"></a>(3). <strong>HTML事件</strong></h2><ul><li><strong>页面加载事件：onload 提交按钮触发事件，一般应用于元素表单form</strong></li><li><strong>失去焦点事件：onblur</strong></li><li><strong>获取焦点事件：onfocus（常用于input）</strong></li></ul><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面加载了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;form&#x27;</span>).<span class="property">onsubmit</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;提交了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">onfocus</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取焦点&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失去焦点&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-补充html方法（重点）"><a href="#4-补充html方法（重点）" class="headerlink" title="(4).补充html方法（重点）"></a>(4).<strong>补充html方法（重点）</strong></h2><ul><li><strong>onchange 修改  当里面的值value发生变化以后 失去焦点的时候触发  加给表单元素</strong></li><li><strong>onscroll 滚动栏滚动</strong></li><li><strong>onselect 选择 (一般用于复制粘贴 input textarea)</strong></li></ul><h3 id="代码展示-3"><a href="#代码展示-3" class="headerlink" title="代码展示:"></a>代码展示:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">text.<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改事件&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> scroll = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(srcoll);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textarea = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;textarea&#x27;</span>)</span><br><span class="line">textarea.<span class="property">onselect</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;选择了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-event的相关属性和方法："><a href="#2-event的相关属性和方法：" class="headerlink" title="2.event的相关属性和方法："></a>2.event的相关属性和方法：</h1><ul><li><p><strong>event对象是事件源触发事件后传递给事件处理程序的对象，位于事件处理函数参数的第一个位置，携带着很多有用的信息。</strong></p></li><li><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>返回事件类型的字符串</td></tr><tr><td>target&#x2F;srcElement(ie)</td><td>返回触发事件的dom元素</td></tr><tr><td>currentTarget</td><td>返回绑定事件的dom元素，等同于this</td></tr><tr><td>relatedTarget&#x2F;fromElement(ie)</td><td>返回鼠标移入移出时临近绑定事件元素的那个dom元素</td></tr><tr><td>data</td><td>传递给事件的额外数据。格式：数字，字符串，数组，obj</td></tr><tr><td>pageX&#x2F;pageY</td><td>相对于页面原点(document)的水平&#x2F;垂直位置</td></tr><tr><td>screenX&#x2F;screenY</td><td>相对于显示器屏幕的水平&#x2F;垂直位置</td></tr><tr><td>clientX&#x2F;clientY</td><td>相对于页面视口(可见窗口)的水平&#x2F;垂直位置</td></tr><tr><td>timeStamp</td><td>触发事件的时间戳</td></tr><tr><td>button</td><td>左中右键(012)</td></tr><tr><td>which</td><td>获取鼠标点击事件或键盘事件对应的左中右键(123)或键盘码</td></tr><tr><td>keyCode</td><td>键盘事件的键盘码</td></tr><tr><td>crtlKey&#x2F;shiftKey&#x2F;altKey</td><td>目标按钮</td></tr></tbody></table></li><li><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>stopPropagation()</td><td>阻止冒泡</td></tr><tr><td>prevetDefault()</td><td>阻止网页默认行为：超链接调转、submit的提交，文本输入</td></tr></tbody></table></li></ul><h3 id="1-鼠标的事件源对象"><a href="#1-鼠标的事件源对象" class="headerlink" title="1.鼠标的事件源对象"></a>1.鼠标的事件源对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">e = e || <span class="variable language_">window</span>.<span class="property">event</span> <span class="comment">//e表示事件源对象</span></span><br><span class="line">    <span class="comment">//鼠标点击的键 button 0表示左键  1表示滚轮  2表示右键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">button</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>); <span class="comment">//目标元素 显示是div </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">type</span>); <span class="comment">//事件类型 click </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">x</span>); <span class="comment">//获取鼠标的x坐标 基于可视区域 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">y</span>); <span class="comment">//获取鼠标的y坐标 基于可视区域 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageX</span>); <span class="comment">//获取鼠标的x坐标 基于页面的可视区域 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageY</span>); <span class="comment">//获取鼠标的y坐标 基于页面的可视区域 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetX</span>); <span class="comment">// 获取鼠标的x坐标 基于div偏移的x 离div这个盒子的左上角顶点 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetY</span>); <span class="comment">// 获取鼠标的y坐标 基于div偏移的y 离div这个盒子的左上角顶点 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenX</span>); <span class="comment">//screen获取屏幕信息 在屏幕上的x </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenY</span>); <span class="comment">//screen获取屏幕信息 在屏幕上的y </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>); <span class="comment">//获取鼠标的x坐标 基于当前可视区域的x  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientY</span>); <span class="comment">//获取鼠标的x坐标 基于当前可视区域的y  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">path</span>); <span class="comment">//元素路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">ctrlKey</span>); <span class="comment">//判断是否按着ctrl键 按着为true 没有为false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">shiftKey</span>); <span class="comment">//判断是否按着shift键 按着为true 没有为false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">altKey</span>); <span class="comment">//判断是否按着alt键 按着为true 没有为false </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-键盘的事件源对象"><a href="#2-键盘的事件源对象" class="headerlink" title="2.键盘的事件源对象"></a>2.键盘的事件源对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">e = e || <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">key</span>); <span class="comment">//获取按键的值 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">code</span>); <span class="comment">//获取按键 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">keyCode</span>); <span class="comment">//获取按键的ascii码 不区分大小写（只返回大写）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(); <span class="comment">//判断是否按着ctrl键 按着为true 没有为false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">shiftKey</span>); <span class="comment">//判断是否按着shift键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">altKey</span>); <span class="comment">//判断是否按着alt键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">charCode</span>); <span class="comment">//字符编码 只有在按字符的时候才有 一般是加给keypress事件</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>); <span class="comment">//目标元素 显示是body</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">type</span>); <span class="comment">//事件类型 keyDown</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在弹起之间按下之后-针对字符按键-charCode只在这里有效（其他按键不会执行）"><a href="#3-在弹起之间按下之后-针对字符按键-charCode只在这里有效（其他按键不会执行）" class="headerlink" title="3.在弹起之间按下之后 针对字符按键 charCode只在这里有效（其他按键不会执行）"></a>3.在弹起之间按下之后 针对字符按键 charCode只在这里有效（其他按键不会执行）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onkeypress</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">charCode</span>); <span class="comment">//他会返回对应的字符的编码 ascii码   区分大小写 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这篇博客引用了作者为”<strong>乐之者java</strong>“以及”<strong>快乐的小火猴</strong>“的文章<br>原文链接为:<a href="https://blog.csdn.net/xiaozhuangyumaotao/article/details/106348849?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-106348849-blog-112388930.pc_relevant_multi_platform_featuressortv2removedup&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-106348849-blog-112388930.pc_relevant_multi_platform_featuressortv2removedup&utm_relevant_index=1">CSDN-乐之者java</a> , <a href="https://blog.csdn.net/look857857/article/details/123806778">CSDN-快乐的小火猴</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> event事件以及它的事件对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(1)-模板语法,数据绑定以及数据代理</title>
      <link href="/2022/08/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
      <url>/2022/08/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-模板语法"><a href="#1-模板语法" class="headerlink" title="1.模板语法"></a>1.模板语法</h1><h2 id="什么是模板"><a href="#什么是模板" class="headerlink" title="什么是模板?"></a>什么是模板?</h2><ul><li><strong>Root容器中的代码就被称为Vue的模板，每当我们引入Vue.js过后,全局就多了一个名为Vue的构造函数.</strong></li><li><strong>模板语法一般分为两种:</strong><ul><li><strong>1.插值语法(一定要切记,使用模板语法过后,语法包括的值就不再是字符串..他就是js表达式了)</strong><ul><li><strong>功能：用于解析标签体内容。(就是起始标签和结束标签包括的内容)</strong></li><li><strong>写法：，xxx是js表达式，且可以直接读取到data中的所有属性。</strong></li></ul></li><li><strong>2.指令语法</strong><ul><li><strong>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。</strong></li><li><strong>举例：v-bind:href&#x3D;”xxx” 或  简写为 :href&#x3D;”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</strong></li></ul></li><li><strong>备注:Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--重点: 一旦使用了指令语法,那么后面的属性值就有字符串(数值)变成了js表达式 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 完整写法 此时这里的 school.url.toUpperCase() 就是js表达式 并非字符串 读取url变量--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;school.url.toUpperCase()&quot;</span> <span class="attr">x</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 简洁写法(省略v-bind) --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;school.url&quot;</span> <span class="attr">x</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>:<span class="string">&#x27;zpl&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">school</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">url</span>:<span class="string">&#x27;https://www.wyu.edu.cn/&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V1/1.png" alt="image"></p><h1 id="2-数据绑定"><a href="#2-数据绑定" class="headerlink" title="2.数据绑定"></a>2.数据绑定</h1><ul><li><strong>单向数据绑定: v-bind</strong><ul><li><strong>数据只能从data流向页面。</strong></li></ul></li><li><strong>双向数据绑定: v-model</strong><ul><li><strong>数据不仅能从data流向页面，还可以从页面流向data。</strong></li></ul></li><li><strong>备注:只能用于表单类元素(输入类元素,就是要有value值才行,类似h标签不适用)上,如input,select等…,v-model可以简化为:v-model,因为v-model就是默认收集value值</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 普通写法 --&gt;</span><br><span class="line">        &lt;!-- 单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">        双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 简写 --&gt;</span><br><span class="line">        单向数据绑定：&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">        双向数据绑定：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">        &lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素上 --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line">    </span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name : &#x27;五邑大学&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="单向数据绑定运行结果"><a href="#单向数据绑定运行结果" class="headerlink" title="单向数据绑定运行结果:"></a>单向数据绑定运行结果:</h3><p><img src="/../upload/Vue/V1/2.png" alt="image"></p><h3 id="双向数据绑定运行结果"><a href="#双向数据绑定运行结果" class="headerlink" title="双向数据绑定运行结果:"></a>双向数据绑定运行结果:</h3><p><img src="/../upload/Vue/V1/3.png" alt="image"></p><h1 id="3-el和data的两种写法"><a href="#3-el和data的两种写法" class="headerlink" title="3.el和data的两种写法"></a>3.el和data的两种写法</h1><ul><li><ol><li><strong>el的两种写法:</strong></li></ol><ul><li><strong>(1).new Vue时候配置el属性。</strong></li><li><strong>(2).先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</strong></li></ul></li><li><ol start="2"><li><strong>data的两种写法</strong></li></ol><ul><li><strong>(1).对象式</strong></li><li><strong>(2).函数式</strong></li><li><strong>如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。(不能使用箭头函数)</strong></li></ul></li><li><ol start="3"><li><strong>一个重要的原则：</strong></li></ol><ul><li><strong>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。(因为箭头函数没有this,他会向上指向windows)</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="line">    <span class="comment">//el的两种写法</span></span><br><span class="line">    <span class="comment">/* const v = new Vue(&#123;</span></span><br><span class="line"><span class="comment">        //el:&#x27;#root&#x27;, //第一种写法</span></span><br><span class="line"><span class="comment">        data:&#123;</span></span><br><span class="line"><span class="comment">            name:&#x27;尚硅谷&#x27;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    console.log(v)</span></span><br><span class="line"><span class="comment">    v.$mount(&#x27;#root&#x27;) //第二种写法(更为灵活) */</span></span><br><span class="line">    <span class="comment">//data的两种写法</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="comment">//data的第一种写法：对象式</span></span><br><span class="line">        <span class="comment">/* data:&#123;</span></span><br><span class="line"><span class="comment">            name:&#x27;尚硅谷&#x27;</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line">    <span class="comment">//data的第二种写法：函数式 (不能用箭头函数,因为箭头函数没有this,会向上指向windows)</span></span><br><span class="line">            <span class="title function_">data</span>(<span class="params"></span>)&#123; <span class="comment">//这里因为是对象函数,可以省略function和冒号:</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@@@&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">//此处的this是Vue实例对象</span></span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;五邑大学&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V1/4.png" alt="image"></p><h1 id="4-理解MVVM模型-Model-View-ViewModel"><a href="#4-理解MVVM模型-Model-View-ViewModel" class="headerlink" title="4.理解MVVM模型(Model-View-ViewModel)"></a>4.理解MVVM模型(Model-View-ViewModel)</h1><ul><li><strong>1.M：模型(Model) ：对应data 中的数据</strong></li><li><strong>2.V：视图(View) ：模板</strong></li><li><strong>3.VM：视图模型(ViewModel) ： Vue 实例对象</strong></li></ul><h3 id="具体模型图"><a href="#具体模型图" class="headerlink" title="具体模型图"></a>具体模型图</h3><p><img src="/../upload/Vue/V1/5.png" alt="image"></p><h3 id="代码解析图如下"><a href="#代码解析图如下" class="headerlink" title="代码解析图如下"></a>代码解析图如下</h3><p><img src="/../upload/Vue/V1/6.png" alt="image"></p><h3 id="发现"><a href="#发现" class="headerlink" title="发现:"></a>发现:</h3><ul><li><strong>1.data中所有的属性，最后都出现在了vm身上</strong></li><li><strong>2.vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</strong></li></ul><h1 id="5-数据代理"><a href="#5-数据代理" class="headerlink" title="5.数据代理"></a>5.数据代理</h1><h2 id="1-回顾Object-defineProperty-函数的用法"><a href="#1-回顾Object-defineProperty-函数的用法" class="headerlink" title="1.回顾Object.defineProperty()函数的用法:"></a>1.回顾Object.defineProperty()函数的用法:</h2><ul><li><strong>Object.defineProperty()函的用法，顾名思义，这个方法就是给对象添加属性的，在Vue的底层，很多都用到这个方法，如数据劫持，数据代理，计算属性等…</strong></li><li><strong>语法:</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">语法格式:</span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,prop,description)</span><br><span class="line">        </span><br><span class="line">   <span class="attr">obj</span>: 必须 目标对象</span><br><span class="line">   <span class="attr">prop</span>: 必须 需要定义或修改的属性名字(你要修改的是哪一个属性)</span><br><span class="line">   <span class="attr">description</span>: 必须 目标属性所拥有的特性 (要改的属性有什么样的特性,说明,属性值),一般为对象形式</span><br><span class="line"></span><br><span class="line">   description的常用属性值:</span><br><span class="line">   <span class="number">1.</span><span class="attr">value</span>: 设置属性的值  默认为<span class="literal">undefined</span></span><br><span class="line">   <span class="number">2.</span><span class="attr">writable</span>: 值是否可以重写。<span class="literal">true</span> | <span class="literal">false</span>  默认为<span class="literal">false</span></span><br><span class="line">   <span class="number">3.</span><span class="attr">enumerable</span>: 目标属性是否可以被枚举。<span class="literal">true</span> | <span class="literal">false</span> 默认为 <span class="literal">false</span></span><br><span class="line">   <span class="number">4.</span><span class="attr">configurable</span>: 目标属性是否可以被删除或是否可以再次修改特性 <span class="literal">true</span> | <span class="literal">false</span>  默认为<span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//Object.defineProperty()方法用于定义新属性或修改原有的属性值</span></span><br><span class="line">    <span class="comment">// 先创建一个对象</span></span><br><span class="line">    <span class="keyword">let</span> a = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Cheung Pui Lam&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&#x27;五邑大学&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 常用的添加属性的方法1</span></span><br><span class="line">    a.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    a.<span class="property">subject</span> = <span class="string">&#x27;电子信息工程&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常用的添加属性的方法2-Object.defineProperty()</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a , <span class="string">&#x27;age&#x27;</span> , &#123;<span class="comment">//这里将 age 这个属性改为了18</span></span><br><span class="line">        <span class="comment">//1.value: 设置或修改属性的值  默认为undefined</span></span><br><span class="line">        value : <span class="number">18</span>,</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//2.writable: 值是否可以重写。true | false  默认为false</span></span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">false</span>,<span class="comment">//此时的age就不能被修改了!</span></span><br><span class="line">        <span class="comment">// 3.enumerable: 目标属性是否可以被枚举(就是遍历)。true | false 默认为 false</span></span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">false</span>,<span class="comment">//此时这个age属性就无法被枚举(遍历)了!</span></span><br><span class="line">        <span class="comment">// 4.configurable: 目标属性是否可以被删除或是否可以再次修改特性 true | false  默认为false</span></span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">false</span><span class="comment">//表示现在的 age 属性不能被删除和修改特性(后面不能再修改)</span></span><br><span class="line">        &#125;)</span><br><span class="line">        a.<span class="property">age</span> = <span class="number">10</span>;<span class="comment">//age依然是 18  =&gt; 对应的是 writable: false 属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(a));<span class="comment">//使用keys()方法来遍历,没有出现 age属性 =&gt; 对应 enumerable: false 属性</span></span><br><span class="line">        <span class="keyword">delete</span> a.<span class="property">age</span>;<span class="comment">//但是结果依然有age属性 =&gt; 对应 configurable: true 属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V1/7.png" alt="image"></p><h2 id="2-Object-defineProperty-函数的高级用法"><a href="#2-Object-defineProperty-函数的高级用法" class="headerlink" title="2.Object.defineProperty()函数的高级用法"></a>2.Object.defineProperty()函数的高级用法</h2><ul><li><strong>这里介绍 Object.defineProperty() 方法的两个高级用法(内置的get() 和 set() 方法)</strong><ul><li><strong>1.get() 方法:当有人读取目标对象的某一个属性时,就会执行这个该函数,且返回值就是目标属性(该属性)的值</strong></li><li><strong>set() 方法:当有人修改目标对象的某一个属性时,就会执行这个该函数,且返回值就是目标属性(该属性)的值</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">    <span class="comment">//Object.defineProperty()方法用于定义新属性或修改原有的属性值</span></span><br><span class="line">    <span class="comment">// 先创建一个对象</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">20</span>;<span class="comment">//这里设置一个冰凉用于传递和接收 age属性的属性值 </span></span><br><span class="line">    <span class="keyword">let</span> a = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Cheung Pui Lam&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: num,</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&#x27;五邑大学&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常用的添加属性的方法2-Object.defineProperty()</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a , <span class="string">&#x27;age&#x27;</span> , &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;<span class="comment">//每当读取 age属性(目标属性)时就会调用这个函数</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;给属性被读取了!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> num;<span class="comment">//一定要有返回值</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;<span class="comment">//每当修改 age属性(目标属性)时就会调用这个函数</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;该属性被修改了!,且该属性值是&#x27;</span>, value );</span><br><span class="line">            num = value</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V1/8.png" alt="image"><br><img src="/../upload/Vue/V1/9.png" alt="image"></p><h2 id="2-理解数据代理"><a href="#2-理解数据代理" class="headerlink" title="2.理解数据代理"></a>2.理解数据代理</h2><ul><li><strong>所谓的数据代理,实际上就是通过一个对象代理另一个对象中属性的操作(读&#x2F;写),说白了就是通过 对象1 操作 对象2, 对象1 能够访问和修改 对象2 的一些属性和方法</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;<span class="comment">//给obj2添加一个x属性,返回的是obj的x值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">get</span>(<span class="params"></span>)&#123;<span class="comment">//每当读取obj2中的x属性就会返回obj的x值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> obj.<span class="property">x</span><span class="comment">//这里相当于给obj2添加属性 x:100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">set</span>(<span class="params">value</span>)&#123;<span class="comment">//每当修改obj2的x值,就会将该值传递给obj的x</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                obj.<span class="property">x</span> = value</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(obj,obj2);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V1/10.png" alt="image"><br><img src="/../upload/Vue/V1/11.png" alt="image"><br><strong>表示了我们可以通过obj2一样可以操作obj,这就是数据代理</strong></p><h2 id="3-Vue当中是如何应用数据代理的？"><a href="#3-Vue当中是如何应用数据代理的？" class="headerlink" title="3.Vue当中是如何应用数据代理的？"></a>3.Vue当中是如何应用数据代理的？</h2><ul><li><strong>就拿插值语法来讲，我们在实例化对象的时候会在Vue构造函数中传入data{}对象，给里面填入一些属性，而这些属性在实例化对象的时候就通过数据代理的方式传送给实例化对象</strong></li></ul><h3 id="原理如图所示"><a href="#原理如图所示" class="headerlink" title="原理如图所示:"></a>原理如图所示:</h3><p><img src="/../upload/Vue/V1/12.png" alt="image"></p><ul><li><strong>代码解析:</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">    <span class="number">1.</span><span class="title class_">Vue</span>中的数据代理：</span><br><span class="line">        通过vm对象来代理data对象中属性的操作（读/写）</span><br><span class="line">    <span class="number">2.</span><span class="title class_">Vue</span>中数据代理的好处：</span><br><span class="line">        更加方便的操作data中的数据</span><br><span class="line">    <span class="number">3.</span>基本原理：</span><br><span class="line">        通过<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>()把data对象中所有属性添加到vm上。</span><br><span class="line">        为每一个添加到vm上的属性，都指定一个getter/setter。</span><br><span class="line">        在getter/setter内部去操作（读/写）data中对应的属性。</span><br><span class="line">      --&gt;</span><br><span class="line">     &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;school&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">name</span>:<span class="string">&#x27;zpl&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">school</span>:<span class="string">&#x27;五邑大学&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(vm);<span class="comment">//输出实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">name</span> === vm.<span class="property">_data</span>.<span class="property">name</span>);<span class="comment">//true,说明原Vue构造函数里面的data就是vm里面的_data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/Vue/V1/13.png" alt="image"></p><blockquote><p>这类Vue博客是博主在学习”<strong>尚硅谷</strong>“的Vue教程记录的一些代码笔记以及心得<br>教程链接为:<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1&vd_source=eeca4958b140403ede65df6022e4b306">BiliBli</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
            <tag> 模板语法,数据绑定,数据代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数和原型(2)-继承和类</title>
      <link href="/2022/07/29/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B2/"/>
      <url>/2022/07/29/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B2/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h1 id="1-call-方法介绍"><a href="#1-call-方法介绍" class="headerlink" title="1.call()方法介绍"></a>1.call()方法介绍</h1><ul><li><strong>ES6之前并没有给我们提供 extends 继承。我们可以通过构造函数+原型对象模拟实现继承，被称为组合继承。</strong></li><li><strong>Call()方法的作用:</strong><ul><li><strong>1.调用指向函数</strong></li><li><strong>2.修改函数的this指向</strong></li></ul></li><li><strong>语法格式:</strong><ul><li><strong>fun.call(thisArg, arg1, arg2, …)</strong></li><li><strong>1.thisArg ：当前调用函数 this 的指向对象</strong></li><li><strong>2.arg1，arg2：传递的其他参数</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// call 方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我想喝手磨咖啡&#x27;</span>);<span class="comment">//正常输出我想喝手磨咖啡</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//window</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);<span class="comment">//NaN,这时添加参数</span></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// fn();</span></span><br><span class="line"><span class="comment">// 1. call() 可以调用函数</span></span><br><span class="line">fn.<span class="title function_">call</span>();<span class="comment">//与fun();的结果一致,表示call()方法也有函数调用的功能</span></span><br><span class="line"><span class="comment">// 2. call() 可以改变这个函数的this指向 此时这个函数的this 就指向了o这个对象</span></span><br><span class="line"><span class="comment">//原本这个函数的指向应该是window,现在改了滞后它就指向o这个对象了</span></span><br><span class="line">fn.<span class="title function_">call</span>(o, <span class="number">1</span>, <span class="number">2</span>);<span class="comment">//3 这时又参数传进来了</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/prototype/12.png" alt="image"></p><h1 id="2-借用构造函数继承父类型属性"><a href="#2-借用构造函数继承父类型属性" class="headerlink" title="2.借用构造函数继承父类型属性"></a>2.借用构造函数继承父类型属性</h1><ul><li><strong>核心原理： 通过 call() 把父类型的 this 改为指向子类型的 this ，这样就可以实现子类型继承父类型的属性。</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 借用父构造函数继承属性</span></span><br><span class="line"> <span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里的 this 指向父构造函数的对象实例</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 .子构造函数 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里的 this 指向子构造函数的对象实例</span></span><br><span class="line">    <span class="comment">// 因为我们知道call()方法是可以修改指定函数的this指向的</span></span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age);<span class="comment">//这里将Father的中的this指向改为了子构造函数中的this指向(即这里的this是子构造函数的this指向)</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">score</span> = score;<span class="comment">//给子构造函数创建一个新的属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son);<span class="comment">//后面是可以正常输出结果的</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/prototype/13.png" alt="image"></p><h1 id="3-借用原型对象继承父类型方法"><a href="#3-借用原型对象继承父类型方法" class="headerlink" title="3.借用原型对象继承父类型方法"></a>3.借用原型对象继承父类型方法</h1><ul><li><strong>一般情况下，对象的方法都在构造函数的原型对象中设置，通过构造函数无法继承父类方法。</strong><h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理:"></a>核心原理:</h3><ul><li><strong>1.将子类所共享的方法提取出来，让子类的 prototype 原型对象 &#x3D; new 父类()</strong></li><li><strong>2.本质：子类原型对象等于是实例化父类，因为父类实例化之后另外开辟空间，就不会影响原来父类原型对象</strong></li><li><strong>3.将子类的 constructor 从新指向子类的构造函数</strong><br><img src="/../upload/prototype/14.png" alt="image"></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 借用父构造函数继承属性</span></span><br><span class="line"><span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">money</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 .子构造函数 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span><br><span class="line">    <span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span>;</span><br><span class="line"><span class="comment">// 这个是子构造函数专门的方法</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">exam</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;孩子要考试&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son);<span class="comment">//里面具有自己设置的exam方法也有沿着原型链向上查找的money方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//里面只有公共方法money,表示son添加的方法并没用影响到Father</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);<span class="comment">//利用constructor指回Son原型对象</span></span><br></pre></td></tr></table></figure><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/prototype/15.png" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><ul><li><strong>我们可以通过原型对象来继承方法,因为我们知道,共享的方法是写在原型对象里面的,这里的Father原型对象里面有一个money的方法,那我们的子构造函数怎样去使用这个money方法呢?这里我们不能直接利用子原型对象&#x3D;父原型对象这种方法,因为如果这样的话,你一旦修改了子原型对象,那么父原型对象也会跟着一起被修改,所以这里我们需要将构造函数实例化,创建一个实例化对象,让我们的子原型对象指向这个实例化对象,但这个实例化对象里面有一个属性:__proto__指向Father的原型对象的,所以我们的子原型对象是可以拿到这个money方法的并且无论我怎样修改子原型对象都不会影响到父原型对象,因为这里的子原型对象是指向实例化对象的,实例化对象和原型对象的地址是不一样的</strong></li></ul><h1 id="4-ES6类的本质"><a href="#4-ES6类的本质" class="headerlink" title="4.ES6类的本质"></a>4.ES6类的本质</h1><ul><li><strong>类的本质是一个函数,类实质上就是ES5当中的构造函数,基本上是一模一样的,我们看下面的代码和结果展示:</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 之前通过 构造函数+ 原型实现面向对象 编程</span></span><br><span class="line"><span class="comment">// (1) 构造函数有原型对象prototype </span></span><br><span class="line"><span class="comment">// (2) 构造函数原型对象prototype 里面有constructor 指向构造函数本身</span></span><br><span class="line"><span class="comment">// (3) 构造函数可以通过原型对象添加方法</span></span><br><span class="line"><span class="comment">// (4) 构造函数创建的实例对象有__proto__ 原型指向 构造函数的原型对象</span></span><br><span class="line"><span class="comment">// ES6 通过 类 实现面向对象编程 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Star</span>);<span class="comment">//function 说明类的本质是一个函数</span></span><br><span class="line"><span class="comment">// 1. 类的本质其实还是一个函数 我们也可以简单的认为 类就是 构造函数的另外一种写法</span></span><br><span class="line"><span class="comment">// (1) 类有原型对象prototype </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//</span></span><br><span class="line"><span class="comment">// (2) 类原型对象prototype 里面有constructor 指向类本身</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);<span class="comment">//结果 class Star 指向类本身</span></span><br><span class="line"><span class="comment">// (3)类可以通过原型对象添加方法</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;冰雨&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(ldh);<span class="comment">//里面存在__proto__属性 , 和sing方法</span></span><br><span class="line"><span class="comment">// (4) 类创建的实例对象有__proto__ 原型指向 类的原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span> === <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/prototype/16.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> 面向对象 </category>
          
          <category> 原型和原型链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 构造函数和原型,原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数和原型(1)</title>
      <link href="/2022/07/29/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B1/"/>
      <url>/2022/07/29/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初识构造函数和原型"><a href="#1-初识构造函数和原型" class="headerlink" title="1.初识构造函数和原型"></a>1.初识构造函数和原型</h1><ul><li><strong>Es6以前我们面向对象是使用构造函数来实现的，将一些对象的公共方法和属性放在构造函数里面，再通过构造函数来实例化对象，这种方法虽然好用，但是存在问题：浪费内存</strong><br><img src="/../upload/prototype/1.png" alt="image"></li><li><strong>对象当中的属性还好说，但是方法(函数)是复杂是数据类型,当我们在创建对象的时候,这个方法会单独的再开辟一个内存空间,来存放这个复杂的数据类型,那么再次调用一个类来创建对象,他里面又有这个sing方法,那又会在开辟一个内存空间来存放这个方法(函数),就相当于开辟两个内存空间来存放相同的方法(函数),那么我有100实例对象呢?而且开辟内存空间还需要时间,如果实例对象过多就会大量的浪费时间</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印一下判断两个sing是否再同一个内存空间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sing</span> === zxy.<span class="property">sing</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">// 说明:构造函数每一次实例化都西昂都要开辟一块新的内存空间来存放公共方法(函数)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/prototype/2.png" alt="image"></p><h1 id="2-构造函数原型-prototype"><a href="#2-构造函数原型-prototype" class="headerlink" title="2.构造函数原型(prototype)"></a>2.构造函数原型(prototype)</h1><ul><li><strong>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象。注意这个 prototype 就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</strong></li><li><strong>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</strong></li></ul><h2 id="1-原型是什么-？"><a href="#1-原型是什么-？" class="headerlink" title="1.原型是什么 ？"></a>1.原型是什么 ？</h2><ul><li><strong>一个对象，是构造函数内置的一个对象,我们也称为 prototype 为原型对象。</strong></li></ul><h2 id="2-原型的作用是什么-？"><a href="#2-原型的作用是什么-？" class="headerlink" title="2.原型的作用是什么 ？"></a>2.原型的作用是什么 ？</h2><ul><li><strong>共享方法(将一些公共方法存进去解决构造函数内存浪费的问题)。</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 构造函数的问题. </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="comment">// this.sing = function() &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;我会唱歌&#x27;);</span></span><br><span class="line">     <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将公共方法(函数)放进构造函数的原型当中</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sing</span> === zxy.<span class="property">sing</span>);<span class="comment">//true 两个sing方法的地址一致</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Star</span>);<span class="comment">//prototpye中有sing方法</span></span><br><span class="line">ldh.<span class="title function_">sing</span>();</span><br><span class="line">zxy.<span class="title function_">sing</span>();</span><br><span class="line"><span class="comment">// 2. 一般情况下,我们的公共属性定义到构造函数里面, 公共的方法我们放到原型对象身上</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/prototype/3.png" alt="image"></p><h1 id="3-为什么实例化对象能够访问原型对象身上的prototype对象呢"><a href="#3-为什么实例化对象能够访问原型对象身上的prototype对象呢" class="headerlink" title="3.为什么实例化对象能够访问原型对象身上的prototype对象呢?"></a>3.为什么实例化对象能够访问原型对象身上的prototype对象呢?</h1><ul><li><strong>因为有__proto__的存在,实例化对象的身上都会有一个属性 <strong>proto</strong> 指向构造函数的 prototype 原型对象，之所以我们的实例化对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 <strong>proto</strong> 原型的存在。</strong><ul><li><strong>1.__proto__对象原型和原型对象 prototype 是等价的</strong></li><li><strong>2.__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性(赋值等操作)，它只是内部指向原型对象 prototype</strong><br><img src="/../upload/prototype/4.png" alt="image"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span><br><span class="line">ldh.<span class="title function_">sing</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh); <span class="comment">// 对象身上系统自己添加一个 __proto__ 指向我们构造函数的原型对象 prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span> === <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"><span class="comment">// 方法的查找规则: 首先先看ldh 对象身上是否有 sing 方法,如果有就执行这个对象上的sing</span></span><br><span class="line"><span class="comment">// 如果么有sing 这个方法,因为有__proto__ 的存在,就去构造函数原型对象prototype身上去查找sing这个方法</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/prototype/5.png" alt="image"></p><h1 id="4-constructor-构造函数"><a href="#4-constructor-构造函数" class="headerlink" title="4.constructor  构造函数"></a>4.constructor  构造函数</h1><ul><li><strong>对象原型（ __proto__）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。</strong></li><li><strong>constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</strong></li><li><strong>一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样赋值方法太过麻烦复杂,代码量多</span></span><br><span class="line"><span class="comment">// Star.prototype.sing = function() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;我会唱歌&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// Star.prototype.movie = function() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;我会演电影&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line"><span class="comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span></span><br><span class="line">    <span class="attr">constructor</span>: <span class="title class_">Star</span>,</span><br><span class="line">    <span class="attr">sing</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">movie</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会演电影&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//指向的是同一个对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span>);<span class="comment">//指向的是同一个对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);<span class="comment">//指向的是同一个对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span>.<span class="property">constructor</span>);<span class="comment">//指向的是同一个对象</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/prototype/6.png" alt="image"></p><h1 id="5-构造函数-实例话对象-原型对象三者之间的关系-箭头是指向关系"><a href="#5-构造函数-实例话对象-原型对象三者之间的关系-箭头是指向关系" class="headerlink" title="5.构造函数,实例话对象,原型对象三者之间的关系(箭头是指向关系)"></a>5.构造函数,实例话对象,原型对象三者之间的关系(箭头是指向关系)</h1><p><img src="/../upload/prototype/7.png" alt="image"></p><h1 id="6-原型链"><a href="#6-原型链" class="headerlink" title="6.原型链"></a>6.原型链</h1><ul><li><strong>只要是对象(原型对象也是对象),就会都会有一个原型(<strong>proto</strong>),这个原型指向的是原型对象(prototype),那么逐次查找,逐次指向就会产生一条路,这条路就是原型链</strong><br><img src="/../upload/prototype/8.png" alt="image"></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 1. 只要是对象就有__proto__ 原型, 指向原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>);<span class="comment">//指向的是)Object(大写的O)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"><span class="comment">// 2.我们Star原型对象里面的__proto__原型指向的是 Object.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>);<span class="comment">//null</span></span><br><span class="line"><span class="comment">// 3. 我们Object.prototype原型对象里面的__proto__原型  指向为 null</span></span><br></pre></td></tr></table></figure><h1 id="7-对象成员的查找规则-顺着原型链的指向-向上查找"><a href="#7-对象成员的查找规则-顺着原型链的指向-向上查找" class="headerlink" title="7.对象成员的查找规则(顺着原型链的指向,向上查找)"></a>7.对象成员的查找规则(顺着原型链的指向,向上查找)</h1><ul><li><strong>1.当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。(就近原则,先看看自己身上有没有,没有再向上查找)</strong></li><li><strong>2.如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。</strong></li><li><strong>3.如果还没有就查找原型对象的原型（Object的原型对象）。</strong></li><li><strong>4.依此类推一直找到 Object 为止（null）。</strong></li><li><strong>5.__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sex</span> = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="comment">// Object.prototype.sex = &#x27;男&#x27;;</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// ldh.sex = &#x27;男&#x27;;</span></span><br><span class="line"><span class="comment">// console.log(ldh.sex);//男,自己身上有</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sex</span>);<span class="comment">//女,自己身上没有,但是Star构造函数身上有</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//身上有toString()方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);<span class="comment">//此时身上没有sex属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//Star身上有sex属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="title function_">toString</span>());<span class="comment">//这里可以使用Object身上的toString方法</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/prototype/9.png" alt="image"><br><img src="/../upload/prototype/10.png" alt="image"></p><h1 id="8-对象原型还可以扩展内置对象"><a href="#8-对象原型还可以扩展内置对象" class="headerlink" title="8.对象原型还可以扩展内置对象"></a>8.对象原型还可以扩展内置对象</h1><ul><li><strong>可以通过原型对象，对原来的内置对象进行扩展自定义的方法。比如给数组增加自定义求偶数和的功能。</strong></li><li><strong>注意：数组和字符串内置对象不能给原型对象覆盖操作 Array.prototype &#x3D; {} ，只能是 Array.prototype.xxx &#x3D; function(){} 的方式。</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原型对象的应用 扩展内置对象方法</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        sum += <span class="variable language_">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 不能使用这种方法(这种方法相当于赋值,会覆盖掉原来的内置方法)</span></span><br><span class="line"><span class="comment">// Array.prototype = &#123;</span></span><br><span class="line"><span class="comment">//     sum: function() &#123;</span></span><br><span class="line"><span class="comment">//         var sum = 0;</span></span><br><span class="line"><span class="comment">//         for (var i = 0; i &lt; this.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//             sum += this[i];</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return sum;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sum</span>());<span class="comment">//6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//里面有sum()方法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>);<span class="comment">//实例化内置对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">sum</span>());<span class="comment">//66,证明可以调用内置对象中新增的sum方法</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-里面存在sum-方法"><a href="#运行结果-里面存在sum-方法" class="headerlink" title="运行结果:(里面存在sum()方法)"></a>运行结果:(里面存在sum()方法)</h3><p><img src="/../upload/prototype/11.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> 面向对象 </category>
          
          <category> 原型和原型链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 构造函数和原型,原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios学习笔记(4)-取消请求及批量发送请求</title>
      <link href="/2022/07/27/axios%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04-%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82%E5%8F%8A%E6%89%B9%E9%87%8F%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
      <url>/2022/07/27/axios%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04-%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82%E5%8F%8A%E6%89%B9%E9%87%8F%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="1-axios取消请求的基本使用"><a href="#1-axios取消请求的基本使用" class="headerlink" title="1.axios取消请求的基本使用"></a>1.axios取消请求的基本使用</h1><ul><li><strong>axios取消请求方式一般有两种,我们这里学习使用CancelToken的构造函数的方式取消请求</strong></li><li><strong>axios有一个CancelToken属性，他是一个类，用于获取取消请求的cancel方法，获取了该方法之后就可以在合适的地方执行cancel()取消请求了。这种方式比较麻烦，但是可以用于取消多个请求</strong></li></ul><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.请求拦截器(这里的请求拦截器什么也不走,就接收数据返回数据)</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器执行了&#x27;</span>,config);</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.响应拦截器(比请求拦截器应用得更广泛,项目开发没有不用相应拦截器的)</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 成功的回调</span></span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器成功的回调执行了!&#x27;</span>, response);</span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>                  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 失败的回调</span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 项目中常用的处理失败</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器失败的回调执行了!&#x27;</span>);</span><br><span class="line">        <span class="title function_">alert</span>(error);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建取消请求设置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="comment">// 做变量提升,将块级作用域中的取消标识拉出到全局作用域中</span></span><br><span class="line"><span class="keyword">let</span> cancel</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 获取按钮</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目开发中的常用嵌套 async和await(只要成功的结果,失败的结果由相应拦截器负责捕获和输出)</span></span><br><span class="line">btn[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        url : <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置取消请求功能属性</span></span><br><span class="line">        cancelToken : <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="function">(<span class="params">c</span>)=&gt;</span>&#123;<span class="comment">//这里的c变量是一个函数</span></span><br><span class="line">            <span class="comment">// console.log(c);</span></span><br><span class="line">            cancel = c;<span class="comment">//这里一定不能加括号,加括号就相当于调用了取消请求</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功了&#x27;</span>,response);</span><br><span class="line">    &#125; , <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败了&#x27;</span>,error);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给按钮绑定取消发送功能</span></span><br><span class="line">btn[<span class="number">1</span>].<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cancel);</span><br><span class="line">    <span class="title function_">cancel</span>(<span class="string">&#x27;我手动取消了请求!&#x27;</span>);<span class="comment">//取消请求,里面可以传入参数表示取消请求的信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果如下所示"><a href="#结果如下所示" class="headerlink" title="结果如下所示:"></a>结果如下所示:</h2><p><img src="/../upload/axios/21.png" alt="image"></p><h2 id="这时我们可以输出c看看-c的本质是一个函数-cancel的缩写"><a href="#这时我们可以输出c看看-c的本质是一个函数-cancel的缩写" class="headerlink" title="这时我们可以输出c看看,c的本质是一个函数,cancel的缩写"></a><strong>这时我们可以输出c看看,c的本质是一个函数,cancel的缩写</strong></h2><p><img src="/../upload/axios/22.png" alt="image"></p><h1 id="2-isCancel方法的基本使用"><a href="#2-isCancel方法的基本使用" class="headerlink" title="2.isCancel方法的基本使用"></a>2.isCancel方法的基本使用</h1><ul><li><strong>axios中存在一个判断取消请求的方法:isCancel(),这个方法顾名思义用于判断请求状态是否为取消,因为取消请求走的也是失败的回调(axios中有两个回调,一个是成功的回调,一个是失败的回调)</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建取消请求设置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="comment">// 创建判断是否取消请求方法变量</span></span><br><span class="line"><span class="keyword">const</span> isCancel = axios.<span class="property">isCancel</span>;</span><br><span class="line"><span class="comment">// 做变量提升,将块级作用域中的取消标识拉出到全局作用域中</span></span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 获取按钮</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目开发中的常用嵌套 async和await(只要成功的结果,失败的结果由相应拦截器负责捕获和输出)</span></span><br><span class="line">btn[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 判断外层的cancel是否有值,有值则取消上一次发送,重新发送一次请求</span></span><br><span class="line">    <span class="keyword">if</span> (cancel) <span class="title function_">cancel</span>()<span class="comment">//用户多次点击取消上一次请求重新发送</span></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        url : <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">                </span><br><span class="line">        <span class="comment">// 设置取消请求功能属性</span></span><br><span class="line">        cancelToken : <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="function">(<span class="params">c</span>)=&gt;</span>&#123;<span class="comment">//这里的c变量是一个函数</span></span><br><span class="line">            <span class="comment">// c();</span></span><br><span class="line">            <span class="comment">// console.log(c);</span></span><br><span class="line">            cancel = c;<span class="comment">//这里一定不能加括号,加括号就相当于调用了取消请求</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功了&#x27;</span>,response);</span><br><span class="line">    &#125; , <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isCancel</span>(error)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户手动取消的请求,原因是&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败了&#x27;</span>,error);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给按钮绑定取消发送功能</span></span><br><span class="line">btn[<span class="number">1</span>].<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cancel);</span><br><span class="line">    <span class="title function_">cancel</span>(<span class="string">&#x27;我手动取消了请求!&#x27;</span>);<span class="comment">//取消请求,里面可以传入参数表示取消的信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="结果如下所示-1"><a href="#结果如下所示-1" class="headerlink" title="结果如下所示:"></a>结果如下所示:</h2><p><img src="/../upload/axios/23.png" alt="image"></p><h1 id="重点-结合拦截器使用-统一处理多次点击发送请求和取消请求"><a href="#重点-结合拦截器使用-统一处理多次点击发送请求和取消请求" class="headerlink" title="重点:结合拦截器使用(统一处理多次点击发送请求和取消请求)"></a>重点:结合拦截器使用(统一处理多次点击发送请求和取消请求)</h1><ul><li><strong>请求拦截器应用场景:判断用户是否多次点击发送请求</strong></li><li><strong>响应拦截器应用场景:统一处理错误信息,判断是真正的请求错误还是用户手动取消请求</strong></li></ul><h2 id="源码如下"><a href="#源码如下" class="headerlink" title="源码如下:"></a>源码如下:</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.请求拦截器(判断用户是否多次点击发送请求)</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 判断外层的cancel是否有值,有值则取消上一次发送,重新发送一次请求</span></span><br><span class="line">    <span class="keyword">if</span> (cancel) <span class="title function_">cancel</span>(<span class="string">&#x27;取消了&#x27;</span>)<span class="comment">//用户多次点击取消上一次请求重新发送</span></span><br><span class="line"></span><br><span class="line">    config.<span class="property">cancelToken</span> = <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="function">(<span class="params">c</span>)=&gt;</span>&#123;<span class="comment">//这里的c变量是一个函数</span></span><br><span class="line">        cancel = c;<span class="comment">//这里一定不能加括号,加括号就相当于调用了取消请求</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器执行了&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.响应拦截器(统一处理错误信息,判断是真正的请求错误还是用户手动取消请求)</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 成功的回调</span></span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器成功的回调执行了!&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>                  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 失败的回调</span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isCancel</span>(error)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户手动取消的请求,原因是&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败了&#x27;</span>,error);   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 中断Promise链(一旦发生错误就中断,包括自己手动取消)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建取消请求设置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="comment">// 4.创建判断是否取消请求方法变量</span></span><br><span class="line"><span class="keyword">const</span> isCancel = axios.<span class="property">isCancel</span>;</span><br><span class="line"><span class="comment">// 做变量提升,将块级作用域中的取消标识拉出到全局作用域中</span></span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 获取按钮</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目开发中的常用嵌套 async和await(只要成功的结果,失败的结果由相应器负责捕获和输出)</span></span><br><span class="line">btn[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给按钮绑定取消发送功能</span></span><br><span class="line">btn[<span class="number">1</span>].<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cancel);</span><br><span class="line">    <span class="title function_">cancel</span>(<span class="string">&#x27;我手动取消了请求!&#x27;</span>);<span class="comment">//取消请求,里面可以传入参数表示取消请求的信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果解析"><a href="#结果解析" class="headerlink" title="结果解析:"></a>结果解析:</h2><ul><li><strong>这样调用起来逻辑清晰,请求拦截器统一处理用户的多次点击事件发送请求,响应拦截器则负责统一处理失败事件,无论是手动取消请求还是真正的错误!集中处理!!</strong></li></ul><h1 id="批量发送请求"><a href="#批量发送请求" class="headerlink" title="批量发送请求"></a>批量发送请求</h1><ul><li><strong>axios给我们提供了一个非常优秀的封装,能够让我们批量的发送请求,实现原理其实就跟Promise里面的all方法差不多,这里也是用all方法,去他代码如下,有详细注释</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取按钮</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册点击事件</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 批量发送的原理:使用all方法(与Promise.all基本一致:全部成功全部返回,一个失败,就返回失败的那个原因)</span></span><br><span class="line">    axios.<span class="title function_">all</span>([<span class="comment">//用all方法,将想要同时发送的请求封装成一个数组</span></span><br><span class="line">        axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span>),</span><br><span class="line">        axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>),</span><br><span class="line">    ]).<span class="title function_">then</span>(<span class="comment">//这里用.then方法接收</span></span><br><span class="line">        <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);<span class="comment">//同时发送同时返回,绝不会有先后顺序</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;error&#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="结果如下所示-2"><a href="#结果如下所示-2" class="headerlink" title="结果如下所示:"></a>结果如下所示:</h2><p><img src="/../upload/axios/24.png" alt="image"></p><h3 id="这里我们可以看到-这两个请求是同时发送出去的"><a href="#这里我们可以看到-这两个请求是同时发送出去的" class="headerlink" title="这里我们可以看到,这两个请求是同时发送出去的"></a>这里我们可以看到,这两个请求是同时发送出去的</h3><p><img src="/../upload/axios/25.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改butterfly(5)-添加音乐播放器(aplayer)</title>
      <link href="/2022/07/26/%E9%AD%94%E6%94%B9butterfly4/"/>
      <url>/2022/07/26/%E9%AD%94%E6%94%B9butterfly4/</url>
      
        <content type="html"><![CDATA[<h1 id="添加音乐播放器-aplayer"><a href="#添加音乐播放器-aplayer" class="headerlink" title="添加音乐播放器(aplayer)"></a>添加音乐播放器(aplayer)</h1><ul><li><strong><a href="https://github.com/MoePlayer/hexo-tag-aplayer">官方文档-添加插件</a></strong></li><li><strong>就拿 <a href="https://cheung-pui-lam.github.io/">我的博客</a> 为例</strong></li></ul><h2 id="教程开始"><a href="#教程开始" class="headerlink" title="教程开始"></a>教程开始</h2><ul><li><ol><li><strong>首先安装 hexo-tag-aplayer 这款插件。执行如下指令：(在你博客根目录下打开控制台安装)</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li><strong>如图所示:(打开控制台方式)</strong><br><img src="/../upload/mogai4/1.png" alt="image"><br><img src="/../upload/mogai4/2.png" alt="image"><br><strong>点击回车!开始安装</strong></li></ol></li><li><ol start="3"><li><strong>随后在你博客的根目录下的_config.yml(切记是根目录下,不是主题文件下)添加音乐播放器模块,如下所示</strong>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">    meting: true</span><br><span class="line">    asset_inject: false</span><br></pre></td></tr></table></figure><img src="/../upload/mogai4/3.png" alt="image"></li></ol></li><li><ol start="4"><li><strong>开启主题配置文件中_config.yml的 aplayerInject,(切记这次是你主题文件下的_config.yml)</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aplayerInject:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br></pre></td></tr></table></figure><img src="/../upload/mogai4/4.png" alt="image"></li></ol></li><li><ol start="5"><li><strong>到这里音乐页面就基本配置完成了,下面是音源配置教程</strong></li></ol></li></ul><h1 id="音源配置教程"><a href="#音源配置教程" class="headerlink" title="音源配置教程"></a>音源配置教程</h1><ul><li><strong>以本博客为例，在博客的音乐页面（\source\music\index.md文件）添加如下代码：</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;7539051570&quot; &quot;netease&quot; &quot;playlist&quot; &quot;mutex:false&quot; &quot;listmaxheight:400px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure></li><li><strong>或者也可以直接添加html格式</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;7539051570&quot;</span> <span class="attr">data-server</span>=<span class="string">&quot;netease&quot;</span> <span class="attr">data-type</span>=<span class="string">&quot;artist&quot;</span> <span class="attr">data-preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">data-theme</span>=<span class="string">&quot;#3F51B5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/../upload/mogai4/5.png" alt="image"></li></ul><h2 id="下面再来讲讲这些属性的含义"><a href="#下面再来讲讲这些属性的含义" class="headerlink" title="下面再来讲讲这些属性的含义:"></a>下面再来讲讲这些属性的含义:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data-id    require 歌曲id/播放列表id/专辑id/搜索关键字</span><br><span class="line">data-serverrequire 音乐平台：网易、腾讯、酷狗、夏米、百度</span><br><span class="line">data-typerequire 歌曲、播放列表、专辑、搜索、艺术家</span><br><span class="line">data-fixedfalse 启用固定模式</span><br><span class="line">data-minifalse 启用最小模式</span><br><span class="line">data-autoplayfalse音频自动播放</span><br><span class="line">data-theme #2980b9  主题颜色</span><br><span class="line">data-loop all      循环播放，值：“all”、“one”、“none”</span><br><span class="line">data-order list  播放顺序，值：“list”，“random”</span><br><span class="line">data-preload auto  数据的预处理加载 值：“无”、“元数据”、“自动”</span><br><span class="line">data-volume 0.7音量调节</span><br><span class="line">data-mutextrue防止同时播放多条音乐,在不同的页面</span><br><span class="line">data-lrctype0歌词的展现形式</span><br><span class="line">data-listfoldedfalse指示是否应首先折叠列表</span><br><span class="line">data-listmaxheight340px最大列表高度</span><br><span class="line">data-storagenamemetingjs设置存储密钥</span><br></pre></td></tr></table></figure><ul><li><strong>require 代表着這些參數是必須要使用的，其它的參數則可以根據自己需要配置。</strong><h3 id="常用的选项如下所示"><a href="#常用的选项如下所示" class="headerlink" title="常用的选项如下所示:"></a>常用的选项如下所示:</h3></li><li><strong>server可选：netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。建议网易云</strong></li><li><strong>type可选：song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）。添加单曲选的歌曲，歌单选择playlist，可以自行尝试。</strong></li><li><strong>id获取示例: 打开网易云音乐，选择喜欢的歌单，在网页版打开，获取歌单list，填入即可。使用的时候将上边的ID号换为自己喜欢的歌单即可。注意歌单中不能包括VIP音乐，否则无法解析。建议单独建立一个歌单，以后有喜欢的音乐添加进去，网页也会自动同步添加。</strong></li><li><strong>lrcType设置为 -1默认显示歌词，放在fixed模式下比较合适</strong></li></ul><h1 id="歌单的获取-id属性的歌单导入"><a href="#歌单的获取-id属性的歌单导入" class="headerlink" title="歌单的获取:(id属性的歌单导入)"></a>歌单的获取:(id属性的歌单导入)</h1><p><img src="/../upload/mogai4/6.png" alt="image"></p><ul><li><strong>获取歌单的id后导入指定属性即可!</strong></li></ul><h1 id="最后的成品展示"><a href="#最后的成品展示" class="headerlink" title="最后的成品展示:"></a>最后的成品展示:</h1><p><img src="/../upload/mogai4/7.png" alt="image"></p><h1 id="拓展功能-全局吸底音乐播放器-aplayer-请观看官方文档教程"><a href="#拓展功能-全局吸底音乐播放器-aplayer-请观看官方文档教程" class="headerlink" title="拓展功能:全局吸底音乐播放器(aplayer)请观看官方文档教程"></a>拓展功能:全局吸底音乐播放器(aplayer)请观看官方文档教程</h1><h2 id="官方文档-全局吸底"><a href="#官方文档-全局吸底" class="headerlink" title="官方文档-全局吸底"></a><a href="https://butterfly.js.org/posts/507c070f/">官方文档-全局吸底</a></h2><p><img src="/../upload/mogai4/8.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改butterfly(4)-添加标签云</title>
      <link href="/2022/07/26/%E9%AD%94%E6%94%B9butterfly/"/>
      <url>/2022/07/26/%E9%AD%94%E6%94%B9butterfly/</url>
      
        <content type="html"><![CDATA[<h1 id="添加标签云"><a href="#添加标签云" class="headerlink" title="添加标签云"></a>添加标签云</h1><ul><li><a href="https://github.com/D0n9X1n/hexo-tag-cloud/blob/master/README.ZH.md">官方文档</a></li></ul><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程:"></a>安装流程:</h2><ul><li><strong>进入到 hexo 的根目录，然后在 package.json 中添加依赖: “hexo-tag-cloud”: “2.1.*”</strong></li><li><strong>执行 npm install 命令</strong></li><li><strong>然后需要你去修改主题的 tagcloud 的模板，这个依据你的主题而定</strong></li></ul><h3 id="就那我的主题为例-我的主题是butterfly"><a href="#就那我的主题为例-我的主题是butterfly" class="headerlink" title="就那我的主题为例,我的主题是butterfly"></a><strong>就那我的主题为例,我的主题是butterfly</strong></h3><ul><li><strong>首先找到 Butterfly&#x2F;layout&#x2F;includes&#x2F;widget&#x2F;card_tags.pug 文件</strong></li><li><strong>然后将文件内容转换成如下代码:</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> site.<span class="property">tags</span>.<span class="property">length</span></span><br><span class="line">  .<span class="property">card</span>-widget.<span class="property">card</span>-tags</span><br><span class="line">    .<span class="property">card</span>-content</span><br><span class="line">      .<span class="property">item</span>-headline</span><br><span class="line">        i.<span class="property">fa</span>.<span class="property">fa</span>-<span class="title function_">tags</span>(aria-hidden=<span class="string">&quot;true&quot;</span>)</span><br><span class="line">        span= <span class="title function_">_p</span>(<span class="string">&#x27;aside.card_tags&#x27;</span>)</span><br><span class="line">        <span class="title function_">script</span>(type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span> src=<span class="string">&quot;/js/tagcloud.js&quot;</span>)</span><br><span class="line">        <span class="title function_">script</span>(type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span> src=<span class="string">&quot;/js/tagcanvas.js&quot;</span>)</span><br><span class="line">        #myCanvasContainer.<span class="property">widget</span>.<span class="title function_">tagcloud</span>(align=<span class="string">&#x27;center&#x27;</span>, style=<span class="string">&#x27;width=100%;height=100%;margin:0;padding:0&#x27;</span>)</span><br><span class="line">          canvas#<span class="title function_">resCanvas</span>(width=<span class="number">200</span>,style=<span class="string">&#x27;width=100%;height=100%;margin:0;padding:0;display:block&#x27;</span>)</span><br><span class="line">            != <span class="title function_">tagcloud</span>()</span><br><span class="line">          <span class="comment">//- 注释掉下面这些可以只保留标签云转动部分(不注释会展示静态标签)</span></span><br><span class="line">          <span class="comment">//- br</span></span><br><span class="line">          <span class="comment">//- != tagcloud(&#123;min_font: 16, max_font: 24, amount: 50, color: true, start_color: &#x27;#FF6600&#x27;, end_color: &#x27;#66FF99&#x27;&#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><ul><li><strong>其中resCanvas的参数可以设置，tagcloud的字体大小颜色等参数也可以设置</strong></li></ul><h1 id="自定义功能"><a href="#自定义功能" class="headerlink" title="自定义功能"></a>自定义功能</h1><ul><li><strong>自定义功能需要配置一下 <strong>_config.yml</strong> 即可(自定义,不配置也行)</strong></li><li><strong>切记这个 _config.yml是根目录下的,然后添加如下代码:</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># hexo-tag-<span class="title function_">cloud</span>(自定义云标签)</span><br><span class="line"><span class="attr">tag_cloud</span>:</span><br><span class="line">    <span class="attr">textFont</span>: <span class="title class_">Trebuchet</span> <span class="variable constant_">MS</span>, <span class="title class_">Helvetica</span></span><br><span class="line">    <span class="attr">textColor</span>: <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">    <span class="attr">textHeight</span>: <span class="number">25</span></span><br><span class="line">    <span class="attr">outlineColor</span>: <span class="string">&#x27;#E2E1D1&#x27;</span></span><br><span class="line">    <span class="attr">maxSpeed</span>: <span class="number">0.5</span></span><br><span class="line">    <span class="attr">pauseOnSelected</span>: <span class="literal">false</span> # <span class="literal">true</span> 意味着当选中对应 tag 时,停止转动</span><br></pre></td></tr></table></figure></li></ul><h3 id="然后使用-hexo-c-amp-amp-hexo-g-amp-amp-hexo-s-来享受属于你自己的独一无二的标签云吧。"><a href="#然后使用-hexo-c-amp-amp-hexo-g-amp-amp-hexo-s-来享受属于你自己的独一无二的标签云吧。" class="headerlink" title="然后使用 hexo c &amp;&amp; hexo g &amp;&amp; hexo s 来享受属于你自己的独一无二的标签云吧。"></a>然后使用 hexo c &amp;&amp; hexo g &amp;&amp; hexo s 来享受属于你自己的独一无二的标签云吧。</h3><h3 id="展示图如图所示"><a href="#展示图如图所示" class="headerlink" title="展示图如图所示:"></a>展示图如图所示:</h3><p><img src="/../upload/mogai/1.png" alt="image"></p><h1 id="实现不了功能"><a href="#实现不了功能" class="headerlink" title="实现不了功能"></a>实现不了功能</h1><ul><li><strong>在github上标签云使用教程中，按照步骤添加配置后不能添加标签云，后考虑解决方案如下：</strong></li><li><strong>可能是因为不能修改oackage.json文件</strong></li></ul><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h4><ul><li><strong>在根目录下的 package.json中使用命令安装:</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-cloud@^2.1.* --save</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios学习笔记(3)-默认设置,create方法,拦截器与取消请求</title>
      <link href="/2022/07/25/axios%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E9%BB%98%E8%AE%A4%E8%AE%BE%E7%BD%AE%E4%B8%8Ecreate%E6%96%B9%E6%B3%95%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/"/>
      <url>/2022/07/25/axios%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E9%BB%98%E8%AE%A4%E8%AE%BE%E7%BD%AE%E4%B8%8Ecreate%E6%96%B9%E6%B3%95%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="1-axios的默认配置"><a href="#1-axios的默认配置" class="headerlink" title="1.axios的默认配置"></a>1.<strong>axios</strong>的默认配置</h1><ul><li><strong>在axios配置中存在baseUrl，header等配置，每次做的axios时，不一定所有的配置都要自己写，这时候要做一个默认值,如下:</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取按钮</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="comment">//默认配置(设置完默认设置后就不需要再axios函数里面设置了)</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">method</span> = <span class="string">&#x27;GET&#x27;</span>;<span class="comment">//设置默认的请求类型为 GET</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:3000&#x27;</span>;<span class="comment">//设置基础 URL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">params</span> = &#123;<span class="attr">id</span>:<span class="number">100</span>&#125;;<span class="comment">//设置url参数</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">3000</span>;<span class="comment">//设置超时时间</span></span><br><span class="line"></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="comment">// 我们在这里就无需配置这些杂项了</span></span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/posts&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-同样能接收和发送请求"><a href="#运行结果-同样能接收和发送请求" class="headerlink" title="运行结果:(同样能接收和发送请求)"></a>运行结果:(同样能接收和发送请求)</h3><p><img src="/../upload/axios/12.png" alt="image"><br><img src="/../upload/axios/13.png" alt="image"></p><h1 id="2-axios-的create方法-重要-常用"><a href="#2-axios-的create方法-重要-常用" class="headerlink" title="2.axios 的create方法(重要,常用)"></a>2.<strong>axios</strong> 的create方法(重要,常用)</h1><ul><li>**语法:**axios.create(config)</li><li><strong>1.根据指定配置创建一个新的 axios, 也就就每个新 axios 都有自己的配置</strong></li><li><strong>2.新 axios 只是没有取消请求和批量发请求的方法, 其它所有语法都是一致的</strong></li></ul><h3 id="3-为什么要设计这个语法"><a href="#3-为什么要设计这个语法" class="headerlink" title="3.为什么要设计这个语法?"></a>3.为什么要设计这个语法?</h3><ul><li><strong>(1)需求: 项目中有部分接口需要的配置与另一部分接口需要的配置不太一样, 如何处理</strong></li><li><strong>(2)解决: 创建 2 个新 axios, 每个都有自己特有的配置, 分别应用到不同要求的接口请求中</strong></li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h2><ul><li><strong>(用回上文提到的例子,此时这里已经设置了默认的全局配置,此时又有一个新的请求要指向另一台服务器,且请求方法是post,这时就能用到 <strong>axios的create()方法了</strong>)</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切记使用create()方法创建新的axios需要写在默认设置的前面</span></span><br><span class="line"><span class="keyword">const</span> axios2 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// 要求:指向另一台服务器,请求方法为post</span></span><br><span class="line">    <span class="comment">// url为:http://abc/posts</span></span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;http://abc&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取按钮</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="comment">//默认配置(设置完默认设置后就不需要再axios函数里面设置了)</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">method</span> = <span class="string">&#x27;GET&#x27;</span>;<span class="comment">//设置默认的请求类型为 GET</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:3000&#x27;</span>;<span class="comment">//设置基础 URL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">params</span> = &#123;<span class="attr">id</span>:<span class="number">100</span>&#125;;<span class="comment">//设置url参数</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">3000</span>;<span class="comment">//设置超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的按钮点击发送新的要求,这时这个axios封装的属性就不再是调用全局默认属性,而是使用create()方法创建出来的axios2了</span></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">axios2</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/posts&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-请求拦截器-axios-interceptors-request-use"><a href="#3-请求拦截器-axios-interceptors-request-use" class="headerlink" title="3.请求拦截器(axios.interceptors.request.use())"></a>3.请求拦截器(axios.interceptors.request.use())</h1><ul><li><strong>请求拦截器的本质是一个在真正发送请求前的函数（回调函数）</strong></li><li><strong>作用:对所用的请求做统一的处理:如追加请求头,追加参数,界面loading提示等..</strong></li><li><strong>请求拦截器相当于进地铁站过安检,接收axios的所有配置项,检查过后返回所有配置项</strong></li></ul><h3 id="练习demo"><a href="#练习demo" class="headerlink" title="练习demo"></a>练习demo</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器(axios.interceptors())</span></span><br><span class="line"><span class="comment">// 请求拦截器的本质是一个函数（回调函数）</span></span><br><span class="line"><span class="comment">// 请求拦截器相当于进地铁站过安检,接收axios的所有配置项,检查过后返回所有置项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器一般写在最前面(一般写法)</span></span><br><span class="line"><span class="comment">// 1.一般是用于token监测(token1是用户的凭据,通过获取token来查看你是否右相对应的权限)</span></span><br><span class="line"><span class="comment">// 2.一定要有返回值</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 比如这里我写一个demo要求当时间戳为偶数的时候,给响应头信息添加一个a=1属性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() % <span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 潜规则变量名写config</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config);</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取按钮</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册点击事件</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 点击向json-server服务器发送请求获取文章信息</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/axios/14.png" alt="image"></p><h3 id="多个请求拦截器存在的执行顺序问题-一般项目开发中用不到"><a href="#多个请求拦截器存在的执行顺序问题-一般项目开发中用不到" class="headerlink" title="多个请求拦截器存在的执行顺序问题(一般项目开发中用不到!)"></a>多个请求拦截器存在的执行顺序问题(一般项目开发中用不到!)</h3><ul><li><strong>就是:后指定的先执行!</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器1</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 比如这里我写一个demo要求当时间戳为偶数的时候,给响应头信息添加一个a=1属性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() % <span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 潜规则变量名写config</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器1执行了&#x27;</span>,config);</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器2</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 比如这里我写一个demo要求当时间戳为偶数的时候,给响应头信息添加一个a=1属性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() % <span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 潜规则变量名写config</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器2执行了&#x27;</span>,config);</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="/../upload/axios/15.png" alt="image"></p><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析:"></a>原理解析:</h3><ul><li><strong>从头到尾请求拦截器里面传的参数config都是一个东西,他没有变,因为是后指定的先执行,所以这个config在请求拦截器2中执行过后,又传递给了请求拦截器1再执行一遍而已!</strong></li></ul><h5 id="图解"><a href="#图解" class="headerlink" title="图解:"></a>图解:</h5><p><img src="/../upload/axios/16.png" alt="image"></p><h1 id="4-响应拦截器-axios-interceptors-response-use"><a href="#4-响应拦截器-axios-interceptors-response-use" class="headerlink" title="4.响应拦截器(axios.interceptors.response.use())"></a>4.响应拦截器(axios.interceptors.response.use())</h1><ul><li><strong>响应拦截器是得到响应后执行的一个回调函数(你得到一个响应,这个响应还没送到程序员手里,就已经调用了响应拦截器)</strong></li><li><strong>作用:</strong><ul><li><strong>若请求成功，对成功的数据进行处理，成功的回调函数, 传递的默认是 response</strong></li><li><strong>若请求失败，对失败进行下一步操作，失败的回调函数, 传递的默认是 error</strong></li></ul></li><li><strong>应用场景:</strong><ul><li><strong>一般直接在这里截获数据,然后直接将数据返回(response.data),那后面成功的回调接到的数据就是纯数据了</strong></li></ul></li></ul><h3 id="练习demo-1"><a href="#练习demo-1" class="headerlink" title="练习demo"></a>练习demo</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器(这里的请求拦截器什么也不走,就接收数据返回数据)</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器执行了&#x27;</span>,config);</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器(比请求拦截器应用得更广泛,项目开发没有不用相应拦截器的)</span></span><br><span class="line"><span class="comment">// 1.是什么?</span></span><br><span class="line">    <span class="comment">// 得到响应后执行的一个回调函数(你得到一个响应,这个响应还没送到程序员手里,就已经调用了响应拦截器)</span></span><br><span class="line"><span class="comment">// 2.作用：</span></span><br><span class="line">    <span class="comment">// 若请求成功，对成功的数据进行处理，成功的回调函数, 传递的默认是 response</span></span><br><span class="line">    <span class="comment">// 若请求失败，对失败进行下一步操作，失败的回调函数, 传递的默认是 error</span></span><br><span class="line"><span class="comment">// 3.应用场景:</span></span><br><span class="line">    <span class="comment">// 一般直接在这里截获数据,然后直接将数据返回(response.data),那后面成功的回调接到的数据就是纯数据了</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 成功的回调</span></span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器成功的回调执行了!&#x27;</span>, response);</span><br><span class="line">        <span class="comment">// 响应拦截器成功的回调一定要有返回值</span></span><br><span class="line">        <span class="comment">// 比如我这里有一个要求:时间戳为偶数返回数据,时间戳为奇数不返回数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 时间戳为偶数,返回数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() % <span class="number">2</span> === <span class="number">0</span>) <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">        <span class="comment">// 时间戳为奇数不返回数据                      </span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&#x27;此时时间戳为奇数,不能给你返回数据!&#x27;</span>                     </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 失败的回调</span></span><br><span class="line">    <span class="comment">// axios认为状态码不是2开头的都是失败的请求</span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;相应拦截器失败的回调执行了&#x27;</span>, error);</span><br><span class="line">        <span class="comment">// 响应拦截器失败回调的返回值影响着后面走的成功的回调还是失败的回调</span></span><br><span class="line">        <span class="comment">// 这套规则与 .then方法 十分的相像(只要你返回的是非promise值,那么必定返回成功,返回的是promise值,就看当前这个promise的状态)</span></span><br><span class="line">        <span class="comment">// 如:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.返回的是 非Promise值</span></span><br><span class="line">        <span class="comment">// return 100 //最后走的是成功的回调:成功的回调最后返回的数据! 100</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.返回的是 Promise值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error) <span class="comment">//这回就走失败的回调了 :失败的回调返回的原因! AxiosError</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 获取按钮</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册点击事件</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 点击向json-server服务器发送请求获取文章信息</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/posts/10&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功的回调最后返回的数据!&#x27;</span>,response);</span><br><span class="line">    &#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败的回调返回的原因!&#x27;</span>,error);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果:"></a>运行结果:</h3><ul><li><strong>一般返回成功</strong><br><img src="/../upload/axios/17.png" alt="image"></li><li><strong>应用场景:直接在响应拦截器中截取数据返回数据,最后在成功回调中返回的就是纯数据</strong><br><img src="/../upload/axios/18.png" alt="image"></li><li><strong>响应拦截器失败的回调返回的是非Promise值时返回的必定成功,最后走成功的回调返回值就是响应拦截器失败回调返回的值(你写入的非promise值)</strong><br><img src="/../upload/axios/19.png" alt="image"></li><li><strong>响应拦截器失败的回调返回的是Promise值时返回值看给Pormise状态,成功最后就走成功的回调,失败最后就走失败的回调,返回值就是resolve()或reject()里面传入的值</strong><br><img src="/../upload/axios/20.png" alt="image"></li></ul><h2 id="响应拦截器一般在项目开发中是用来截获数据-获取失败的-结合async和await来使用"><a href="#响应拦截器一般在项目开发中是用来截获数据-获取失败的-结合async和await来使用" class="headerlink" title="响应拦截器一般在项目开发中是用来截获数据,获取失败的!(结合async和await来使用)"></a>响应拦截器一般在项目开发中是用来截获数据,获取失败的!(结合async和await来使用)</h2><ul><li><strong>我们在项目开发中,使用响应来解其来获取失败,一般是这样做,在响应拦截器中统一处理失败,无需再在失败回调中处理了,代码如下所示:</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器(这里的请求拦截器什么也不做,就接收数据返回数据)</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器执行了&#x27;</span>,config);</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 成功的回调</span></span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器成功的回调执行了!&#x27;</span>, response);</span><br><span class="line">        <span class="comment">// 响应拦截器成功的回调一定要有返回值</span></span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;                  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 失败的回调</span></span><br><span class="line">    <span class="comment">// axios认为状态码不是2开头的都是失败的请求</span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 项目中常用的处理失败</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器失败的回调执行了!&#x27;</span>);</span><br><span class="line">        <span class="title function_">alert</span>(error);</span><br><span class="line">        <span class="comment">// 这里返回一个pending(未完成)状态的Promise对象来中断Promise链,这样后面的回调就不用再写.then方法了!</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 获取按钮</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目开发中的常用嵌套 async和await(只要成功的结果,失败的结果由相应器负责捕获和输出)</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> reslut = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/posts/10&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reslut);<span class="comment">//若是失败则不会输出结果,成功则只返回数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h3><ul><li><strong>这样写,最后的回调就只有成功的结果,失败的结果由响应拦截器负责截取和响应输出,后续我们不管有多少个响应拦截器,我们只需要await一等就完事了!</strong></li></ul><h1 id="5-取消请求"><a href="#5-取消请求" class="headerlink" title="5.取消请求"></a>5.取消请求</h1><ul><li><strong>文章篇幅过长,写在下一篇博客了-axios学习笔记(4)-取消请求,取消请求配合拦截器使用以及批量发送请求</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios学习笔记2-配置对象的详细说明以及axios的其他方式发送请求</title>
      <link href="/2022/07/25/axios%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%E4%BB%A5%E5%8F%8Aaxios%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E5%BC%8F%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
      <url>/2022/07/25/axios%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%E4%BB%A5%E5%8F%8Aaxios%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E5%BC%8F%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="1-配置对象的详细说明"><a href="#1-配置对象的详细说明" class="headerlink" title="1.配置对象的详细说明"></a>1.配置对象的详细说明</h1><ul><li><strong>什么是配置对象? config 就是配置对象</strong></li><li><ul><li><a href="https://github.com/axios/axios">官方文档</a>中提到:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Request</span> <span class="title class_">Config</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// url：指明请求去向</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// method：设置请求方法（get。post。put等..）</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//baseURL；设定url的基础结构，比如，我们在发送的时候写了好几次http://localhost:3000,这其实就是一个基础结构，这这时我们就可以将baseURL设置成这个值，然后在设置url的时候就子需要设置路径就可以了，axios内部会自动将baseURL和url做一个结合，想成最终的url结构（在项目中经常使用）</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//transformRequest: ：它可以对请求数据做一个处理，将处理完后的数据在向服务器发送</span></span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">    <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// transformResponse（对响应进行预处理）:它可以对响应的结构做一些改变，改变完后，在用自定义的回调去处理这些结果</span></span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">//headers:设置头信息，在某些项目当中进行身份校验的时候，会要求你在头信息当中加入一些特殊的标识，然后来检验你的请求是否满足条件，这时就可以借助headers对请求头信息做一个控制</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//params: 这也是一个比较常用的参数，用来设定url参数的，比如我们要向服务端发送请求，在发送请求时需要在url后面传递参数如a=100&amp;b=200，这时我们就可以在params中添加参数，切记params是一个对象（对象添加参数的方法）</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//paramsSerializer:这是一个参数序列化的配置对象，作用是对请求的参数做一个序列化，转化成一个字符串,用得比较少</span></span><br><span class="line">  <span class="attr">paramsSerializer</span>: &#123;</span><br><span class="line">    <span class="attr">indexes</span>: <span class="literal">null</span> <span class="comment">// array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//data:这是请求体设置，用的比较多，一般有两种形式可以设置，一种是对象形式，另一种是字符串形式，如果是对象形式，axios会将其转成一个json格式字符串进行传递；如果是字符串的话axios就直接传递，一般在形目中是看要求进行设置</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//timeout:超时时间，发送请求时，如果超过这个时间，这个请求就会取消，单位为ms</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//withCredentials:这个是在跨域请求时对cookie进行一个携带，false为不携带，如果是true的话，那么在跨域请求时可以讲cookie携带过去</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//adapter:可以对请求的识别器做一个设置，有两种，一种是发送ajax的，另一种是在node.js里面发送http请求的，两种不同的运行环境</span></span><br><span class="line">  <span class="attr">adapter</span>: <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//auth:对我们请求的基础做一个验证，可以在这里设置用户名和密码，用的相对性较少</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;janedoe&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;s00pers3cret&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//responseType:对响应体的结构做一个设置，默认值是一个json，即默认服务器返回的结果是一个json格式的</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//responseEncoding:响应结果的编码，一般默认是utf8</span></span><br><span class="line">  <span class="attr">responseEncoding</span>: <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//xsrfCookieName 和 srfHeaderName:域请求时对cookie的名字做一个设置，对请求头信息做一个设置。这是一个安全设置，保证了请求是来自于我们的客户端而不是来自于一些未知的网站页面，起一个保护作用，为什么够实现保护作用呢？服务器在返回结果时，会给我们返回一个唯一的标识，下次我们在发送请求时，会连同这个标识发送过去，服务器认了之后，检测没有问题，在给我们响应。有一些网站页面中当中会加入一些链接，向我们的服务器去发送请求，如果不做唯一的标识去检验的话，那么可能这个页面发送过来的请求就会直接对我们的结果产生影响，那加入这个参数后，我们的客户端请求，其他的页面就不能发送请求了（因为他没有这个标识），这时就可以有效避免这个跨站攻击了</span></span><br><span class="line">  <span class="attr">xsrfCookieName</span>: <span class="string">&#x27;XSRF-TOKEN&#x27;</span>,</span><br><span class="line">  <span class="attr">xsrfHeaderName</span>: <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//onUploadProgress:上传时的回调</span></span><br><span class="line">  <span class="attr">onUploadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//onDownloadProgress:下载时的回调</span></span><br><span class="line">  <span class="attr">onDownloadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//maxContentLength:设置http响应体的最大尺寸,单位为字节</span></span><br><span class="line">  <span class="attr">maxContentLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//maxBodyLength:请求体的最大内容</span></span><br><span class="line">  <span class="attr">maxBodyLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//validateStatus:对响应结果的成功做一个设置（就是什么情况下认定它是成功的呢？）默认值为：响应代码大于等于200小于300</span></span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//maxRedirects:最大跳转次数，一般自能用于node.js种，前端的ajax用不到</span></span><br><span class="line">  <span class="attr">maxRedirects</span>: <span class="number">21</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//socketPath:设定socket文件位置，作用是向dock的守护进程去发送请求的，也就是作数据转发，这里有一个优先级关系，如果你设置了socket这个文件位置，也设置了代理（proxy），会优先使用socket这个文件的配置</span></span><br><span class="line">  <span class="attr">socketPath</span>: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//httpAgent:对客户端的信息做一些配置，用的相对比较少</span></span><br><span class="line">  <span class="attr">httpAgent</span>: <span class="keyword">new</span> http.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">//proxy:设置我们的代理，这是一个非常有用的设置，是用在node.js服务端中的，一般在做爬虫的时候，你用一个ip去向目标服务器发送请求，抓取数据的话，很可能就会被别人进到你的ip，这时你就可以借助中间代理，疯狂的去切换，然后发送请求，就可以很好的获取别人服务器的数据,前端一般也用不到</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//proxy:设置我们的代理，这是一个非常有用的设置，是用在node.js服务端中的，一般在做爬虫的时候，你用一个ip去向目标服务器发送请求，抓取数据的话，很可能就会被别人进到你的ip，这时你就可以借助中间代理，疯狂的去切换，然后发送请求，就可以很好的获取别人服务器的数据</span></span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> (<span class="params">cancel</span>) &#123;</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">//decompress:对响应结果做一个解压，只能用于node.js环境中设置，ajax不能进行设置</span></span><br><span class="line">  <span class="attr">decompress</span>: <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="2-axios的其他方式发送请求"><a href="#2-axios的其他方式发送请求" class="headerlink" title="2.axios的其他方式发送请求:"></a>2.axios的其他方式发送请求:</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(config): <span class="comment">//通用/最本质的发任意类型请求的方式</span></span><br><span class="line"><span class="title function_">axios</span>(url[, config]): <span class="comment">//可以只指定 url 发 get 请求</span></span><br><span class="line">axios.<span class="title function_">request</span>(config): <span class="comment">//等同于 axios(config) </span></span><br><span class="line">axios.<span class="title function_">get</span>(url[, config]): <span class="comment">//发 get 请求</span></span><br><span class="line">axios.<span class="title function_">delete</span>(url[, config]): <span class="comment">//发 delete 请求</span></span><br><span class="line">axios.<span class="title function_">post</span>(url[, data, config]): <span class="comment">//发 post 请求</span></span><br><span class="line">axios.<span class="title function_">put</span>(url[, data, config]): <span class="comment">//发 put 请求</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">xxx</span>: <span class="comment">//请求的默认全局配置</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(): <span class="comment">//添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(): <span class="comment">//添加响应拦截器</span></span><br><span class="line">axios.<span class="title function_">create</span>([config]): <span class="comment">//创建一个新的 axios(它没有下面的功能)</span></span><br><span class="line">axios.<span class="title class_">Cancel</span>(): <span class="comment">//用于创建取消请求的错误对象</span></span><br><span class="line">axios.<span class="title class_">CancelToken</span>(): <span class="comment">//用于创建取消请求的 token 对象</span></span><br><span class="line">axios.<span class="title function_">isCancel</span>(): <span class="comment">//是否是一个取消请求的错误</span></span><br><span class="line">axios.<span class="title function_">all</span>(promises): <span class="comment">//用于批量执行多个异步请求</span></span><br><span class="line">axios.<span class="title function_">spread</span>(): <span class="comment">//用来指定接收所有成功数据的回调函数的方法</span></span><br></pre></td></tr></table></figure><h2 id="这里只列举几样-其他的基本一致"><a href="#这里只列举几样-其他的基本一致" class="headerlink" title="这里只列举几样,其他的基本一致"></a>这里只列举几样,其他的基本一致</h2><h3 id="1-发送get请求-axios-get-这里用axios-request"><a href="#1-发送get请求-axios-get-这里用axios-request" class="headerlink" title="1).发送get请求(axios.get(),这里用axios.request())"></a>1).发送get请求(axios.get(),这里用axios.request())</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送 GET 请求</span></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// request方法与axios()方法使用一致</span></span><br><span class="line">    axios.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/comments&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-发送post请求-axios-post"><a href="#2-发送post请求-axios-post" class="headerlink" title="2).发送post请求(axios.post())"></a>2).发送post请求(axios.post())</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送 POST 请求(与GET,PUT,Delet基本一致,参考基本使用)</span></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// axios()</span></span><br><span class="line">    axios.<span class="title function_">post</span>(</span><br><span class="line">        <span class="string">&#x27;http://localhost:3000/comments&#x27;</span>, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;body&quot;</span>: <span class="string">&quot;happy!&quot;</span>,</span><br><span class="line">            <span class="string">&quot;postId&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// axios会自动将服务器返回结果进行jason解析,即将响应体转象返回</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios学习笔记(1)-axios初识以及基本使用</title>
      <link href="/2022/07/25/axios%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-axios%E5%88%9D%E8%AF%86/"/>
      <url>/2022/07/25/axios%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-axios%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是-axios"><a href="#1-什么是-axios" class="headerlink" title="1.什么是 axios ?"></a>1.什么是 <strong>axios</strong> ?</h1><ul><li><strong>Axios 是一个基于 Promise 的 http客户端，可以在浏览器，node.Js中去运行,浏览器可以借助 axios 向服务端发送 ajax 请求,同样可以在node.js中发送http请求</strong></li><li><strong>它前端最流行的 ajax 请求库</strong></li><li><strong>react&#x2F;vue 官方都推荐使用 axios 发 ajax 请求</strong></li><li><a href="https://github.com/axios/axios">官方文档</a></li></ul><h1 id="2-axios-的特点"><a href="#2-axios-的特点" class="headerlink" title="2.axios 的特点"></a>2.<strong>axios</strong> 的特点</h1><ol><li><strong>基于 xhr + promise 的异步 ajax 请求库</strong></li><li><strong>浏览器端&#x2F;node 端都可以使用</strong></li><li><strong>支持请求／响应拦截器</strong></li><li><strong>支持请求取消</strong></li><li><strong>请求&#x2F;响应数据转换</strong></li><li><strong>批量发送多个请求</strong></li></ol><h1 id="3-axios-常用语法-返回一个Promise对象"><a href="#3-axios-常用语法-返回一个Promise对象" class="headerlink" title="3.axios 常用语法(返回一个Promise对象)"></a>3.<strong>axios</strong> 常用语法(返回一个Promise对象)</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(config): <span class="comment">//通用/最本质的发任意类型请求的方式</span></span><br><span class="line"><span class="title function_">axios</span>(url[, config]): <span class="comment">//可以只指定 url 发 get 请求</span></span><br><span class="line">axios.<span class="title function_">request</span>(config): <span class="comment">//等同于 axios(config) </span></span><br><span class="line">axios.<span class="title function_">get</span>(url[, config]): <span class="comment">//发 get 请求</span></span><br><span class="line">axios.<span class="title function_">delete</span>(url[, config]): <span class="comment">//发 delete 请求</span></span><br><span class="line">axios.<span class="title function_">post</span>(url[, data, config]): <span class="comment">//发 post 请求</span></span><br><span class="line">axios.<span class="title function_">put</span>(url[, data, config]): <span class="comment">//发 put 请求</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">xxx</span>: <span class="comment">//请求的默认全局配置</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(): <span class="comment">//添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(): <span class="comment">//添加响应拦截器</span></span><br><span class="line">axios.<span class="title function_">create</span>([config]): <span class="comment">//创建一个新的 axios(它没有下面的功能)</span></span><br><span class="line">axios.<span class="title class_">Cancel</span>(): <span class="comment">//用于创建取消请求的错误对象</span></span><br><span class="line">axios.<span class="title class_">CancelToken</span>(): <span class="comment">//用于创建取消请求的 token 对象</span></span><br><span class="line">axios.<span class="title function_">isCancel</span>(): <span class="comment">//是否是一个取消请求的错误</span></span><br><span class="line">axios.<span class="title function_">all</span>(promises): <span class="comment">//用于批量执行多个异步请求</span></span><br><span class="line">axios.<span class="title function_">spread</span>(): <span class="comment">//用来指定接收所有成功数据的回调函数的方法</span></span><br></pre></td></tr></table></figure><p><img src="/../upload/axios/1.png" alt="image"></p><h1 id="4-axios-的基本使用"><a href="#4-axios-的基本使用" class="headerlink" title="4.axios 的基本使用:"></a>4.<strong>axios</strong> 的基本使用:</h1><ul><li><strong>这里我用一个demo来演示axios的基本使用,要求如下:用json-server来充当http服务器,页面当中有4个按钮,分别对应 GET、POST、PUT、delete请求,json-server服务器当中有post页面里面存放的是一些数据,每个数据有对应的id号,按下相应的按钮来向服务器发送请求,服务器相应结果!</strong></li></ul><h2 id="demo页面显示如下"><a href="#demo页面显示如下" class="headerlink" title="demo页面显示如下:"></a>demo页面显示如下:</h2><p><img src="/../upload/axios/2.png" alt="image"></p><h2 id="json-server服务器内部如下"><a href="#json-server服务器内部如下" class="headerlink" title="json-server服务器内部如下:"></a>json-server服务器内部如下:</h2><p><img src="/../upload/axios/3.png" alt="image"></p><h3 id="1-发送get请求"><a href="#1-发送get请求" class="headerlink" title="1).发送get请求:"></a>1).发送get请求:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复习常用的ajax请求方法:</span></span><br><span class="line">    <span class="comment">// 1.get:获取数据(只读不写)</span></span><br><span class="line">    <span class="comment">// 2.post:新增数据(可读可写)</span></span><br><span class="line">    <span class="comment">// 3.put:更新数据</span></span><br><span class="line">    <span class="comment">// 4.delete:删除数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取按钮</span></span><br><span class="line"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line"><span class="comment">// 1.GET(获取某一篇文章)</span></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发送ajax请求</span></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="comment">// 请求类型</span></span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="comment">// URL(获取第二篇文章)</span></span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">        <span class="comment">// 其他设置(url参数,请求头信息等..)</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果如下-成功读取到数据"><a href="#运行结果如下-成功读取到数据" class="headerlink" title="运行结果如下:(成功读取到数据)"></a>运行结果如下:(成功读取到数据)</h3><p><img src="/../upload/axios/4.png" alt="image"></p><h3 id="2-发送post请求"><a href="#2-发送post请求" class="headerlink" title="2).发送post请求:"></a>2).发送post请求:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.POST(新增某一篇文章)</span></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发送ajax请求</span></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="comment">// 请求类型</span></span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="comment">// URL(这里不用写指定id好,只需要写文件夹名即可)</span></span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">        <span class="comment">// 其他设置(url参数,请求头信息等..)</span></span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;hi!&#x27;</span>,</span><br><span class="line">            <span class="attr">author</span>:<span class="string">&#x27;jo&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果如下-成功添加数据"><a href="#运行结果如下-成功添加数据" class="headerlink" title="运行结果如下:(成功添加数据)"></a>运行结果如下:(成功添加数据)</h3><p><img src="/../upload/axios/5.png" alt="image"></p><h3 id="服务器内新增-id为3-的文章"><a href="#服务器内新增-id为3-的文章" class="headerlink" title="服务器内新增 id为3 的文章"></a>服务器内新增 id为3 的文章</h3><p><img src="/../upload/axios/6.png" alt="image"></p><h3 id="3-发送put请求"><a href="#3-发送put请求" class="headerlink" title="3).发送put请求:"></a>3).发送put请求:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.PUT(更新某一篇文章)</span></span><br><span class="line">btns[<span class="number">2</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发送ajax请求</span></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="comment">// 请求类型</span></span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">        <span class="comment">// URL(PUT更新需要指定更新文章,即这里需要加文章的id号)</span></span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts/3&#x27;</span>,</span><br><span class="line">        <span class="comment">// 其他设置(url参数,请求头信息等..)</span></span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;hi!&#x27;</span>,</span><br><span class="line">            <span class="attr">author</span>:<span class="string">&#x27;tom&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果如下-成功更新-更改-数据"><a href="#运行结果如下-成功更新-更改-数据" class="headerlink" title="运行结果如下:(成功更新(更改)数据)"></a>运行结果如下:(成功更新(更改)数据)</h3><p><img src="/../upload/axios/7.png" alt="image"></p><h3 id="服务器内新增-id为3-的文章的作者变为tom"><a href="#服务器内新增-id为3-的文章的作者变为tom" class="headerlink" title="服务器内新增 id为3 的文章的作者变为tom"></a>服务器内新增 id为3 的文章的作者变为tom</h3><p><img src="/../upload/axios/8.png" alt="image"></p><h3 id="3-发送delete请求"><a href="#3-发送delete请求" class="headerlink" title="3).发送delete请求:"></a>3).发送delete请求:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.delete(删除某一篇文章)</span></span><br><span class="line">btns[<span class="number">3</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发送ajax请求</span></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="comment">// 请求类型</span></span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">        <span class="comment">// URL(PUT更新需要指定删除文章,即这里需要加文章的id号)</span></span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts/3&#x27;</span>,</span><br><span class="line">        <span class="comment">// 其他设置(url参数,请求头信息等..)</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果如下-成功删除数据"><a href="#运行结果如下-成功删除数据" class="headerlink" title="运行结果如下:(成功删除数据)"></a>运行结果如下:(成功删除数据)</h3><p><img src="/../upload/axios/9.png" alt="image"></p><h3 id="服务器内删除掉了-id为3-的文章"><a href="#服务器内删除掉了-id为3-的文章" class="headerlink" title="服务器内删除掉了 id为3 的文章"></a>服务器内删除掉了 id为3 的文章</h3><p><img src="/../upload/axios/10.png" alt="image"></p><h1 id="5-返回结果的解析"><a href="#5-返回结果的解析" class="headerlink" title="5.返回结果的解析"></a>5.返回结果的解析</h1><p><img src="/../upload/axios/11.png" alt="image"></p><ul><li><strong>config：配置对象，里面包含请求类型（method），请求url，请求体等。</strong></li><li><strong>data：响应体的结果，服务器返回的结果，它是一个对象，因为axios会自动将服务器返回结果进行jason解析,即将响应体转成对象返回</strong></li><li><strong>headers：响应头信息.</strong></li><li><strong>request：原生的ajax请求对象，我们都知道axios是用来发送ajax请求的，而发送ajax请求就必须用到底层的XMLHttpRequest的实例对象，而这里的requset这个属性保存的就是当前axios在发送请求时所创建的ajax请求对象，也就是XMLHttpRequest的实例对象</strong></li><li><strong>status：响应状态码</strong></li><li><strong>statusText：响应状态字符串</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise拓展-async和await</title>
      <link href="/2022/07/23/Promise%E6%8B%93%E5%B1%95-async%E5%92%8Cawait/"/>
      <url>/2022/07/23/Promise%E6%8B%93%E5%B1%95-async%E5%92%8Cawait/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是-async-其实就跟then方法是基本一致的"><a href="#1-什么是-async-其实就跟then方法是基本一致的" class="headerlink" title="1.什么是 async(其实就跟then方法是基本一致的)"></a>1.什么是 <strong>async(其实就跟then方法是基本一致的)</strong></h1><p>  <strong>async 顾名思义就是异步的意思,它是ES2017标准中引入的一种新函数,它是Generator函数的语法糖,它是作用是简化异步操作,使得异步操作更加简单</strong></p><ul><li><strong>async函数的返回值为 promise 对象</strong></li><li><strong>promise 对象的结果由 async 函数执行的返回值决定</strong>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//几乎跟then方法是一模一样</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1. 如果返回值是一个非Promise类型的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//2. 如果返回的是一个Promise对象(返回的是resolve类型)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//3. 如果返回的是一个Promise对象(返回的是reject类型)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main4</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//4. 抛出异常</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;Oh NO&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">main1</span>());<span class="comment">//Promise &#123;&lt;fulfilled&gt;: &#x27;hello!&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">main2</span>());<span class="comment">//返回结果:状态为fulfilled的promise对象,返回值为OK</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">main3</span>());<span class="comment">//返回结果:状态为rejected的promise对象,返回值为Oh No</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">main4</span>());<span class="comment">//Promise &#123;&lt;rejected&gt;: &#x27;Oh NO&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下:"></a>结果如下:</h4><p><img src="/../upload/promise/async/1.png" alt="image"></p><h1 id="2-什么是-await"><a href="#2-什么是-await" class="headerlink" title="2.什么是 await ?"></a>2.什么是 <strong>await</strong> ?</h1><p> <strong>await顾名思义就是等待,它同样是ES2017中新引入的一种新表达式,用于嵌套async来使用,解决异步操作</strong></p><ul><li><strong>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值(数字,字符串,布尔类型等,运算也可以)</strong></li><li><strong>如果表达式是 promise 对象, await 返回的是 promise 成功的值(切记是成功的值)</strong></li><li><strong>如果表达式是其它值, 直接将此值作为 await 的返回值(即右侧是什么我就返回什么)</strong></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><ul><li><strong>1.await 必须写在 async 函数中, 但 async 函数中可以没有 await(就好比单相思)</strong></li><li><strong>2.如果 await 的 promise 失败了, 就会抛出异常, 则需要通过 try…catch 捕获处理</strong></li></ul><h3 id="普及一下try-catch语法"><a href="#普及一下try-catch语法" class="headerlink" title="普及一下try-catch语法:"></a>普及一下try-catch语法:</h3><ul><li><strong>try catch语句是JavaScript中一种处理异常的标准方式</strong>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//可能会导致错误的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="title function_">e</span>(error的缩写)) &#123;</span><br><span class="line">    <span class="comment">//在错误发生时该如何进行处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="await-的使用demo"><a href="#await-的使用demo" class="headerlink" title="await 的使用demo"></a><strong>await</strong> 的使用demo</h3>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//1. 右侧为promise的情况 await会返回Promise对象为成功状态时的值</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> p;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//2. 右侧为其他类型的数据,直接返回右侧变量值(即右侧是什么,我就给你返回什么)</span></span><br><span class="line">    <span class="comment">// 一般这种情况很少见,多数情况是 Promise对象</span></span><br><span class="line">    <span class="keyword">let</span> res2 = <span class="keyword">await</span> <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;Eorr&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//3. 如果promise是失败的状态就会抛出一个错误,这时我们就需要用try-catch来捕获处理这个错误</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> res3 = <span class="keyword">await</span> p;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">// 在这里获取失败的结果</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main1</span>();<span class="comment">//结果为:OK</span></span><br><span class="line"><span class="title function_">main2</span>();<span class="comment">//结果为:20</span></span><br><span class="line"><span class="title function_">main3</span>();<span class="comment">//结果为:Eorr</span></span><br></pre></td></tr></table></figure><h4 id="结果如下-1"><a href="#结果如下-1" class="headerlink" title="结果如下:"></a>结果如下:</h4><p><img src="/../upload/promise/async/2.png" alt="image"></p><h1 id="3-util-promisify-函数用法的讲解"><a href="#3-util-promisify-函数用法的讲解" class="headerlink" title="3.util.promisify 函数用法的讲解"></a>3.<strong>util.promisify</strong> 函数用法的讲解</h1><h2 id="什么是-util-promisify"><a href="#什么是-util-promisify" class="headerlink" title="什么是 util.promisify?"></a><strong>什么是 util.promisify?</strong></h2><ul><li><strong>util.promisify是在node.js 8.x版本中新增的一个工具，用于将老式的Error first callback转换为Promise对象，让老项目改造变得更为轻松。</strong></li><li><strong>首先要解释一下这种工具大致的实现思路，因为在Node中异步回调有一个约定：Error first，也就是说回调函数中的第一个参数一定要是Error对象，其余参数才是正确时的数据。</strong></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h3><ul><li><strong>传入一个错误优先的回调风格的函数(即形参要求错误优先(err,value)),返回一个promise版本</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入 util 模块</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="comment">//引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//返回一个新的函数</span></span><br><span class="line"><span class="comment">// fs.readFile就是一个错误优先的函数方法(readFile(&#x27;path&#x27;,(err,data)=&gt;&#123;&#125;))</span></span><br><span class="line"><span class="keyword">let</span> mineReadFile = util.<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接读取Promise对象里面的value值</span></span><br><span class="line"><span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/content.txt&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());<span class="comment">//转换buffer</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="结果如下-2"><a href="#结果如下-2" class="headerlink" title="结果如下:"></a>结果如下:</h4><p><img src="/../upload/promise/async/3.png" alt="image"></p><h1 id="async和await两者的结合使用大大方便了我们的开发-案例"><a href="#async和await两者的结合使用大大方便了我们的开发-案例" class="headerlink" title="async和await两者的结合使用大大方便了我们的开发(案例)"></a><strong>async和await</strong>两者的结合使用大大方便了我们的开发(案例)</h1><ul><li><strong>案例要求:读取resolve文件夹下面的三个文件:1.html 2.html和3.html</strong></li></ul><h2 id="第一种方式-使用回调函数"><a href="#第一种方式-使用回调函数" class="headerlink" title="第一种方式:使用回调函数"></a>第一种方式:使用回调函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回调函数的方式(存在回调地狱,存在错误要每一层去做if-else判断,非常麻烦)</span></span><br><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resource/1.html&#x27;</span>, <span class="function">(<span class="params">err, data1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resource/2.html&#x27;</span>, <span class="function">(<span class="params">err, data2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resource/3.html&#x27;</span>, <span class="function">(<span class="params">err, data3</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data1 + data2 + data3);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="第二种方式-async嵌套await"><a href="#第二种方式-async嵌套await" class="headerlink" title="第二种方式:async嵌套await"></a>第二种方式:async嵌套await</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有回调地狱,并且整体简洁高效</span></span><br><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mineReadFile = util.<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//读取第文件的内容</span></span><br><span class="line">        <span class="keyword">let</span> data1 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/1.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> data2 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/2.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> data3 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/3.html&#x27;</span>);</span><br><span class="line">        <span class="comment">// 没有错误则输出,有错误则抛出错误让下层的catch捕获</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data1 + data2 + data3);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">// 输出错误信息</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h4 id="结果如下-两者均一致"><a href="#结果如下-两者均一致" class="headerlink" title="结果如下(两者均一致):"></a>结果如下(两者均一致):</h4><p><img src="/../upload/promise/async/4.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改butterfly(3)-给博客添加侧边栏电子时钟</title>
      <link href="/2022/07/23/%E9%AD%94%E6%94%B9butterfly3/"/>
      <url>/2022/07/23/%E9%AD%94%E6%94%B9butterfly3/</url>
      
        <content type="html"><![CDATA[<h1 id="魔改butterfly主题3-给博客添加侧边栏电子时钟"><a href="#魔改butterfly主题3-给博客添加侧边栏电子时钟" class="headerlink" title="魔改butterfly主题3-给博客添加侧边栏电子时钟"></a>魔改butterfly主题3-给博客添加侧边栏电子时钟</h1><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤:"></a>实现步骤:</h3><ul><li><strong>安装必要依赖,在你的博客所在的根目录下,打开cmd命令窗口执行以下命令:</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-clock --save </span><br></pre></td></tr></table></figure></li><li><strong>在站点配置文件 _config.yml(是在themes &gt; butterfly目录下的) 添加配置项：</strong><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># electric_clock</span></span><br><span class="line"><span class="attr">electric_clock:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">loading:</span>   <span class="comment">#加载动画自定义 </span></span><br></pre></td></tr></table></figure></li></ul><h4 id="如图所示"><a href="#如图所示" class="headerlink" title="如图所示:"></a>如图所示:</h4><p><img src="/../upload/mogai3/1.png" alt="image"></p><h2 id="最终效果如图所示"><a href="#最终效果如图所示" class="headerlink" title="最终效果如图所示:"></a>最终效果如图所示:</h2><p><img src="/../upload/mogai3/2.png" alt="image"></p><blockquote><p>这篇博客引用了作者为”<strong>唐志远</strong>“的文章<br>原文链接为:<a href="https://tzy1997.com/articles/hexo1606/#%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%94%B5%E5%AD%90%E6%97%B6%E9%92%9F">唐志远的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise中的关键问题</title>
      <link href="/2022/07/23/Promise%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/23/Promise%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-一个-Promise-指定多个成功-x2F-失败回调函数-都会调用吗"><a href="#1-一个-Promise-指定多个成功-x2F-失败回调函数-都会调用吗" class="headerlink" title="1.一个 Promise 指定多个成功&#x2F;失败回调函数, 都会调用吗?"></a>1.一个 Promise 指定多个成功&#x2F;失败回调函数, 都会调用吗?</h1><ul><li><strong>答案是肯定的,当 promise 改变为对应状态时都会调用</strong></li></ul><h1 id="2-改变-promise-状态和指定回调函数谁先谁后"><a href="#2-改变-promise-状态和指定回调函数谁先谁后" class="headerlink" title="2.改变 promise 状态和指定回调函数谁先谁后?"></a>2.改变 promise 状态和指定回调函数谁先谁后?</h1><ul><li><strong>(1)都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</strong></li><li><strong>(2)如何先改状态再指定回调?</strong><ul><li><strong>① 在执行器中直接调用 resolve()&#x2F;reject()</strong></li><li><strong>② 延迟更长时间才调用 then()</strong></li></ul></li><li><strong>(3)什么时候才能得到数据?</strong><ul><li><strong>① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据</strong></li><li><strong>② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</strong></li></ul></li></ul><h1 id="3-Promise-then-返回的新-Promise-的结果状态由什么决定"><a href="#3-Promise-then-返回的新-Promise-的结果状态由什么决定" class="headerlink" title="3.Promise.then()返回的新 Promise 的结果状态由什么决定?"></a>3.Promise.then()返回的新 Promise 的结果状态由什么决定?</h1><ul><li><strong>(1)简单表达: 由 then()指定的回调函数执行的结果决定</strong></li><li><strong>(2)详细表达:</strong><ul><li><strong>① 如果抛出异常, 新 promise 变为rejected, reason 为抛出的异常</strong></li><li><strong>② 如果返回的是非 promise 的任意值, 新 promise 变为resolved, value 为返回的值</strong></li><li><strong>③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</strong></li></ul></li></ul><h1 id="4-Promise中的异常穿透特性"><a href="#4-Promise中的异常穿透特性" class="headerlink" title="4.Promise中的异常穿透特性"></a>4.Promise中的异常穿透特性</h1><ul><li><strong>(1)当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调</strong></li><li><strong>(2)前面任何操作出了异常, 都会传到最后失败的回调中处理</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">                <span class="comment">// reject(&#x27;Err&#x27;);</span></span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// console.log(111);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&#x27;失败啦!&#x27;</span>;</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);<span class="comment">//可以在最后的catch环节捕获第一层的错误</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下:"></a><strong>结果如下:</strong></h4><p><img src="/../upload/promise/key-question/1.png" alt="image"></p><h3 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明:"></a>解释说明:</h3><ul><li><strong>promise的链式调用中存在一种异常穿透的特性,就是我们可以在链式作用的最后加上一个catch方法来捕获整个链式调用过程中的错误,无需在链式调用的每一个环节参加catch方法来捕获错误</strong></li></ul><h1 id="5-中断-Promise-的链式调用"><a href="#5-中断-Promise-的链式调用" class="headerlink" title="5.中断 Promise 的链式调用?"></a>5.中断 Promise 的链式调用?</h1><ul><li><strong>(1)当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数</strong></li><li><strong>(2)办法: 在回调函数中返回一个 pendding 状态的 promise 对象</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">            <span class="comment">//有且只有一个方式:那就是返回一个pending状态的Promise对象,才能中断Promise1链条</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 输出结果只有111,无222,333</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="结果如下-1"><a href="#结果如下-1" class="headerlink" title="结果如下:"></a><strong>结果如下:</strong></h4><p><img src="/../upload/promise/key-question/2.png" alt="image"></p><h3 id="解释说明-1"><a href="#解释说明-1" class="headerlink" title="解释说明:"></a>解释说明:</h3><ul><li><strong>中断Promise链式调用的方法有且只有一种:那就是在你想要中断的环节当中添加一个pending状态的Promise对象返回值</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise中的常用API</title>
      <link href="/2022/07/23/Promise%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8API/"/>
      <url>/2022/07/23/Promise%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise中的常用API"><a href="#Promise中的常用API" class="headerlink" title="Promise中的常用API"></a><strong>Promise</strong>中的常用API</h1><h2 id="1-Promise中的构造函数-Promise-excutor"><a href="#1-Promise中的构造函数-Promise-excutor" class="headerlink" title="1.Promise中的构造函数 : Promise (excutor) {}"></a>1.Promise中的构造函数 : Promise (excutor) {}</h2><ul><li><strong>(1)executor 函数:执行器 (resolve, reject) &#x3D;&gt; {}</strong></li><li><strong>(2)resolve 函数: 内部定义成功时我们调用的函数 value &#x3D;&gt; {}</strong></li><li><strong>(3)reject 函数: 内部定义失败时我们调用的函数 reason &#x3D;&gt; {}</strong></li></ul><p> <strong>说明:</strong> executor 会在 Promise 内部<strong>立即同步调用</strong>,异步操作在执行器中执行</p><h4 id="函数解析"><a href="#函数解析" class="headerlink" title="函数解析:"></a>函数解析:</h4><p>我们可以通过 new Promise 来实例化对象,在new的时候,实例化需要接收一个参数,这个参数是一个函数类型的参数(可为箭头函数,也可为匿名函数),这个函数当中有两个形参:<strong>resolve</strong> 和 <strong>reject</strong> ,这两个形参也是一个函数,是Promise内部定义的,当Promise内异步任务为成功是就调用resolve,失败则调用reject</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1) 创建 promise 对象(pending 状态), 指定执行器函数</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 2) 在执行器函数中启动异步任务</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">            <span class="comment">// 3) 根据结果做不同处理</span></span><br><span class="line">            <span class="comment">// 3.1) 如果成功了, 调用 resolve(), 指定成功的 value, 变为 resolved 状态</span></span><br><span class="line">            <span class="keyword">if</span> (time%<span class="number">2</span>===<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="string">&#x27;成功的值 &#x27;</span>+ time)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 3.2) 如果失败了, 调用 reject(), 指定失败的 reason, 变为rejected 状态</span></span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;失败的值&#x27;</span> + time)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-Promise-prototype-then-方法-onResolved-onRejected-x3D-gt"><a href="#2-Promise-prototype-then-方法-onResolved-onRejected-x3D-gt" class="headerlink" title="2.Promise.prototype.then 方法: (onResolved, onRejected) &#x3D;&gt; {}"></a>2.Promise.prototype.then 方法: (onResolved, onRejected) &#x3D;&gt; {}</h2><ul><li><strong>(1)onResolved 函数: 成功的回调函数 (value) &#x3D;&gt; {}</strong></li><li><strong>(2)onRejected 函数: 失败的回调函数 (reason) &#x3D;&gt; {}</strong><br><strong>说明:</strong> 指定用于得到<strong>成功 value 的成功回调</strong>和用于得到<strong>失败 reason 的失败回调</strong>返回一个<strong>新的 promise 对象</strong></li></ul><h4 id="函数解析-1"><a href="#函数解析-1" class="headerlink" title="函数解析:"></a>函数解析:</h4><p>then方法是用来指定回调的,里面传递<strong>两个函数类型(一般用箭头函数形式)的参数</strong>(onResolved,onRejected),<strong>成功执行第一个(onResolved)函数,失败执行第二个函数(onRejected)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//能 promise 指定成功或失败的回调函数来获取成功的 vlaue 或失败的 reason </span></span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">value</span> =&gt;</span> &#123; <span class="comment">// 成功的回调函数 onResolved, 得到成功的 vlaue </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功的 value: &#x27;</span>, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="comment">// 失败的回调函数 onRejected, 得到失败的 reason </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败的 reason: &#x27;</span>, reason)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="3-Promise-prototype-catch-方法-onRejected-x3D-gt"><a href="#3-Promise-prototype-catch-方法-onRejected-x3D-gt" class="headerlink" title="3.Promise.prototype.catch 方法: (onRejected) &#x3D;&gt; {}"></a>3.Promise.prototype.catch 方法: (onRejected) &#x3D;&gt; {}</h2><ul><li><strong>用法与then想象,但是它只能用于指定失败的回调函数,不能用于指定成功的回调函数</strong><br> <strong>说明:</strong> then()的语法糖,  相当于: <strong>then(undefined, onRejected)</strong></li></ul><h4 id="函数解析-2"><a href="#函数解析-2" class="headerlink" title="函数解析:"></a>函数解析:</h4><p> <strong>catch</strong>方法其实就是用<strong>then</strong>做的一个单独独立的封装,它内部的实现原理就是用<strong>then方法</strong>单独指向<strong>reject状态</strong>而已<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//修改 promise 对象的状态</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行 catch 方法</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下:"></a><strong>结果如下:</strong></h4><p><img src="/../upload/promise/API/1.png" alt="image"></p><h2 id="4-Promise-resolve-方法-value-x3D-gt"><a href="#4-Promise-resolve-方法-value-x3D-gt" class="headerlink" title="4.Promise.resolve 方法: (value) &#x3D;&gt; {}"></a>4.Promise.resolve 方法: (value) &#x3D;&gt; {}</h2><ul><li><strong>(1)value: 成功的数据或 promise 对象</strong><br> <strong>说明:</strong> 返回一个成功&#x2F;失败的 <strong>promise 对象</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.传入非Promise类型对象,返回必然成功Promise对象</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="comment">//2.如果传入的参数为 Promise 对象, 则参数的结果决定了 resolve 的结果</span></span><br><span class="line">    <span class="comment">// 1).传入为reject类型的promise对象</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(&#x27;OK&#x27;);</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">&#125;));</span><br><span class="line">    <span class="comment">// 2).传入为resolve类型的promise对象</span></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">    <span class="comment">// reject(&#x27;Error&#x27;);</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1);<span class="comment">//结果为:Promise &#123;&lt;fulfilled&gt;: &#x27;hello&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2);<span class="comment">//结果为:Promise &#123;&lt;rejected&gt;: &#x27;Error&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p3);<span class="comment">//结果为:Promise &#123;&lt;fulfilled&gt;: &#x27;OK&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="函数解析-3"><a href="#函数解析-3" class="headerlink" title="函数解析:"></a>函数解析:</h4><p>相较于then和catch来说它有些不一样,resolve是属于Promise这个函数对象的,并不属于实例对象,作用是接收一个参数,返回一个成功或失败的Promise对象,其实它就是为了能够快速获得一个对象并且能够封装一个值,将这个值转化为一个Promise对象.</p><ul><li>如若传入的参数为 <strong>非Promise类型的对象</strong> ,<strong>返回的结果必然为成功的Peomise对象</strong>,返回值为你<strong>resolve()括号中的数值</strong></li><li>如若传入的参数为 <strong>Promise类型的对象</strong>,<strong>返回的结果则根据你传入的Promise的结果,如果你传入的是reject类型的Promise,这返回的就是reject,返回值为你reject()括号内的值,若为resolve也是类似</strong></li></ul><h4 id="结果如下-1"><a href="#结果如下-1" class="headerlink" title="结果如下:"></a><strong>结果如下:</strong></h4><p><img src="/../upload/promise/API/2.png" alt="image"></p><h2 id="5-Promise-reject-方法-reason-x3D-gt"><a href="#5-Promise-reject-方法-reason-x3D-gt" class="headerlink" title="5.Promise.reject 方法: (reason) &#x3D;&gt; {}"></a>5.Promise.reject 方法: (reason) &#x3D;&gt; {}</h2><ul><li><strong>(1)reason: 失败的原因</strong><br> <strong>说明:</strong> 只返回一个失败的 <strong>promise 对象</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;hello!&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;));</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;));</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);<span class="comment">//结果为:Promise &#123;&lt;rejected&gt;: &#x27;hello!&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1);<span class="comment">//结果为:Promise &#123;&lt;rejected&gt;: Promise&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2);<span class="comment">//结果为:Promise &#123;&lt;rejected&gt;: Promise&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="函数解析-4"><a href="#函数解析-4" class="headerlink" title="函数解析:"></a>函数解析:</h4><p>与resolve一样均是属于Promise这个函数对象的,并不属于实例对象,作用是接收一个参数,返回一个必然失败的Promise对象,其实它就是为了能够快速获得一个失败对象,将这个值转化为一个Promise对象.</p><ul><li>如若传入的参数为 <strong>非Promise类型的对象</strong> ,<strong>返回的结果必然为失败的Peomise对象</strong>,返回值为你<strong>reject()括号中的数值</strong></li><li>如若传入的参数为 <strong>Promise类型的对象</strong>,<strong>同返回一个必然失败的Promise对象,即便你传入的是resolve的Promise对象,返回的还是失败的Promise对象,但是返回的值就不是resolve()括号里面的值了,而是整一个对象,就是如果你给reject()里面传入一个resolve类型的Promise对象,返回的是一个失败的对象,返回值是整一个你传入的resolve类型Promise对象(即你传入什么Promise对象,就返回什么Promise对象)</strong></li></ul><h4 id="结果如下-2"><a href="#结果如下-2" class="headerlink" title="结果如下:"></a><strong>结果如下:</strong></h4><p><img src="/../upload/promise/API/3.png" alt="image"></p><h2 id="6-Promise-all-方法-promises-x3D-gt"><a href="#6-Promise-all-方法-promises-x3D-gt" class="headerlink" title="6.Promise.all 方法: (promises) &#x3D;&gt; {}"></a>6.Promise.all 方法: (promises) &#x3D;&gt; {}</h2><ul><li><strong>(1)promises: 包含 n 个 promise 的数组</strong><br> <strong>说明:</strong> 返回一个<strong>新的 promise</strong>, 只有<strong>所有</strong>的 promise 都成功才成功, <strong>只要有一个失败了就直接失败(相当于我们”与”,全真为真,一个假则为假)</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello!&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r1 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);<span class="comment">//全为成功,返回为fulfilled</span></span><br><span class="line"><span class="keyword">const</span> r2 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p4]);<span class="comment">//有一个失败,返回rejecte</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1);<span class="comment">//resolved</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r2);<span class="comment">//rejected</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="函数解析-5"><a href="#函数解析-5" class="headerlink" title="函数解析:"></a>函数解析:</h4><p><strong>该方法返回的Promise对象由数组中的成员决定,如果数组成员全为resolve,则返回的Promise对象为resolve,返回结果为每一个成员的返回值组成的数组,若有一个失败,则返回的Promise对象为reject,返回的结果为该reject类型Promise对象的返回值</strong></p><h4 id="结果如下-3"><a href="#结果如下-3" class="headerlink" title="结果如下:"></a><strong>结果如下:</strong></h4><p><img src="/../upload/promise/API/4.png" alt="image"></p><h2 id="7-Promise-race-方法-promises-x3D-gt"><a href="#7-Promise-race-方法-promises-x3D-gt" class="headerlink" title="7.Promise.race 方法: (promises) &#x3D;&gt; {}"></a>7.Promise.race 方法: (promises) &#x3D;&gt; {}</h2><ul><li><strong>(1)value: 成功的数据或 promise 对象</strong><br> <strong>说明:</strong> 返回一个<strong>新的 promise</strong>, <strong>第一个完成</strong>的 promise 的结果状态就是最终的结果状态(<strong>相当于数组成员之间进行赛跑,设第一个转变状态,就返回谁</strong>)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里设置一个定时器,故意调慢p1</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>)</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//返回结果:fulfilled Success</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="函数解析-6"><a href="#函数解析-6" class="headerlink" title="函数解析:"></a>函数解析:</h4><p>race的本身意思就是赛跑的意思,race()方法本身接受一个参数,这个参数一般也是由一个Promise组成的数组,返回结果也是一个Promise1对象,与all有点相像,返回结果的状态由数组成员中第一个改变状态的Promise成员决定,返回结果的状态与之保持一致</p><h4 id="结果如下-4"><a href="#结果如下-4" class="headerlink" title="结果如下:"></a><strong>结果如下:</strong></h4><p><img src="/../upload/promise/API/5.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise的介绍</title>
      <link href="/2022/07/23/Promise%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/07/23/Promise%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Promise-是什么"><a href="#1-Promise-是什么" class="headerlink" title="1.Promise 是什么?"></a>1.<strong>Promise</strong> 是什么?</h1><ul><li><strong>1.抽象表达:</strong><ul><li>1)Promise 是一门新的技术(ES6 规范)</li><li>2)Promise 是 JS 中进行异步编程的新解决方案备注：旧方案是单纯使用回调函数（解决回调地狱）</li></ul></li><li><strong>2.具体表达:</strong><ul><li>1)从语法上来说: Promise 是一个构造函数</li><li>2)从功能上来说: promise 对象用来封装一个异步操作并可以获取其成功&#x2F; 失败的结果值</li></ul></li></ul><h1 id="2-promise-的状态改变"><a href="#2-promise-的状态改变" class="headerlink" title="2.promise 的状态改变"></a>2.<strong>promise</strong> 的状态改变</h1><h2 id="一般有三种"><a href="#一般有三种" class="headerlink" title="一般有三种"></a>一般有三种</h2><ul><li><strong>pending</strong>: 它的意思是 “待定的，将发生的”，相当于是一个初始状态。创建Promise对象时，且没有调用resolve或者是reject方法，相当于是初始状态。这个初始状态会随着你调用resolve，或者是reject函数而切换到另一种状态。<br>   <img src="/../upload/promise/introduce/1.png" alt="image"></li><li><strong>reslove</strong>: 也叫<strong>fulfiller</strong>表示解决了，就是说这个承诺实现了。 要实现从pending到resolved的转变，需要在 创建Promise对象时，在函数体中调用了resolve方法(即第一个参数)。<br>   <img src="/../upload/promise/introduce/2.png" alt="image"></li><li><strong>rejected</strong>: 拒绝，失败。表示这个承诺没有做到，失败了。要实现从pending到rejected的转换，只需要在创建Promise对象时，调用reject函数。<br>   <img src="/../upload/promise/introduce/3.png" alt="image"></li></ul><h3 id="状态之间是可以相互转换的-但是这个过程是不可逆的"><a href="#状态之间是可以相互转换的-但是这个过程是不可逆的" class="headerlink" title="状态之间是可以相互转换的,但是这个过程是不可逆的"></a>状态之间是可以相互转换的,但是这个过程是不可逆的</h3><ul><li>1.pending 变为 resolved</li><li>2.pending 变为 rejected</li></ul><h3 id="说明-只有这-2-种-且一个-promise-对象只能改变一次无论变为成功还是失败-都会有一个结果数据-在then方法里面接收-成功的结果数据一般称为-value-失败的结果数据一般称为-reason"><a href="#说明-只有这-2-种-且一个-promise-对象只能改变一次无论变为成功还是失败-都会有一个结果数据-在then方法里面接收-成功的结果数据一般称为-value-失败的结果数据一般称为-reason" class="headerlink" title="说明: 只有这 2 种, 且一个 promise 对象只能改变一次无论变为成功还是失败, 都会有一个结果数据,在then方法里面接收,成功的结果数据一般称为 value, 失败的结果数据一般称为 reason"></a>说明: 只有这 2 种, 且一个 promise 对象只能改变一次无论变为成功还是失败, 都会有一个结果数据,在then方法里面接收,成功的结果数据一般称为 value, 失败的结果数据一般称为 reason</h3><h1 id="3-promise-的基本流程"><a href="#3-promise-的基本流程" class="headerlink" title="3.promise 的基本流程"></a>3.promise 的基本流程</h1><p><img src="/../upload/promise/introduce/4.png" alt="image"></p><h1 id="4-promise-的基本使用"><a href="#4-promise-的基本使用" class="headerlink" title="4.promise 的基本使用"></a>4.promise 的基本使用</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1) 创建 promise 对象(pending 状态), 指定执行器函数</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 2) 在执行器函数中启动异步任务</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">            <span class="comment">// 3) 根据结果做不同处理</span></span><br><span class="line">            <span class="comment">// 3.1) 如果成功了, 调用 resolve(), 指定成功的 value, 变为 resolved 状态</span></span><br><span class="line">            <span class="keyword">if</span> (time%<span class="number">2</span>===<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="string">&#x27;成功的值 &#x27;</span>+ time)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 3.2) 如果失败了, 调用 reject(), 指定失败的 reason, 变为rejected 状态</span></span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;失败的值&#x27;</span> + time)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4) 能 promise 指定成功或失败的回调函数来获取成功的 vlaue 或失败的 reason </span></span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">value</span> =&gt;</span> &#123; <span class="comment">// 成功的回调函数 onResolved, 得到成功的 vlaue </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功的 value: &#x27;</span>, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="comment">// 失败的回调函数 onRejected, 得到失败的 reason </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败的 reason: &#x27;</span>, reason)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Es6中的类与对象</title>
      <link href="/2022/07/20/Es6%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/07/20/Es6%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Es6中的类和对象"><a href="#Es6中的类和对象" class="headerlink" title="Es6中的类和对象"></a>Es6中的类和对象</h1><ul><li><p>相较于<strong>面向过程</strong>,<strong>面向对象</strong>更加贴近与我们的实际生活，可以使用<strong>面向对象</strong>来描述现实世界，但事物都分为具体事物和抽象事物。</p><ul><li>如一个手机就是一个抽象的事物(泛指的)</li><li>但是一台苹果X就是一个具体的事物(特指的)</li></ul></li><li><h3 id="面向对象的思维特点"><a href="#面向对象的思维特点" class="headerlink" title="面向对象的思维特点:"></a>面向对象的思维特点:</h3><ul><li><strong>1.抽取(抽象)对象的共用属性和行为方法组织(封装)成一个 类(模板)</strong><ul><li><strong>就像是每一台手机都能打电话,又有手机屏幕,都有电池,都有一个价格等…这就是手机的共同属性</strong></li></ul></li><li><strong>对 类 进行实例化,获取类的对象,如我们可以封装一个手机的 类 ,里面有名字,品牌,价格等属性,当我们调用这个 手机类 的时候,给他们赋予不一样的属性值就能产出 不同的手机,如我们给这个手机类的名字属性赋予:小米10, 品牌属性赋予:小米,那么再实例化这个类就能产出一台小米10的手机了</strong></li></ul><h4 id="所以面向对象编程考虑的就是有哪些对象-按照这些对象的思维特点-抽取它们的共同属性或方法-对象不断的创建出带有共同属性或者方法的对象-使用它们-指挥他们做事情"><a href="#所以面向对象编程考虑的就是有哪些对象-按照这些对象的思维特点-抽取它们的共同属性或方法-对象不断的创建出带有共同属性或者方法的对象-使用它们-指挥他们做事情" class="headerlink" title="所以面向对象编程考虑的就是有哪些对象,按照这些对象的思维特点,抽取它们的共同属性或方法,对象不断的创建出带有共同属性或者方法的对象,使用它们,指挥他们做事情"></a>所以面向对象编程考虑的就是有哪些对象,按照这些对象的思维特点,抽取它们的共同属性或方法,对象不断的创建出带有共同属性或者方法的对象,使用它们,指挥他们做事情</h4></li></ul><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象?"></a>什么是对象?</h2><ul><li>在现实生活中,万物皆对象,对象是一个具体的事物,比如一辆车,一本书,一个人等…</li><li>在 JavaScript 中，对象是一组无序的<strong>相关属性和方法的集合</strong>，所有的事物都是对象，例如字符串、数值、数组、函数等。</li></ul><h3 id="对象是由属性和方法组成的："><a href="#对象是由属性和方法组成的：" class="headerlink" title="对象是由属性和方法组成的："></a>对象是由属性和方法组成的：</h3><ul><li><strong>属性：事物的特征，在对象中用属性来表示（常用名词）</strong></li><li><strong>方法：事物的行为，在对象中用方法来表示（常用动词）</strong></li></ul><h2 id="什么是-类-class"><a href="#什么是-类-class" class="headerlink" title="什么是 类 class ?"></a>什么是 类 class ?</h2><ul><li><strong>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。</strong></li><li><strong>类抽象了对象的公共部分，它泛指某一大类（class）</strong></li><li><strong>对象特指某一个，通过类实例化一个具体的对象</strong><br>  <img src="/../upload/Es6/class/1.png" alt="image"></li><li><strong>上图中的设计图纸就是一个类,那辆车就是通过这个类实例化的对象</strong></li></ul><h1 id="重头戏-创建和使用-类"><a href="#重头戏-创建和使用-类" class="headerlink" title="重头戏:创建和使用 类"></a>重头戏:创建和使用 类</h1><ul><li><strong>注意： 类必须使用 new 实例化对象，方法之间不能加逗号分隔，同时方法不需要添加 function 关键字。</strong> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建类 class</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Star</span>&#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">name , age</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 我们类里面所有的函数不需要写function ,页不需要用&quot;,&quot;分割</span></span><br><span class="line">            <span class="title function_">sing</span>(<span class="params">song</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;唱的是&#x27;</span> + song);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用类 new(实例化对象)</span></span><br><span class="line">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>,<span class="string">&#x27;20&#x27;</span>);</span><br><span class="line">        <span class="comment">// 执行过程如下：</span></span><br><span class="line">        <span class="comment">// 1.你用 new 实例化对象，类就自动的调用 constructor 然后&#x27;刘德华&#x27;就会传递给constructor的形参 name ,name又赋值给this.name,而这个this是指向你创建的实例的,做因实例化对象内部就生成了一个 name : &#x27;刘德华&#x27; 属性</span></span><br><span class="line">        <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>,<span class="string">&#x27;20&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(zxy);</span><br><span class="line">        ldh.<span class="title function_">sing</span>(<span class="string">&#x27;开心马骝&#x27;</span>);</span><br><span class="line">        zxy.<span class="title function_">sing</span>(<span class="string">&#x27;饿狼传说&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1) 通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</span></span><br><span class="line">        <span class="comment">//(2) 类里面有个constructor 函数,可以接受传递过来的参数,同时自动返回实例对象,所以不需要调用return</span></span><br><span class="line">        <span class="comment">//(3) constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</span></span><br><span class="line">        <span class="comment">//(4) 生成实例 new 不能省略</span></span><br><span class="line">        <span class="comment">//(5) 最后注意语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>  <img src="/../upload/Es6/class/2.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es6 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown的常用语法</title>
      <link href="/2022/07/20/MarkDown%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/07/20/MarkDown%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-标题的几种写法"><a href="#1-标题的几种写法" class="headerlink" title="1.标题的几种写法"></a>1.标题的几种写法</h1><h2 id="1-第一种-标题前面-“-”"><a href="#1-第一种-标题前面-“-”" class="headerlink" title="1)第一种(标题前面 + “#”)"></a>1)第一种(标题前面 + “#”)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#一级标题</span><br><span class="line">##二级标题</span><br><span class="line">###三级标题</span><br><span class="line">####四级标题</span><br><span class="line">#####五级标题</span><br><span class="line">######六级标题</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/1.png" alt="image"></p><ul><li><strong>前面带#号，后面带文字，分别表示h1-h6,上图可以看出，只到h6，而且h1下面会有一条横线，注意，#号后面有空格</strong></li></ul><h2 id="2-第二种-标题下面-“-x3D-x3D-x3D-”或者”—“"><a href="#2-第二种-标题下面-“-x3D-x3D-x3D-”或者”—“" class="headerlink" title="2)第二种(标题下面 + “&#x3D;&#x3D;&#x3D;”或者”—“)"></a>2)第二种(标题下面 + “&#x3D;&#x3D;&#x3D;”或者”—“)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一级标题</span><br><span class="line">================</span><br><span class="line">二级标题</span><br><span class="line">---------------</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/2.png" alt="image"></p><ul><li><strong>这种方式好像只能表示一级和二级标题，而且&#x3D;和-的数量没有限制，只要大于一个就行</strong></li></ul><h2 id="3-第三种-标题前后都-“-”"><a href="#3-第三种-标题前后都-“-”" class="headerlink" title="3)第三种(标题前后都 + “#”)"></a>3)第三种(标题前后都 + “#”)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题 #</span><br><span class="line">## 二级标题 ##</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/3.png" alt="image"></p><ul><li><strong>这里的标题支持h1-h6，为了减少篇幅，我就偷个懒，只写前面二个，这个比较好理解，相当于标签闭合，注意，标题与#号要有空格</strong></li><li><strong>那既然3种都可以使用，可不可以混合使用呢？我试了一下，是可以的，但是为了让页面标签的统一性，不建议混合使用，推荐使用第一种，比较简洁，全面</strong></li></ul><h1 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h1><ul><li><strong>我们都知道，列表分为有序列表和无序列表，下面直接展示2种列表的写法：</strong></li></ul><h2 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 列表1</span><br><span class="line">+ 列表2</span><br><span class="line">- 列表3</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/4.png" alt="image"></p><ul><li><strong>可以看到，无序列表可以用* ， + ， — 来创建，用在线编辑器看，实际上是转换成了ul&gt;li ，所以使用哪个都可以，推荐使用*吧</strong></li></ul><h2 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 有序列表</span><br><span class="line">1. 列表1</span><br><span class="line">2. 列表2</span><br><span class="line">3. 列表3</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/5.png" alt="image"></p><ul><li><strong>有序列表就相对简单一点，只有这一种方式，注意，数字后面的点只能是英文的点，特别注意，有序列表的序号是根据第一行列表的数字顺序来的!</strong></li></ul><h3 id="比如"><a href="#比如" class="headerlink" title="比如:"></a>比如:</h3><p>  <img src="/../upload/markdown/6.png" alt="image"> <img src="/../upload/markdown/7.png" alt="image"></p><ul><li><strong>序号是乱的 3 9 1， 但是还是显示 3 4 5 ，这点必须注意了</strong></li></ul><h1 id="3-区块引用"><a href="#3-区块引用" class="headerlink" title="3.区块引用"></a>3.区块引用</h1><ul><li><strong>比如说，你想对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语句</strong>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 不以结婚为目的的谈恋爱都是耍流氓</span><br><span class="line">    &gt;这是毛主席说的</span><br><span class="line">- 前方高能</span><br><span class="line">    &gt; 注意:这里是为了提醒前面有很刺激的事情发生,请做好准备</span><br></pre></td></tr></table></figure>  <img src="/../upload/markdown/8.png" alt="image"></li><li><strong>无序列表下方的便是引用，可以有多种用途，看你的需求了，用法就是在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格.</strong></li><li><strong>引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等</strong></li></ul><h3 id="另外-引用里面还可以继续套引用"><a href="#另外-引用里面还可以继续套引用" class="headerlink" title="另外 引用里面还可以继续套引用"></a>另外 引用里面还可以继续套引用</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;一级以用</span><br><span class="line">&gt;&gt;二级引用</span><br><span class="line">&gt;&gt;&gt;三级以用</span><br><span class="line">&gt;&gt;&gt;&gt;四级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;五级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;六级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;七级引用</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/9.png" alt="image"></p><h1 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h1><ul><li><em><em>分割线可以由</em> - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</em>*  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">********</span><br><span class="line">--------</span><br><span class="line">- - - - </span><br><span class="line">* * *</span><br><span class="line">----------</span><br><span class="line">- - - - </span><br></pre></td></tr></table></figure>  <img src="/../upload/markdown/10.png" alt="image"></li><li><strong>为了代码的排版好看，可以自己定规则，前面有用到星号，建议用减号</strong></li></ul><h1 id="5-链接"><a href="#5-链接" class="headerlink" title="5.链接"></a>5.链接</h1><ul><li><strong>支持2种链接方式：行内式和参数式，不管是哪一种，链接文字都是用 [方括号] 来标记。</strong></li></ul><h2 id="1-行内式"><a href="#1-行内式" class="headerlink" title="1).行内式"></a>1).行内式</h2>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 行内式</span><br><span class="line">[妙语连珠](http://www.abcd.com) 是什么意思</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/11.png" alt="image"></p><ul><li><strong>上图可知，行内式的链接格式是：链接的文字放在[]中，链接地址放在随后的（）中</strong></li></ul><h2 id="2-参数式"><a href="#2-参数式" class="headerlink" title="2).参数式"></a>2).参数式</h2>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 参数</span><br><span class="line">[name](http://www.abcd.com) &quot;名称&quot;</span><br><span class="line">[home](http://www.abcd.com) &quot;首页&quot;</span><br><span class="line">[也支持中文](http://www.abcd.com) &quot;..&quot;</span><br><span class="line"></span><br><span class="line">这里是[name],这里是[home],这里页是[也支持中文]</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/12.png" alt="image"></p><ul><li><strong>这就好理解了，就是把链接当成参数，适合多出使用相同链接的场景，注意参数的对应关系</strong></li></ul><h1 id="6-图片"><a href="#6-图片" class="headerlink" title="6.图片"></a>6.图片</h1><ul><li><strong>图片也有2种方式：行内式和参数式</strong>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![image](../upload/markdown/12.png)</span><br><span class="line"> [博客园]:(../upload/markdown/12.png)</span><br><span class="line"> 参数式图片,这里是![博客园]</span><br></pre></td></tr></table></figure></li><li><strong>用法跟链接的基本一样，唯一的不同就是，图片前面要写一个！（这是必须的），没什么好说的</strong></li></ul><h1 id="7-代码框-这个没啥好说的"><a href="#7-代码框-这个没啥好说的" class="headerlink" title="7.代码框(这个没啥好说的)"></a>7.代码框(这个没啥好说的)</h1>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般是用:</span><br><span class="line"> ```(键盘左上角,切记一定是3个)</span><br><span class="line">代码编写区域</span><br><span class="line"> ```(键盘左上角,切记一定是3个)</span><br></pre></td></tr></table></figure><h1 id="8-表格-比较麻烦"><a href="#8-表格-比较麻烦" class="headerlink" title="8.表格(比较麻烦)"></a>8.表格(比较麻烦)</h1>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 表格</span><br><span class="line">| name | age | sex |</span><br><span class="line">|:----:|:---:|:---:|</span><br><span class="line">| tony | 20  | 男  |</span><br><span class="line">| lucy | 18  | 女  |</span><br><span class="line"></span><br><span class="line">表头!  |  表头2</span><br><span class="line">------- | -----------</span><br><span class="line">Content Cell | Content Cell</span><br><span class="line">Content Cell | Content Cell</span><br><span class="line"></span><br><span class="line">学号 | 姓名 | 分数</span><br><span class="line">  -  |  -   |  -</span><br><span class="line">小明 | 男   | 75</span><br><span class="line">小红 | 女   | 79</span><br><span class="line">小陆 | 男   | 92</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/13.png" alt="image"></p><ul><li><strong>从这3种不同写法看，表格的格式不一定要对的非常齐，但是为了好看，对齐肯定是最好的，第一种的分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中，还是有点意思的，不过现实出来的结果是，表格外面并没有线框包起来，不知道别人的怎么弄的</strong></li></ul><h1 id="9-强调"><a href="#9-强调" class="headerlink" title="9.强调"></a>9.强调</h1>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 强调</span><br><span class="line">*字体倾斜*</span><br><span class="line">_字体倾斜_</span><br><span class="line">**字体加粗**</span><br><span class="line">__字体加粗__</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/14.png" alt="image"></p><ul><li><strong>一个星号或者是一个下划线包起来，会转换为<em>倾斜，如果是2个，会转换为<strong>加粗</strong></li></ul><h1 id="10-转义"><a href="#10-转义" class="headerlink" title="10.转义"></a>10.转义</h1>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 转义</span><br><span class="line">* \\</span><br><span class="line">* \`</span><br><span class="line">* \~</span><br><span class="line">* \*</span><br><span class="line">* \_</span><br><span class="line">* \-</span><br><span class="line">* \+</span><br><span class="line">* \.</span><br><span class="line">* \!</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/15.png" alt="image"></p><ul><li><strong>就不一一列举了，基本上跟js转义是一样的</strong></li></ul><h1 id="11-删除线"><a href="#11-删除线" class="headerlink" title="11.删除线"></a>11.删除线</h1>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 删除线</span><br><span class="line">~~请删掉我把~~</span><br></pre></td></tr></table></figure><p>  <img src="/../upload/markdown/16.png" alt="image"></p><h2 id="以上便是编写md文档的常用语法了-感谢观看"><a href="#以上便是编写md文档的常用语法了-感谢观看" class="headerlink" title="以上便是编写md文档的常用语法了!感谢观看!!"></a>以上便是编写md文档的常用语法了!感谢观看!!</h2><blockquote><p>这篇博客引用了作者为”<strong>斧子兔</strong>“的文章<br>原文链接为:<a href="https://www.cnblogs.com/fuzitu/p/10471073.html">CSDN</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown的常用语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象和面向过程的编程思想对比</title>
      <link href="/2022/07/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/07/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="编程的两大思想"><a href="#编程的两大思想" class="headerlink" title="编程的两大思想"></a><strong>编程的两大思想</strong></h1><ul><li><strong>1.面向过程(Procedure-Oriented programming)<strong>：是一种</strong>以过程为中心</strong>的编程思想。这些都是以什么正在发生为主要目标进行编程，直白点说就是分析一个要求实现所需要的步骤，然后一步一步的将这些步骤实现，举个例子：将大象装进冰箱需要三步：打开冰箱——装进大象——关上冰箱。<br>  <img src="/../upload/pop-oop/1.png" alt="image"></li><li><strong>2.面向对象(Object-Oriented programming)<strong>：作为一种新的编程思想，其本质是将要求</strong>分解成一个个对象</strong>，<strong>给他们赋予一些独特的属性或者方法</strong>，然后对象之间相互合作实现要求。还是原来的那个例子，大象装进冰箱，用面向对象的编程思想的话就是这样解决的：<ul><li>封装两个<strong>对象</strong>：<ul><li><strong>大象对象</strong>：属性或方法：进入冰箱</li><li><strong>冰箱对象</strong>：属性或方法：打开冰箱，关闭冰箱</li></ul></li><li>最后调用这些对象的属性或者方法来解决问题<br>  <img src="/../upload/pop-oop/2.png" alt="image"></li></ul></li></ul><h2 id="面向对象的特性："><a href="#面向对象的特性：" class="headerlink" title="面向对象的特性："></a>面向对象的特性：</h2><h3 id="1、封装性-2、继承性-3、多态性"><a href="#1、封装性-2、继承性-3、多态性" class="headerlink" title="1、封装性  2、继承性  3、多态性"></a>1、封装性  2、继承性  3、多态性</h3><p>  <img src="/../upload/pop-oop/3.png" alt="image"></p><h2 id="面向过程编程思想的优点：-适用于简单的程序需求"><a href="#面向过程编程思想的优点：-适用于简单的程序需求" class="headerlink" title="面向过程编程思想的优点：(适用于简单的程序需求)"></a>面向过程编程思想的优点：(适用于简单的程序需求)</h2><ul><li><strong>性能比面面向对象高，适合与硬件紧密联系起来，例如单片机编程就经常使用面向过程编程。</strong></li></ul><h2 id="面向对象编程思想的优点：-适用于复杂，大型的项目需求"><a href="#面向对象编程思想的优点：-适用于复杂，大型的项目需求" class="headerlink" title="面向对象编程思想的优点：(适用于复杂，大型的项目需求)"></a>面向对象编程思想的优点：(适用于复杂，大型的项目需求)</h2><ul><li><strong>易于维护，易于复用，易于扩展，由于面向对象有封装性，继承性和多态性的特点，可以设计出低耦合的系统，是系统更加灵活，易于维护。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象和面向过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise解决回调地狱</title>
      <link href="/2022/07/19/Promise%E8%A7%A3%E5%86%B3%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1/"/>
      <url>/2022/07/19/Promise%E8%A7%A3%E5%86%B3%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise解决回调地狱问题"><a href="#Promise解决回调地狱问题" class="headerlink" title="Promise解决回调地狱问题"></a><strong>Promise</strong>解决回调地狱问题</h1><h2 id="什么是Promise？"><a href="#什么是Promise？" class="headerlink" title="什么是Promise？"></a>什么是<strong>Promise</strong>？</h2><ul><li><strong>Promise</strong> 是<strong>ES6</strong> 引入的异步编程的新解决方案。语法上 <strong>Promise</strong> 是一个构造函数， 用来<strong>封装异步操作</strong>并可以获取其成功或失败的结果。</li></ul><h2 id="什么是回调地狱？"><a href="#什么是回调地狱？" class="headerlink" title="什么是回调地狱？"></a>什么是<strong>回调地狱</strong>？</h2><ul><li>所谓回调地狱就是在回调函数里面不断的嵌套回调函数，这样就会导致代码不断缩进，可读性就会变得非常的差。</li><li>比如我要执行1秒打印一个人的姓名：<br>  <img src="/../upload/promise/1.png" alt="image"></li></ul><h2 id="这里我们可以使用Promise来解决回调地狱的问题"><a href="#这里我们可以使用Promise来解决回调地狱的问题" class="headerlink" title="这里我们可以使用Promise来解决回调地狱的问题"></a>这里我们可以使用<strong>Promise</strong>来解决回调地狱的问题</h2><ul><li>因为<strong>Promise</strong>存在一种链式调用</li><li>我们可以调用<strong>Promise</strong>中的<strong>then</strong>方法构成<strong>链式调用</strong>，代码如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const p = new Promise((reslove , reject) =&gt;&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        var s = &#x27;老一&#x27;;</span><br><span class="line">        reslove(s);</span><br><span class="line">    &#125; , 1000)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.then(function(value)&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">    return new Promise((reslove , reject) =&gt;&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            var s = &#x27;老二&#x27;;</span><br><span class="line">            reslove(s);</span><br><span class="line">        &#125; , 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(function(value)&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">    return new Promise((reslove , reject) =&gt;&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            var s = &#x27;老三&#x27;;</span><br><span class="line">            reslove(s);</span><br><span class="line">        &#125; , 1000)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(function(value)&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">    return new Promise((reslove , reject) =&gt;&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            var s = &#x27;老四&#x27;;</span><br><span class="line">            reslove(s);</span><br><span class="line">        &#125; , 1000)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(function(value)&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">    return new Promise((reslove , reject) =&gt;&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            var s = &#x27;老五&#x27;;</span><br><span class="line">            reslove(s);</span><br><span class="line">        &#125; , 1000)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(function(value)&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">    return new Promise((reslove , reject) =&gt;&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            var s = &#x27;老六&#x27;;</span><br><span class="line">            reslove(s);</span><br><span class="line">        &#125; , 1000)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(function(value)&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="运行结果如下"><a href="#运行结果如下" class="headerlink" title="运行结果如下:"></a>运行结果如下:</h2><p><img src="/../upload/promise/2.png" alt="image"></p><h3 id="输出结果是一致的，但是解决了回调地狱的问题"><a href="#输出结果是一致的，但是解决了回调地狱的问题" class="headerlink" title="输出结果是一致的，但是解决了回调地狱的问题"></a><strong>输出结果是一致的，但是解决了回调地狱的问题</strong></h3><h2 id="原理刨析-链式调用的原理"><a href="#原理刨析-链式调用的原理" class="headerlink" title="原理刨析:(链式调用的原理)"></a><strong>原理刨析:(链式调用的原理)</strong></h2><ul><li><strong>调用 then 方法 then方法的返回结果是 Promise 对象, 对象状态由回调函数的执行结果决定</strong><ul><li>1).非 promise 类型的属性, 状态为成功或者失败, 返回值就是return后面跟着的值</li><li>2).是 promise 类型的属性, 状态为成功或者失败, 返回值就是return后面跟着的新的promise对象的reslove()或者reject()</li></ul></li><li><strong>在我看来，之所以Promise能够解决回调地狱的问题主要归功于 then 方法，then方法里面有一个return属性，而这个return属性当返回的是一个Promise对象时，那么如果后面还有嵌套的.then的话，返回的Promise对象就直接对接后面的.then方法，相当于上层Promise对象返回的新Promise对象就继续对接后面的.then方法，以此类推来解决回调地狱。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端知识分享 </category>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git中常见的报错</title>
      <link href="/2022/07/18/git%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8A%A5%E9%94%99/"/>
      <url>/2022/07/18/git%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="Git常见错误1"><a href="#Git常见错误1" class="headerlink" title="Git常见错误1:"></a>Git常见错误1:</h2><ul><li><h3 id="在git-bash中输入指令-git-status查看本地库状态时报错"><a href="#在git-bash中输入指令-git-status查看本地库状态时报错" class="headerlink" title="在git bash中输入指令:git status查看本地库状态时报错:"></a>在git bash中输入指令:git status查看本地库状态时报错:</h3> <img src="/../upload/git/git-wrong/1.png" alt="image"></li><li><h3 id="原因"><a href="#原因" class="headerlink" title="原因 :"></a>原因 :</h3></li><li>这个错误说明了没有 .git这样的一个目录，所以只需要 git init一下，就可以解决了，然后再重新建立远程连接即可.</li></ul><h2 id="Git常见错误2"><a href="#Git常见错误2" class="headerlink" title="Git常见错误2:"></a>Git常见错误2:</h2><ul><li><h3 id="在git-bash中输入指令-git-status查看本地库状态时报错-1"><a href="#在git-bash中输入指令-git-status查看本地库状态时报错-1" class="headerlink" title="在git bash中输入指令:git status查看本地库状态时报错:"></a>在git bash中输入指令:git status查看本地库状态时报错:</h3> <img src="/../upload/git/git-wrong/2.png" alt="image"></li><li><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因 :"></a>原因 :</h3></li><li>原因是在 xxx&#x2F;文件夹下有隐藏文件，删除掉即可(因为这是我博客的文件夹,里面存在.git的吟唱文件,执行git init时添加的,用于初始化本地库的)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
            <tag> git中常用的报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git中常用的linux指令</title>
      <link href="/2022/07/18/git%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84linux%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/07/18/git%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84linux%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git中常用的linux指令有如下几个"><a href="#git中常用的linux指令有如下几个" class="headerlink" title="git中常用的linux指令有如下几个"></a><strong>git中常用的linux指令有如下几个</strong></h1><ul><li><h3 id="1、cd-改变目录-进入指定文件夹-。"><a href="#1、cd-改变目录-进入指定文件夹-。" class="headerlink" title="1、cd : 改变目录(进入指定文件夹)。"></a>1、cd : 改变目录(进入指定文件夹)。</h3> <img src="/../upload/git/git-linux-command/1.png" alt="image"></li><li><h3 id="2、cd-回退到上一个目录，直接cd进入默认目录"><a href="#2、cd-回退到上一个目录，直接cd进入默认目录" class="headerlink" title="2、cd .. : 回退到上一个目录，直接cd进入默认目录"></a>2、cd .. : 回退到上一个目录，直接cd进入默认目录</h3></li><li><h3 id="3、cd-：返回最近访问目录"><a href="#3、cd-：返回最近访问目录" class="headerlink" title="3、cd -  ：返回最近访问目录"></a>3、cd -  ：返回最近访问目录</h3> <img src="/../upload/git/git-linux-command/2.png" alt="image"></li><li><h3 id="4、pwd-显示当前所在的目录路径"><a href="#4、pwd-显示当前所在的目录路径" class="headerlink" title="4、pwd : 显示当前所在的目录路径"></a>4、pwd : 显示当前所在的目录路径</h3> <img src="/../upload/git/git-linux-command/3.png" alt="image"></li><li><h3 id="5、ls-ll-都是列出当前目录中的所有文件，相较于ls，ll列出的内容更为详细（包括权限、所属用户和组、大小、时间、名称等）"><a href="#5、ls-ll-都是列出当前目录中的所有文件，相较于ls，ll列出的内容更为详细（包括权限、所属用户和组、大小、时间、名称等）" class="headerlink" title="5、ls(ll): 都是列出当前目录中的所有文件，相较于ls，ll列出的内容更为详细（包括权限、所属用户和组、大小、时间、名称等）"></a>5、ls(ll): 都是列出当前目录中的所有文件，相较于ls，ll列出的内容更为详细（包括权限、所属用户和组、大小、时间、名称等）</h3> <img src="/../upload/git/git-linux-command/4.png" alt="image"><br> <img src="/../upload/git/git-linux-command/5.png" alt="image"></li><li><h3 id="6、ls-a-显示该文件夹中的隐藏文件"><a href="#6、ls-a-显示该文件夹中的隐藏文件" class="headerlink" title="6、ls -a : 显示该文件夹中的隐藏文件"></a>6、ls -a : 显示该文件夹中的隐藏文件</h3></li><li><h3 id="7、ls-l-列出文件的详细信息。"><a href="#7、ls-l-列出文件的详细信息。" class="headerlink" title="7、ls -l : 列出文件的详细信息。"></a>7、ls -l : 列出文件的详细信息。</h3></li><li><h3 id="8、touch-新建一个文件-如-touch-index-js-就会在当前目录下新建一个index-js文件。"><a href="#8、touch-新建一个文件-如-touch-index-js-就会在当前目录下新建一个index-js文件。" class="headerlink" title="8、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。"></a>8、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</h3> <img src="/../upload/git/git-linux-command/6.png" alt="image"></li><li><h3 id="9、rm-删除一个文件-rm-index-js-就会把index-js文件删除。"><a href="#9、rm-删除一个文件-rm-index-js-就会把index-js文件删除。" class="headerlink" title="9、rm: 删除一个文件, rm index.js 就会把index.js文件删除。"></a>9、rm: 删除一个文件, rm index.js 就会把index.js文件删除。</h3> <img src="/../upload/git/git-linux-command/7.png" alt="image"></li><li><h3 id="10、mkdir-新建一个目录-就是新建一个文件夹"><a href="#10、mkdir-新建一个目录-就是新建一个文件夹" class="headerlink" title="10、mkdir: 新建一个目录,就是新建一个文件夹"></a>10、mkdir: 新建一个目录,就是新建一个文件夹</h3></li><li><h3 id="11、rm-r-删除一个文件夹-rm-r-src-删除src目录rm-rf-x2F-切勿在Linux中尝试！删除电-脑中全部文件！"><a href="#11、rm-r-删除一个文件夹-rm-r-src-删除src目录rm-rf-x2F-切勿在Linux中尝试！删除电-脑中全部文件！" class="headerlink" title="11、rm -r : 删除一个文件夹, rm -r src 删除src目录rm -rf &#x2F; 切勿在Linux中尝试！删除电## 脑中全部文件！"></a>11、rm -r : 删除一个文件夹, rm -r src 删除src目录rm -rf &#x2F; 切勿在Linux中尝试！删除电## 脑中全部文件！</h3></li><li><h3 id="12、mv-移动文件-mv-index-html-src-。index-html-是我们要移动的文件-src-是目标文件夹-当然-这样写-必须保证文件和目标文件夹在同一目录下。"><a href="#12、mv-移动文件-mv-index-html-src-。index-html-是我们要移动的文件-src-是目标文件夹-当然-这样写-必须保证文件和目标文件夹在同一目录下。" class="headerlink" title="12、mv : 移动文件, mv index.html src 。index.html 是我们要移动的文件, src 是目标文件夹## ,当然, 这样写,必须保证文件和目标文件夹在同一目录下。"></a>12、mv : 移动文件, mv index.html src 。index.html 是我们要移动的文件, src 是目标文件夹## ,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</h3></li><li><h3 id="13、reset-重新初始化终端-x2F-清屏。"><a href="#13、reset-重新初始化终端-x2F-清屏。" class="headerlink" title="13、reset : 重新初始化终端&#x2F;清屏。"></a>13、reset : 重新初始化终端&#x2F;清屏。</h3></li><li><h3 id="14、clear-清屏。"><a href="#14、clear-清屏。" class="headerlink" title="14、clear : 清屏。"></a>14、clear : 清屏。</h3></li><li><h3 id="15、history-查看命令历史。"><a href="#15、history-查看命令历史。" class="headerlink" title="15、history : 查看命令历史。"></a>15、history : 查看命令历史。</h3></li><li><h3 id="16、help-帮助。"><a href="#16、help-帮助。" class="headerlink" title="16、help : 帮助。"></a>16、help : 帮助。</h3></li><li><h3 id="17、exit-退出。"><a href="#17、exit-退出。" class="headerlink" title="17、exit : 退出。"></a>17、exit : 退出。</h3></li><li><h3 id="18、-表示注释"><a href="#18、-表示注释" class="headerlink" title="18、# : 表示注释"></a>18、# : 表示注释</h3></li><li><h3 id="19、cat-在控制台中显示文件的全部信息-即打开该文件"><a href="#19、cat-在控制台中显示文件的全部信息-即打开该文件" class="headerlink" title="19、cat : 在控制台中显示文件的全部信息,即打开该文件"></a>19、cat : 在控制台中显示文件的全部信息,即打开该文件</h3></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
            <tag> git中常用的linux指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习笔记(4)-git远程库操作</title>
      <link href="/2022/07/18/git%E8%BF%9C%E7%A8%8B%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/07/18/git%E8%BF%9C%E7%A8%8B%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="git远程库操作指令"><a href="#git远程库操作指令" class="headerlink" title="git远程库操作指令"></a><strong>git</strong>远程库操作指令</h1><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v                      查看当前所有远程地址别名</span><br><span class="line">git remote add 别名 远程地址        起别名</span><br><span class="line">git push 别名 分支                  推送本地分支上的内容到远程仓库</span><br><span class="line">git clone 远程地址                  将远程仓库的内容克隆到本地</span><br><span class="line">git pull 远程库地址别名 远程分支名   将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</span><br></pre></td></tr></table></figure></code></pre><ul><li><h3 id="1-创建远程仓库别名-实操"><a href="#1-创建远程仓库别名-实操" class="headerlink" title="1.创建远程仓库别名(实操)"></a>1.创建远程仓库别名(实操)</h3><ul><li><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v 查看当前所有远程地址别名</span><br><span class="line">git remote add 别名 远程地址</span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例"><a href="#实操案例" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command3/1.png" alt="image"></li><li><strong>这个地址在创建完远程仓库后生成的连接，如图所示红框中</strong><br><img src="/../upload/git/git-command3/2.png" alt="image"></li></ul></li><li><h3 id="2-推送本地分支到远程仓库-实操"><a href="#2-推送本地分支到远程仓库-实操" class="headerlink" title="2.推送本地分支到远程仓库(实操)"></a>2.推送本地分支到远程仓库(实操)</h3><ul><li><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push 别名 分支</span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例-1"><a href="#实操案例-1" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command3/3.png" alt="image"></li><li><strong>此时发现已将我们master 分支上的内容推送到GitHub 创建的远程仓库。</strong><br><img src="/../upload/git/git-command3/4.png" alt="image"></li></ul></li><li><h3 id="3-克隆远程仓库到本地-实操"><a href="#3-克隆远程仓库到本地-实操" class="headerlink" title="3.克隆远程仓库到本地(实操)"></a>3.克隆远程仓库到本地(实操)</h3><ul><li><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone 远程地址</span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例-2"><a href="#实操案例-2" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command3/5.png" alt="image"></li><li><strong>克隆结果：1、拉取代码 2、初始化本地仓库 3、自动帮你创建别名(origin)</strong><br><img src="/../upload/git/git-command3/6.png" alt="image"><br><img src="/../upload/git/git-command3/7.png" alt="image"></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>你开始对本地代码动手编写之前，一个好习惯是先把本地代码更新一下，通过pull操作使本地库在开始动手之前的那一刻与远程库版本一致，再进行本地代码的撰写，这样写完以后才push到远程仓库。</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
            <tag> 远程库操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习笔记(3)-git的常用指令(2)</title>
      <link href="/2022/07/18/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A42/"/>
      <url>/2022/07/18/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A42/</url>
      
        <content type="html"><![CDATA[<h1 id="git的分支操作"><a href="#git的分支操作" class="headerlink" title="git的分支操作"></a><strong>git</strong>的分支操作</h1><ul><li><h2 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a><strong>什么是分支</strong></h2><ul><li>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）<br> <img src="/../upload/git/git-command2/1.png" alt="image"></li><li>Hot-fix(热修),表示紧急处理当前的分支,feature表示分支版本的新增功能,后续可以与主分支合并成为新的版本。</li></ul><h2 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a><strong>分支的好处</strong></h2><ul><li>同时并行推进多个功能开发，提高开发效率。</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</li></ul></li><li><h2 id="分支常用指令"><a href="#分支常用指令" class="headerlink" title="分支常用指令"></a><strong>分支常用指令</strong></h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch 分支名           创建分支</span><br><span class="line">git branch -v               查看分支</span><br><span class="line">git checkout 分支名         切换分支</span><br><span class="line">git merge 分支名            把指定的分支合并到当前分支上</span><br></pre></td></tr></table></figure></li><li><h3 id="1-查看分支-实操"><a href="#1-查看分支-实操" class="headerlink" title="1.查看分支(实操)"></a>1.查看分支(实操)</h3><ul><li><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -v </span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例"><a href="#实操案例" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command2/2.png" alt="image"></li></ul></li><li><h3 id="2-创建分支-实操"><a href="#2-创建分支-实操" class="headerlink" title="2.创建分支(实操)"></a>2.创建分支(实操)</h3><ul><li><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch 分支名 </span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例-1"><a href="#实操案例-1" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command2/3.png" alt="image"></li></ul></li><li><h3 id="3-修改分支-实操"><a href="#3-修改分支-实操" class="headerlink" title="3.修改分支(实操)"></a>3.修改分支(实操)</h3><ul><li><h4 id="实操案例-2"><a href="#实操案例-2" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command2/4.png" alt="image"><br><img src="/../upload/git/git-command2/5.png" alt="image"></li></ul></li><li><h3 id="4-切换分支-实操"><a href="#4-切换分支-实操" class="headerlink" title="4.切换分支(实操)"></a>4.切换分支(实操)</h3><ul><li><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例-3"><a href="#实操案例-3" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command2/6.png" alt="image"><br><img src="/../upload/git/git-command2/7.png" alt="image"></li></ul></li><li><h3 id="5-合并分支-实操"><a href="#5-合并分支-实操" class="headerlink" title="5.合并分支(实操)"></a>5.合并分支(实操)</h3><ul><li><h3 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure></li><li><h4 id="实操案例-4"><a href="#实操案例-4" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h4><img src="/../upload/git/git-command2/8.png" alt="image"></li><li><h2 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a><strong>分支冲突</strong></h2><ul><li><h3 id="冲突产生的表现：后面状态为-MERGING-合并中"><a href="#冲突产生的表现：后面状态为-MERGING-合并中" class="headerlink" title="冲突产生的表现：后面状态为 MERGING(合并中)"></a><strong>冲突产生的表现：后面状态为 MERGING(合并中)</strong></h3>  <img src="/../upload/git/git-command2/9.png" alt="image"><br>  <img src="/../upload/git/git-command2/10.png" alt="image"></li><li><h3 id="冲突产生的原因："><a href="#冲突产生的原因：" class="headerlink" title="冲突产生的原因："></a><strong>冲突产生的原因：</strong></h3><ul><li>合并分支时，两个分支在<strong>同一个文件的同一个位置</strong>有两套完全不同的修改。Git 无法替我们决定使用哪一个。必须<strong>人为决定</strong>新代码内容。</li><li><strong>查看状态（检测到有文件有两处修改）</strong><br>  <img src="/../upload/git/git-command2/11.png" alt="image"></li></ul></li><li><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a><strong>解决冲突</strong></h3><ul><li><h3 id="1）编辑有冲突的文件，删除特殊符号，决定要使用的内容"><a href="#1）编辑有冲突的文件，删除特殊符号，决定要使用的内容" class="headerlink" title="1）编辑有冲突的文件，删除特殊符号，决定要使用的内容"></a>1）编辑有冲突的文件，删除特殊符号，决定要使用的内容</h3>  <strong>特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 当前分支的代码 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;合并过来的代码 &gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</strong><br>  <img src="/../upload/git/git-command2/12.png" alt="image"><br>  <img src="/../upload/git/git-command2/13.png" alt="image"></li><li><h3 id="2）添加到暂存区"><a href="#2）添加到暂存区" class="headerlink" title="2）添加到暂存区"></a>2）添加到暂存区</h3>  <img src="/../upload/git/git-command2/14.png" alt="image"></li><li><h3 id="3）执行提交（注意：此时使用-git-commit-命令时不能带文件名后缀名）"><a href="#3）执行提交（注意：此时使用-git-commit-命令时不能带文件名后缀名）" class="headerlink" title="3）执行提交（注意：此时使用 git commit 命令时不能带文件名后缀名）"></a>3）执行提交（注意：此时使用 git commit 命令时不能带文件名后缀名）</h3>  <img src="/../upload/git/git-command2/15.png" alt="image"></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
            <tag> git的常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习笔记(2)-git的常用指令</title>
      <link href="/2022/07/17/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/07/17/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a><strong>git</strong>常用指令</h1><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name 用户名(自定义)       设置用户签名</span><br><span class="line">git config --global user.email 邮箱(可以是虚拟的)  设置用户签名</span><br><span class="line">git init                                          初始化本地库</span><br><span class="line">git status                                        查看本地库状态</span><br><span class="line">git add 文件名                                     添加到暂存区</span><br><span class="line">git rm --cached 文件名                            将指定文件从暂存区中删除,但保留工作区的文件</span><br><span class="line">git commit -m &quot;日志信息&quot; 文件名                    提交到本地库</span><br><span class="line">git reflog(也可简写为git log)                      查看历史记录</span><br><span class="line">git reset --hard 版本号                            版本穿梭</span><br></pre></td></tr></table></figure></code></pre><h2 id="1-设置用户签名-实操"><a href="#1-设置用户签名-实操" class="headerlink" title="1.设置用户签名(实操)"></a>1.设置用户签名(实操)</h2><ul><li><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br><span class="line">git config --global user.email 邮箱</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例"><a href="#实操案例" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/1.png" alt="image"></li><li><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a><strong>说明</strong></h3> 签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名，否则无法提交代码。<strong>注意:</strong> 这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系。</li></ul><h2 id="2-初始化本地库-实操"><a href="#2-初始化本地库-实操" class="headerlink" title="2.初始化本地库(实操)"></a>2.初始化本地库(实操)</h2><ul><li><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git  init </span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-1"><a href="#实操案例-1" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/2.png" alt="image"></li><li><strong>结果查看</strong><br>  <img src="/../upload/git/git-command/3.png" alt="image"></li></ul><h2 id="3-查看本地库状态"><a href="#3-查看本地库状态" class="headerlink" title="3.查看本地库状态"></a>3.查看本地库状态</h2><ul><li><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status </span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-2"><a href="#实操案例-2" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/4.png" alt="image"></li><li><h3 id="新增文件-hello-txt"><a href="#新增文件-hello-txt" class="headerlink" title="新增文件(hello.txt)"></a><strong>新增文件(hello.txt)</strong></h3>  <img src="/../upload/git/git-command/5.png" alt="image"></li><li><h3 id="再次查看-检测到未追踪的文件即文件为红色表示未添加到暂存区"><a href="#再次查看-检测到未追踪的文件即文件为红色表示未添加到暂存区" class="headerlink" title="再次查看(检测到未追踪的文件即文件为红色表示未添加到暂存区)"></a><strong>再次查看(检测到未追踪的文件即文件为红色表示未添加到暂存区)</strong></h3>  <img src="/../upload/git/git-command/6.png" alt="image"></li></ul><h2 id="4-添加暂存区"><a href="#4-添加暂存区" class="headerlink" title="4.添加暂存区"></a>4.添加暂存区</h2><ul><li><h3 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-3"><a href="#实操案例-3" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/7.png" alt="image"></li><li><h3 id="查看状态（检测到暂存区有新文件-文件变绿）"><a href="#查看状态（检测到暂存区有新文件-文件变绿）" class="headerlink" title="查看状态（检测到暂存区有新文件,文件变绿）"></a><strong>查看状态（检测到暂存区有新文件,文件变绿）</strong></h3> <img src="/../upload/git/git-command/8.png" alt="image"></li></ul><h2 id="5-提交本地库-将暂存区的文件提交到本地库"><a href="#5-提交本地库-将暂存区的文件提交到本地库" class="headerlink" title="5.提交本地库(将暂存区的文件提交到本地库)"></a>5.提交本地库(将暂存区的文件提交到本地库)</h2><ul><li><h3 id="基本语法-4"><a href="#基本语法-4" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;日志信息&quot; 文件名</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-4"><a href="#实操案例-4" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/9.png" alt="image"></li><li><h3 id="查看状态（没有文件需要提交）"><a href="#查看状态（没有文件需要提交）" class="headerlink" title="查看状态（没有文件需要提交）"></a><strong>查看状态（没有文件需要提交）</strong></h3> <img src="/../upload/git/git-command/10.png" alt="image"></li></ul><h2 id="6修改文件（hello-txt）"><a href="#6修改文件（hello-txt）" class="headerlink" title="6修改文件（hello.txt）"></a>6修改文件（hello.txt）</h2><ul><li><h3 id="基本语法-5"><a href="#基本语法-5" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim 文件名</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-5"><a href="#实操案例-5" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/11.png" alt="image"></li><li><h3 id="查看状态（检测到工作区有文件被修改）"><a href="#查看状态（检测到工作区有文件被修改）" class="headerlink" title="查看状态（检测到工作区有文件被修改）"></a><strong>查看状态（检测到工作区有文件被修改）</strong></h3> <img src="/../upload/git/git-command/12.png" alt="image"></li><li><h3 id="将修改的文件再次添加暂存区）"><a href="#将修改的文件再次添加暂存区）" class="headerlink" title="将修改的文件再次添加暂存区）"></a><strong>将修改的文件再次添加暂存区）</strong></h3> <img src="/../upload/git/git-command/13.png" alt="image"></li><li><h3 id="查看状态（工作区的修改添加到了暂存区）"><a href="#查看状态（工作区的修改添加到了暂存区）" class="headerlink" title="查看状态（工作区的修改添加到了暂存区）"></a><strong>查看状态（工作区的修改添加到了暂存区）</strong></h3> <img src="/../upload/git/git-command/14.png" alt="image"></li></ul><h2 id="7-查看历史版本"><a href="#7-查看历史版本" class="headerlink" title="7.查看历史版本"></a>7.查看历史版本</h2><ul><li><h3 id="基本语法-6"><a href="#基本语法-6" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog查看版本信息</span><br><span class="line">git log查看版本详细信息</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-6"><a href="#实操案例-6" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/15.png" alt="image"></li></ul><h2 id="8-版本穿梭"><a href="#8-版本穿梭" class="headerlink" title="8.版本穿梭"></a>8.版本穿梭</h2><ul><li><h3 id="基本语法-7"><a href="#基本语法-7" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure></li><li><h3 id="实操案例-7"><a href="#实操案例-7" class="headerlink" title="实操案例"></a><strong>实操案例</strong></h3> <img src="/../upload/git/git-command/16.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
            <tag> git的常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的学习笔记(1)</title>
      <link href="/2022/07/17/git%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/17/git%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="git的学习笔记（1）"><a href="#git的学习笔记（1）" class="headerlink" title="git的学习笔记（1）"></a><strong>git</strong>的学习笔记（1）</h1><h2 id="1-什么是git？"><a href="#1-什么是git？" class="headerlink" title="1.什么是git？"></a>1.什么是<strong>git</strong>？</h2><ul><li><strong>Git</strong>是一个免费的、开源的<strong>分布式版本控制系统</strong>，可以快速高效地处理从小型到大型的各种项目。</li><li><strong>Git</strong>易于学习，占地面积小，性能极快。 它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。</li></ul><h2 id="2-什么是版本控制工具-集中式和分布式"><a href="#2-什么是版本控制工具-集中式和分布式" class="headerlink" title="2.什么是版本控制工具(集中式和分布式)"></a>2.什么是版本控制工具(集中式和分布式)</h2><ul><li>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。</li><li>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本， 方便版本切换。</li></ul><h4 id="1-集中式版本控制工具"><a href="#1-集中式版本控制工具" class="headerlink" title="1)集中式版本控制工具"></a>1)集中式版本控制工具</h4><ul><li><strong>集中化的版本控制系统</strong>诸如 CVS、SVN 等，<strong>都有一个单一的集中管理的服务器</strong>，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。</li><li>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。</li><li>事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。<br> <img src="/../upload/git/1.png" alt="image"></li></ul><h4 id="2-分布式版本控制工具"><a href="#2-分布式版本控制工具" class="headerlink" title="2)分布式版本控制工具"></a>2)分布式版本控制工具</h4><ul><li>像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。</li></ul><h5 id="分布式的版本控制系统出现之后-解决了集中式版本控制系统的缺陷"><a href="#分布式的版本控制系统出现之后-解决了集中式版本控制系统的缺陷" class="headerlink" title="分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:"></a><strong>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:</strong></h5><ul><li>(1).服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</li><li>(2).每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）<br> <img src="/../upload/git/2.png" alt="image"></li></ul><h2 id="3-工作机制"><a href="#3-工作机制" class="headerlink" title="3.工作机制"></a>3.工作机制</h2><h4 id="Git的分区包括工作区、暂存区、本地仓库（本地版本库）、远程仓库（远程版本库）。"><a href="#Git的分区包括工作区、暂存区、本地仓库（本地版本库）、远程仓库（远程版本库）。" class="headerlink" title="Git的分区包括工作区、暂存区、本地仓库（本地版本库）、远程仓库（远程版本库）。"></a>Git的分区包括工作区、暂存区、本地仓库（本地版本库）、远程仓库（远程版本库）。</h4><ul><li>1.<strong>工作区:</strong> 所谓工作区就是写代码的地方但并非开发工具（开发平台）代码存放的磁盘的目录的位置</li><li>2.<strong>暂存区:</strong> 工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。工作区写好的代码需要让git追踪到，因此你需要将工作区的代码添加（git add）到暂存区,暂存区的代码是临时存储(没有生成历史版本),即暂存区和工作区的代码均可以被删除</li><li>3.<strong>本地库:</strong> 将暂存区的代码提交(git commit)到本地库就会生成对应的历史版本,即不可能删除掉了,除非你将整个本地库删除</li><li>4.<strong>远程库:</strong> 将本地库的代码推送(push)到远程库(github),可用于远程恢复代码,当我们的电脑磁盘损坏亦或者新版本代码错误过多时可以通过远程库进行版本的回退以及代码的回滚<ul><li><strong>远程库</strong>又称<strong>代码托管中心</strong>，是基于网络服务器的远程代码仓库<ul><li><strong>GitLab</strong>(基于局域网的代码托管中心)</li><li><strong>GitHub</strong>（外网）</li><li><strong>Gitee</strong> 码云（国内网站，相当于国内的github）<br><img src="/../upload/git/4.png" alt="image"></li></ul></li></ul></li></ul><h4 id="具体实现流程"><a href="#具体实现流程" class="headerlink" title="具体实现流程"></a>具体实现流程</h4><ul><li>假如要实现上传代码功能，工作区使用add添加文件到暂存区，暂存区再通过commit提交版本给本地仓库，最后本地仓库使用push将版本推送到远程仓库；</li><li>工作区修改的文件可以通过checkout命令从本地仓库或暂存区恢复；如果要将工作区某分支的代码更新为远程仓库最新版本，可以使用pull命令；</li><li>对远程仓库使用clone可以将远程仓库主分支拷贝到本地仓库，fetch命令与pull类似，只是pull会合并本地代码，而fetch只会把最新版本抓取到本地版本库，不考虑本地仓库是否有新增。</li></ul><blockquote><p>这类git博客主要引用了作者为”<strong>尚硅谷</strong>“的文章，是博主在学习尚硅谷的<strong>git</strong>教程做的一些笔记<br>这篇博客另外引用了作者为”<strong>luffylv</strong>“和”<strong>长期闲置</strong>“的文章<br>原文链接为:<a href="https://www.bilibili.com/video/BV1vy4y1s7k6?p=1&vd_source=eeca4958b140403ede65df6022e4b306">BiliBili</a>、<a href="https://blog.csdn.net/m0_47503416/article/details/110100690">CSDN</a>、<a href="https://www.php.cn/tool/git/490641.html">PHP中文网</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git的学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改butterfly(2)-插入自定义样式</title>
      <link href="/2022/07/16/%E9%AD%94%E6%94%B9butterfly2/"/>
      <url>/2022/07/16/%E9%AD%94%E6%94%B9butterfly2/</url>
      
        <content type="html"><![CDATA[<h1 id="魔改butterfly主题2-插入自定义样式"><a href="#魔改butterfly主题2-插入自定义样式" class="headerlink" title="魔改butterfly主题2-插入自定义样式"></a>魔改butterfly主题2-插入自定义样式</h1><p><strong>在原来的butterfly主题上插入自己喜欢的样式获证更改原来的样式</strong></p><ul><li>Hexo主题给我们预备了一个自定义接口，路径在主题目录下的_config.yml里面你的Inject中，具体如下：<br><img src="/../upload/mogai2/1.png" alt="image"></li><li>我们只需要在主题目录下先建一个样式文件夹，在里面新建一个样式表（css文件）用于存放我们的自定义样式即可：<br><img src="/../upload/mogai2/2.png" alt="image"></li><li>这的Mycss里面的style.css就是我新建的样式表，随后我们在head里面的link标签中引入对应的路径即可，然后我们通过浏览器，动态捕获对应的标签类名，id名即可对对应的样式进行更改自定义：<br><img src="/../upload/mogai2/3.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改butterfly(1)-魔改gallery图库</title>
      <link href="/2022/07/16/%E9%AD%94%E6%94%B9butterfly1/"/>
      <url>/2022/07/16/%E9%AD%94%E6%94%B9butterfly1/</url>
      
        <content type="html"><![CDATA[<h1 id="魔改butterfly主题1-gallery图库"><a href="#魔改butterfly主题1-gallery图库" class="headerlink" title="魔改butterfly主题1-gallery图库"></a>魔改butterfly主题1-gallery图库</h1><p><strong>将原来的gallery图库魔改成自己喜欢功能的页面跳转（这里我将gallery图库改成了一个小游戏中心）</strong></p><ul><li><h2 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h2><ul><li><p>1、首先导入gallery图库:在主题目录下的_config.yml中的menu菜单中新建导航栏小游戏<br>  <img src="/../upload/mogai1/1.png" alt="image"></p></li><li><p>2、然后调用hexo指令(hexo new page 页面名字(这里是game))新建一个页面用于存放图库,然后在这个新页面中添加小游戏的&#x2F;game&#x2F;类型用于绑定页面<br>  <img src="/../upload/mogai1/2.png" alt="image"></p></li><li><p>3、随后就是固定搭配,将代码复制进入有也页面的md文件中即可,就像上图一样,代码格式如下:</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 1).name：图框上面的名字 2. description：图库描述  --&gt;</span><br><span class="line">&lt;!-- 3).link：连接到对应相册的地址  --&gt;</span><br><span class="line">&lt;!-- 4).img-url：图库封面的地址 --&gt;</span><br></pre></td></tr></table></figure><p>  <strong>完成后如下图所示:</strong><br>  <img src="/../upload/mogai1/3.png" alt="image"></p></li><li><p><strong>关键步骤:</strong></p><ul><li><p>1)点击跳转的实现:这里需要魔改源代码,Hexo好像内置了插件，默认 不同源才会新的链接打开。如果想以新链接形式打开，需要改下源码，找到 【node_modules\hexo-theme-butterfly\scripts\tag\gallery.js】，代码大概在27行左右，将 &lt; a href&#x3D;’ ‘&gt;&lt;&#x2F; a&gt; 改成 &lt; a href&#x3D;’${url}’ target&#x3D;”_blank”&gt;&lt;&#x2F; a&gt; ,这样点击相册就会跳转到一个新页面。</p></li><li><p>2)解决渲染问题，要想跳转的新页面没有主题嵌入的问题（主题嵌入：跳转新页面成功了，但是还是有原来的样式，就是你博客的原样式存在，并没有我小游戏的样式存在，就相当于点击跳转新页面（回到你新的博客页面），然后游戏嵌在了博客页面里面）图如下：<br>  <img src="/../upload/mogai1/4.png" alt="image"></p></li><li><p>3)解决方法：设置指向的页面跳过渲染即可（这里是游戏页面）<br>  具体实施步骤：<br>  找到根目录下的_config.yml里面的skip_render，像下面一样跳过渲染指定的文件夹即可。<br>  <img src="/../upload/mogai1/5.png" alt="image"><br>  然后再在git bash里面一键三连，记住一定要先执行清除命令：hexo cl</p><p>  <strong>Hexo的原文档如下：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skip_render: &quot;mypage/**/*&quot;</span><br><span class="line"># 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 &#x27;public&#x27; 目录</span><br><span class="line"># 你也可以用这种方法来跳过对指定文章文件的渲染</span><br><span class="line">skip_render: &quot;_posts/test-post.md&quot;</span><br><span class="line"># 这将会忽略对 &#x27;test-post.md&#x27; 的渲染</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="跳过主题渲染一般有两种方法："><a href="#跳过主题渲染一般有两种方法：" class="headerlink" title="跳过主题渲染一般有两种方法："></a>跳过主题渲染一般有两种方法：</h2><ul><li><strong>第一种就是上文提到的，在 config.yml 文件里（注意是Hexo本身自带的config.yml，不是主题带的config.yml）找到 skip_render: 设置跳过渲染。</strong></li><li><strong>第二种就是在你指定想要跳过渲染的页面的index.md当中，在其 Front-matter内容区域添加：</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout: false</span><br></pre></td></tr></table></figure></li></ul><h3 id="如图所示"><a href="#如图所示" class="headerlink" title="如图所示:"></a>如图所示:</h3><p><img src="/../upload/mogai1/6.png" alt="image"><br><strong>随后去到主题目录下的config.yml 文件里在指定的标签中添加自己想要或者自定义的html文件即可,如下图所示:</strong><br><img src="/../upload/mogai1/7.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用指令</title>
      <link href="/2022/07/13/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/07/13/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo常用指令介绍"><a href="#hexo常用指令介绍" class="headerlink" title="hexo常用指令介绍"></a>hexo常用指令介绍</h1><ul><li><strong>$ hexo clean</strong> (清空)<ul><li>清除缓存文件 db.json 和已生成的静态文件 public 。</li><li>网站显示异常时可以执行这条命令试试。</li></ul></li><li><strong>$ hexo g</strong> (重新生成)<ul><li><p>生成网站静态文件到默认设置的 public 文件夹。</p></li><li><p>便于查看网站生成的静态文件或者手动部署网站；</p></li><li><p>如果使用自动部署，不需要先执行该命令；<br>  hexo g 是 hexo generate 的缩写，命令效果一致</p></li></ul></li><li><strong>$ hexo s</strong> (重新启动)<ul><li>启动本地服务器，用于预览主题。<br>   -hexo s 是 hexo server 的缩写，命令效果一致；</li><li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li><li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果</li></ul></li><li><strong>$ hexo d</strong> (重新部署到仓库)<ul><li>自动生成网站静态文件，并部署到设定的仓库。</li><li>hexo d 是 hexo deploy 的缩写，命令效果一致</li></ul></li><li><strong>$ hexo new “文章标题”</strong>(新建文章)<ul><li>文章标题也可以在对应的md文件中修改</li></ul></li><li><strong>$ hexo new page 网页名</strong><ul><li>例：hexo new page welcome</li><li>新建一个标题名为welcome的页面，默认连接地址：主页地址&#x2F;welcome&#x2F;</li><li>此页面不会出现在首页文章列表和归档中，也不支持设置分类和标签</li></ul></li></ul><h2 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h2><ul><li>一般会打开博客所在文件夹内右键 Git Bash Here，然后再命令行一键三连： <figure class="highlight plaintext"><figcaption><span>Command(代码指令)</span></figcaption><table><tr><td class="code"><pre><span class="line">$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li><li>然后我么就可以打开浏览器输入主机地址:localhost:4000&#x2F;，查看自己更新的博客了！</li><li>不过这只是在本地进行了更新，要想部署到网上（Github上），还要输入如下指令： <figure class="highlight plaintext"><figcaption><span>Command(代码指令)</span></figcaption><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li>这样就能自动生成网站静态文件，并部署到我们设定的github仓库上了,别人访问我们的网站也能看到我们更新的内容了。</li></ul><blockquote><p>这篇博客引用了作者为”<strong>到现在负</strong>“的文章<br>原文链接为:<a href="https://blog.csdn.net/dxxzst/article/details/76135935">CSDN</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
